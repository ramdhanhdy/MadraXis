This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.js, **/*.ts, **/*.jsx, **/*.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app.config.js
app/_layout.tsx
app/(auth)/_layout.tsx
app/(auth)/login.tsx
app/(auth)/reset-password.tsx
app/(management)/_layout.tsx
app/(management)/dashboard.tsx
app/(management)/index.tsx
app/(management)/setup.tsx
app/(management)/user-management.tsx
app/(parent)/_layout.tsx
app/(parent)/anti-bullying.tsx
app/(parent)/cctv-request.tsx
app/(parent)/dashboard.tsx
app/(parent)/incident-report.tsx
app/(parent)/index.tsx
app/(student)/_layout.tsx
app/(student)/anti-bullying.tsx
app/(student)/boarding-info.tsx
app/(student)/dashboard.tsx
app/(student)/incident-report.tsx
app/(student)/index.tsx
app/(student)/quran-progress.tsx
app/(student)/schedule.tsx
app/(teacher)/_layout.tsx
app/(teacher)/class/[id]/index.tsx
app/(teacher)/class/[id]/reports/index.tsx
app/(teacher)/class/[id]/schedule/index.tsx
app/(teacher)/class/[id]/students/index.tsx
app/(teacher)/class/index.tsx
app/(teacher)/dashboard.tsx
app/(teacher)/index.tsx
app/(teacher)/students/[id].tsx
app/(teacher)/students/add.tsx
app/(teacher)/students/index.tsx
app/index.tsx
babel.config.js
jest.setup.js
metro.config.js
src/components/atoms/Avatar/Avatar.stories.tsx
src/components/atoms/Avatar/Avatar.test.tsx
src/components/atoms/Avatar/Avatar.tsx
src/components/atoms/Avatar/index.ts
src/components/atoms/BackgroundPattern/BackgroundPattern.stories.tsx
src/components/atoms/BackgroundPattern/BackgroundPattern.test.tsx
src/components/atoms/BackgroundPattern/BackgroundPattern.tsx
src/components/atoms/BackgroundPattern/index.ts
src/components/atoms/Button/Button.stories.tsx
src/components/atoms/Button/Button.test.tsx
src/components/atoms/Button/Button.tsx
src/components/atoms/Button/index.ts
src/components/atoms/Icon/Icon.stories.tsx
src/components/atoms/Icon/Icon.test.tsx
src/components/atoms/Icon/Icon.tsx
src/components/atoms/Icon/index.ts
src/components/atoms/index.ts
src/components/atoms/Input/index.ts
src/components/atoms/Input/Input.stories.tsx
src/components/atoms/Input/Input.test.tsx
src/components/atoms/Input/Input.tsx
src/components/atoms/LoadingSpinner/index.ts
src/components/atoms/LoadingSpinner/LoadingSpinner.test.tsx
src/components/atoms/LoadingSpinner/LoadingSpinner.tsx
src/components/atoms/Typography/index.ts
src/components/atoms/Typography/Typography.stories.tsx
src/components/atoms/Typography/Typography.test.tsx
src/components/atoms/Typography/Typography.tsx
src/components/index.ts
src/components/LogoIcon.tsx
src/components/molecules/Card/Card.stories.tsx
src/components/molecules/Card/Card.test.tsx
src/components/molecules/Card/Card.tsx
src/components/molecules/Card/index.ts
src/components/molecules/EmptyState/EmptyState.test.tsx
src/components/molecules/EmptyState/EmptyState.tsx
src/components/molecules/ErrorMessage/ErrorMessage.tsx
src/components/molecules/index.ts
src/components/molecules/ListItem/index.ts
src/components/molecules/ListItem/ListItem.stories.tsx
src/components/molecules/ListItem/ListItem.test.tsx
src/components/molecules/ListItem/ListItem.tsx
src/components/molecules/LogoutButton.tsx
src/components/molecules/NotificationItem/index.ts
src/components/molecules/NotificationItem/NotificationItem.stories.tsx
src/components/molecules/NotificationItem/NotificationItem.test.tsx
src/components/molecules/NotificationItem/NotificationItem.tsx
src/components/molecules/ProgressBar/index.ts
src/components/molecules/ProgressBar/ProgressBar.stories.tsx
src/components/molecules/ProgressBar/ProgressBar.test.tsx
src/components/molecules/ProgressBar/ProgressBar.tsx
src/components/molecules/QuickAction/index.ts
src/components/molecules/QuickAction/QuickAction.stories.tsx
src/components/molecules/QuickAction/QuickAction.test.tsx
src/components/molecules/QuickAction/QuickAction.tsx
src/components/molecules/SkeletonCard/SkeletonCard.test.tsx
src/components/molecules/SkeletonCard/SkeletonCard.tsx
src/components/organisms/AnimatedSplashScreen.tsx
src/components/organisms/AuthForm.tsx
src/components/organisms/ClassFormModal.tsx
src/components/organisms/DashboardContent/DashboardContent.tsx
src/components/organisms/DashboardContent/index.ts
src/components/organisms/ErrorBoundary/ErrorBoundary.tsx
src/components/organisms/Header/Header.stories.tsx
src/components/organisms/Header/Header.test.tsx
src/components/organisms/Header/Header.tsx
src/components/organisms/Header/index.ts
src/components/organisms/index.ts
src/components/organisms/Modal/index.ts
src/components/organisms/Modal/Modal.stories.tsx
src/components/organisms/Modal/Modal.test.tsx
src/components/organisms/Modal/Modal.tsx
src/components/organisms/NavigationPanel/index.ts
src/components/organisms/NavigationPanel/NavigationPanel.stories.tsx
src/components/organisms/NavigationPanel/NavigationPanel.test.tsx
src/components/organisms/NavigationPanel/NavigationPanel.tsx
src/components/organisms/StudentBoardingInfoModal.tsx
src/components/organisms/StudentCommunicationModal.tsx
src/components/organisms/StudentIncidentReportModal.tsx
src/components/organisms/SubjectManager.tsx
src/components/organisms/TabBar/index.ts
src/components/organisms/TabBar/TabBar.stories.tsx
src/components/organisms/TabBar/TabBar.test.tsx
src/components/organisms/TabBar/TabBar.tsx
src/components/organisms/TeacherBoardingInfoModal.tsx
src/components/organisms/TeacherCommunicationModal.tsx
src/components/organisms/TeacherIncidentReportModal.tsx
src/components/organisms/TeacherNotificationPanel.tsx
src/components/organisms/TeacherProfileView.tsx
src/components/templates/AddStudentTemplate.tsx
src/components/templates/AntiBullyingResourcesTemplate.tsx
src/components/templates/CCTVAccessRequestTemplate.tsx
src/components/templates/ClassDetailTemplate.tsx
src/components/templates/ClassDetailView.tsx
src/components/templates/ClassesListTemplate.tsx
src/components/templates/ClassReportsTemplate.tsx
src/components/templates/ClassScheduleTemplate.tsx
src/components/templates/ClassStudentsTemplate.tsx
src/components/templates/DashboardTemplate/DashboardTemplate.stories.tsx
src/components/templates/DashboardTemplate/DashboardTemplate.test.tsx
src/components/templates/DashboardTemplate/DashboardTemplate.tsx
src/components/templates/DashboardTemplate/index.ts
src/components/templates/FormTemplate/FormTemplate.stories.tsx
src/components/templates/FormTemplate/FormTemplate.test.tsx
src/components/templates/FormTemplate/FormTemplate.tsx
src/components/templates/FormTemplate/index.ts
src/components/templates/index.ts
src/components/templates/ModalTemplate/index.ts
src/components/templates/ModalTemplate/ModalTemplate.stories.tsx
src/components/templates/ModalTemplate/ModalTemplate.test.tsx
src/components/templates/ModalTemplate/ModalTemplate.tsx
src/components/templates/ParentIncidentReportTemplate.tsx
src/components/templates/StudentAntiBullyingTemplate.tsx
src/components/templates/StudentDetailTemplate.tsx
src/components/templates/StudentIncidentReportTemplate.tsx
src/components/templates/StudentsListTemplate.tsx
src/context/AuthContext.tsx
src/context/ThemeContext.tsx
src/mocks/classData.ts
src/services/classService.ts
src/services/dashboard.ts
src/services/incidents.ts
src/services/schools.ts
src/services/subjectService.ts
src/services/users.ts
src/styles/colors.ts
src/styles/shadows.ts
src/styles/spacing.ts
src/styles/theme.ts
src/styles/typography.ts
src/types/class.ts
src/types/dashboard.ts
src/types/index.ts
src/utils/backgroundPattern.ts
src/utils/idConversion.ts
src/utils/responsive.ts
src/utils/styleHelpers.ts
src/utils/supabase.ts
src/utils/svgPatterns.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app.config.js">
export default {
  expo: {
    name: "MadraXis",
    slug: "MadraXis",
    version: "1.0.0",
    sdkVersion: "53.0.0",
    orientation: "portrait",
    icon: "./assets/images/icon.png",
    scheme: "madraxis",
    userInterfaceStyle: "automatic",
    newArchEnabled: true,
    ios: {
      supportsTablet: true
    },
    android: {
      adaptiveIcon: {
        foregroundImage: "./assets/images/adaptive-icon.png",
        backgroundColor: "#ffffff"
      }
    },
    web: {
      bundler: "metro",
      output: "static",
      favicon: "./assets/images/favicon.png"
    },
    assetBundlePatterns: [
      "**/*"
    ],
    splash: {
      image: "./assets/images/splash.png",
      resizeMode: "contain",
      backgroundColor: "#ffffff"
    },
    plugins: [
      "expo-router",
      [
        "expo-splash-screen",
        {
          image: "./assets/images/splash.png",
          resizeMode: "contain",
          backgroundColor: "#ffffff"
        }
      ]
    ],
    experiments: {
      typedRoutes: true
    },
    extra: {
      supabaseUrl: process.env.EXPO_PUBLIC_SUPABASE_URL,
      supabaseAnonKey: process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
    }
  }
};
</file>

<file path="app/index.tsx">
import { Redirect } from 'expo-router';

export default function Index() {
  return <Redirect href="/(auth)/login" />;
}
</file>

<file path="metro.config.js">
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname, {
  // Enable CSS support.
  isCSSEnabled: true,
});

// Add Supabase support for React Native 0.79+
config.resolver.unstable_enableSymlinks = true;
config.resolver.unstable_enablePackageExports = true;
config.resolver.resolverMainFields = ['react-native', 'browser', 'main'];

// Add SVG support
config.resolver.assetExts = config.resolver.assetExts.filter(ext => ext !== 'svg');
config.resolver.sourceExts = [...config.resolver.sourceExts, 'svg'];

module.exports = config;
</file>

<file path="src/components/atoms/Avatar/Avatar.stories.tsx">
/**
 * Avatar Component Stories
 * Storybook stories showcasing all Avatar variants and use cases
 */

import type { Meta, StoryObj } from '@storybook/react-native';
import { View, StyleSheet } from 'react-native';
import { Avatar } from './Avatar';
import { ThemeProvider } from '../../../context/ThemeContext';

const meta: Meta<typeof Avatar> = {
  title: 'Atoms/Avatar',
  component: Avatar,
  decorators: [
    (Story) => (
      <ThemeProvider>
        <View style={styles.container}>
          <Story />
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        component: 'User profile images and initials with consistent sizing and fallbacks.',
      },
    },
  },
  argTypes: {
    name: {
      control: 'text',
      description: 'User name for generating initials',
    },
    initials: {
      control: 'text',
      description: 'Custom initials (overrides name-based generation)',
    },
    size: {
      control: 'select',
      options: ['xs', 'sm', 'md', 'lg', 'xl', '2xl'],
      description: 'Avatar size',
    },
    shape: {
      control: 'select',
      options: ['circle', 'square', 'rounded'],
      description: 'Avatar shape',
    },
    showStatus: {
      control: 'boolean',
      description: 'Show status indicator',
    },
    status: {
      control: 'select',
      options: ['online', 'offline', 'away', 'busy'],
      description: 'Status indicator type',
    },
    disabled: {
      control: 'boolean',
      description: 'Disabled state',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Avatar>;

// Mock image sources
const mockImageSource = { uri: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face' };
const mockImageSource2 = { uri: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face' };

// Basic avatar with initials
export const Default: Story = {
  args: {
    name: 'John Doe',
  },
};

// All sizes
export const Sizes: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="John Doe" size="xs" />
      <Avatar name="John Doe" size="sm" />
      <Avatar name="John Doe" size="md" />
      <Avatar name="John Doe" size="lg" />
      <Avatar name="John Doe" size="xl" />
      <Avatar name="John Doe" size="2xl" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars in different sizes: xs, sm, md, lg, xl, 2xl',
      },
    },
  },
};

// All shapes
export const Shapes: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="John Doe" shape="circle" size="lg" />
      <Avatar name="John Doe" shape="square" size="lg" />
      <Avatar name="John Doe" shape="rounded" size="lg" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars with different shapes: circle, square, rounded',
      },
    },
  },
};

// With images
export const WithImages: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar source={mockImageSource} name="John Doe" />
      <Avatar source={mockImageSource2} name="Jane Smith" size="lg" />
      <Avatar source={mockImageSource} name="Bob Johnson" shape="rounded" size="xl" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars displaying user profile images',
      },
    },
  },
};

// Initials generation
export const InitialsGeneration: Story = {
  render: () => (
    <View style={styles.grid}>
      <Avatar name="John" />
      <Avatar name="John Doe" />
      <Avatar name="John Michael Doe" />
      <Avatar name="José María" />
      <Avatar initials="AB" name="Should be AB" />
      <Avatar name="" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different ways initials are generated from names',
      },
    },
  },
};

// Status indicators
export const StatusIndicators: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="John Doe" showStatus status="online" />
      <Avatar name="Jane Smith" showStatus status="away" />
      <Avatar name="Bob Johnson" showStatus status="busy" />
      <Avatar name="Alice Brown" showStatus status="offline" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars with different status indicators',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="Red User" backgroundColor="#ff6b6b" />
      <Avatar name="Blue User" backgroundColor="#4ecdc4" />
      <Avatar name="Green User" backgroundColor="#45b7d1" />
      <Avatar name="Purple User" backgroundColor="#a8e6cf" />
      <Avatar name="Orange User" backgroundColor="#feca57" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars with custom background colors',
      },
    },
  },
};

// With borders
export const WithBorders: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="John Doe" borderWidth={2} borderColor="#e0e0e0" />
      <Avatar name="Jane Smith" borderWidth={3} borderColor="#2196f3" size="lg" />
      <Avatar 
        source={mockImageSource} 
        name="Bob Johnson" 
        borderWidth={4} 
        borderColor="#4caf50" 
        size="xl" 
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars with different border styles',
      },
    },
  },
};

// Interactive avatars
export const Interactive: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar 
        name="John Doe" 
        onPress={() => console.log('John pressed')} 
        accessibilityLabel="John Doe's profile"
      />
      <Avatar 
        source={mockImageSource2} 
        name="Jane Smith" 
        onPress={() => console.log('Jane pressed')} 
        size="lg"
        accessibilityLabel="Jane Smith's profile"
      />
      <Avatar 
        name="Bob Johnson" 
        onPress={() => console.log('Bob pressed')} 
        showStatus 
        status="online"
        size="xl"
        accessibilityLabel="Bob Johnson's profile"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Interactive avatars that respond to press events',
      },
    },
  },
};

// Disabled state
export const Disabled: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar name="John Doe" disabled />
      <Avatar name="Jane Smith" onPress={() => {}} disabled />
      <Avatar source={mockImageSource} name="Bob Johnson" onPress={() => {}} disabled />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars in disabled state with reduced opacity',
      },
    },
  },
};

// Team/Group avatars
export const TeamAvatars: Story = {
  render: () => (
    <View style={styles.grid}>
      <Avatar name="Alice Johnson" showStatus status="online" />
      <Avatar name="Bob Smith" showStatus status="away" />
      <Avatar name="Carol Davis" showStatus status="busy" />
      <Avatar name="David Wilson" showStatus status="offline" />
      <Avatar name="Eva Brown" showStatus status="online" />
      <Avatar name="Frank Miller" showStatus status="away" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Team member avatars with status indicators',
      },
    },
  },
};

// Different roles/contexts
export const RoleBasedAvatars: Story = {
  render: () => (
    <View style={styles.column}>
      <View style={styles.section}>
        <Avatar name="Teacher Name" backgroundColor="#2196f3" size="lg" />
        <Avatar name="Student Name" backgroundColor="#4caf50" size="md" />
        <Avatar name="Parent Name" backgroundColor="#ff9800" size="md" />
        <Avatar name="Admin User" backgroundColor="#9c27b0" size="lg" />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatars styled for different user roles',
      },
    },
  },
};

// Complex combinations
export const ComplexCombinations: Story = {
  render: () => (
    <View style={styles.grid}>
      <Avatar
        source={mockImageSource}
        name="John Doe"
        size="xl"
        shape="rounded"
        showStatus
        status="online"
        borderWidth={2}
        borderColor="#4caf50"
        onPress={() => console.log('Complex avatar pressed')}
      />
      <Avatar
        name="Jane Smith"
        size="lg"
        shape="circle"
        backgroundColor="#e3f2fd"
        textColor="#1976d2"
        showStatus
        status="busy"
        borderWidth={1}
        borderColor="#1976d2"
      />
      <Avatar
        initials="AB"
        size="xl"
        shape="square"
        backgroundColor="#fff3e0"
        textColor="#f57c00"
        showStatus
        status="away"
        statusColor="#ff9800"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Complex avatar configurations with multiple features',
      },
    },
  },
};

// Fallback scenarios
export const FallbackScenarios: Story = {
  render: () => (
    <View style={styles.row}>
      <Avatar source={{ uri: 'invalid-url' }} name="Fallback User" />
      <Avatar name="" />
      <Avatar />
      <Avatar initials="" name="Empty Initials" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Avatar fallback behavior when images fail or data is missing',
      },
    },
  },
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#ffffff',
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    flexWrap: 'wrap',
  },
  column: {
    gap: 16,
  },
  grid: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    flexWrap: 'wrap',
    maxWidth: 300,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
});
</file>

<file path="src/components/atoms/Avatar/Avatar.test.tsx">
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { Avatar } from './Avatar';

const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

const mockImageSource = { uri: 'https://example.com/avatar.jpg' };

describe('Avatar Component', () => {
  describe('Rendering', () => {
    it('renders basic avatar with initials', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" testID="basic-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('basic-avatar')).toBeTruthy();
      expect(screen.getByText('JD')).toBeTruthy();
    });

    it('renders with accessibility label', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" accessibilityLabel="John Doe's avatar" testID="labeled-avatar" />
        </TestWrapper>
      );
      expect(screen.getByLabelText("John Doe's avatar")).toBeTruthy();
    });
  });

  describe('Sizes and Shapes', () => {
    it('renders md size correctly', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" size="md" testID="avatar-md" />
        </TestWrapper>
      );
      expect(screen.getByTestId('avatar-md')).toBeTruthy();
    });

    it('renders with circle shape', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" shape="circle" testID="avatar-circle" />
        </TestWrapper>
      );
      expect(screen.getByTestId('avatar-circle')).toBeTruthy();
    });
  });

  describe('Initials Generation', () => {
    it('generates initials from full name', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" />
        </TestWrapper>
      );
      expect(screen.getByText('JD')).toBeTruthy();
    });

    it('uses custom initials when provided', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" initials="AB" />
        </TestWrapper>
      );
      expect(screen.getByText('AB')).toBeTruthy();
    });

    it('shows fallback when no name or initials', () => {
      render(
        <TestWrapper>
          <Avatar />
        </TestWrapper>
      );
      expect(screen.getByText('?')).toBeTruthy();
    });
  });

  describe('Image Handling', () => {
    it('renders with image source', () => {
      render(
        <TestWrapper>
          <Avatar source={mockImageSource} name="John Doe" testID="image-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('image-avatar')).toBeTruthy();
    });

    it('falls back to initials when image fails to load', () => {
      render(
        <TestWrapper>
          <Avatar source={{ uri: 'invalid-url' }} name="John Doe" />
        </TestWrapper>
      );
      const image = screen.getByTestId('avatar-image');
      fireEvent(image, 'error');
      expect(screen.getByText('JD')).toBeTruthy();
    });

    it('renders with local image source', () => {
      const localSource = 1; // Mock require result
      render(
        <TestWrapper>
          <Avatar source={localSource} name="John Doe" testID="local-image-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('local-image-avatar')).toBeTruthy();
    });
  });

  describe('Interactivity', () => {
    it('calls onPress when pressed', () => {
      const onPress = jest.fn();
      render(
        <TestWrapper>
          <Avatar name="John Doe" onPress={onPress} testID="pressable-avatar" />
        </TestWrapper>
      );
      fireEvent.press(screen.getByTestId('pressable-avatar'));
      expect(onPress).toHaveBeenCalledTimes(1);
    });

    it('does not call onPress when disabled', () => {
      const onPress = jest.fn();
      render(
        <TestWrapper>
          <Avatar name="John Doe" onPress={onPress} disabled testID="disabled-avatar" />
        </TestWrapper>
      );
      fireEvent.press(screen.getByTestId('disabled-avatar'));
      expect(onPress).not.toHaveBeenCalled();
    });
  });

  describe('Status Indicators', () => {
    it('renders with online status', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" showStatus status="online" testID="avatar-online" />
        </TestWrapper>
      );
      expect(screen.getByTestId('avatar-online')).toBeTruthy();
      expect(screen.getByTestId('status-indicator')).toBeTruthy();
    });
  });

  describe('Customization', () => {
    it('renders with custom image source', () => {
      const customImageSource = { uri: 'https://example.com/custom-avatar.jpg' };
      render(
        <TestWrapper>
          <Avatar source={customImageSource} name="John Doe" testID="custom-image-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('custom-image-avatar')).toBeTruthy();
    });

    it('applies custom text style', () => {
      const customTextStyle = { fontStyle: 'italic' as const };
      render(
        <TestWrapper>
          <Avatar name="John Doe" textStyle={customTextStyle} testID="custom-text-style-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('custom-text-style-avatar')).toBeTruthy();
    });
  });

  describe('Accessibility', () => {
    it('uses custom accessibility hint', () => {
      render(
        <TestWrapper>
          <Avatar name="John Doe" onPress={() => {}} accessibilityHint="View user profile" testID="hint-avatar" />
        </TestWrapper>
      );
      const avatar = screen.getByTestId('hint-avatar');
      expect(avatar.props.accessibilityHint).toBe('View user profile');
    });

    it('provides default accessibility label', () => {
      render(
        <TestWrapper>
          <Avatar testID="default-label-avatar" />
        </TestWrapper>
      );
      expect(screen.getByLabelText('User avatar')).toBeTruthy();
    });
  });

  describe('Complex Combinations', () => {
    it('renders with all features combined', () => {
      const onPress = jest.fn();
      render(
        <TestWrapper>
          <Avatar
            source={mockImageSource}
            name="John Doe"
            size="lg"
            shape="rounded"
            backgroundColor="#f0f0f0"
            textColor="#333333"
            borderColor="#cccccc"
            borderWidth={1}
            showStatus
            status="online"
            statusColor="#00ff00"
            onPress={onPress}
            accessibilityLabel="John Doe's profile picture"
            accessibilityHint="Tap to view profile"
            testID="complex-avatar"
          />
        </TestWrapper>
      );
      const avatar = screen.getByTestId('complex-avatar');
      expect(avatar).toBeTruthy();
      expect(avatar.props.accessibilityRole).toBe('button');
      expect(avatar.props.accessibilityLabel).toBe("John Doe's profile picture");
      expect(avatar.props.accessibilityHint).toBe('Tap to view profile');
      fireEvent.press(avatar);
      expect(onPress).toHaveBeenCalledTimes(1);
    });

    it('handles image error with all features', () => {
      const onPress = jest.fn();
      render(
        <TestWrapper>
          <Avatar
            source={mockImageSource}
            name="John Doe"
            size="xl"
            shape="circle"
            showStatus
            status="busy"
            onPress={onPress}
            testID="error-handling-avatar"
          />
        </TestWrapper>
      );
      const avatar = screen.getByTestId('error-handling-avatar');
      expect(avatar).toBeTruthy();
      fireEvent.press(avatar);
      expect(onPress).toHaveBeenCalledTimes(1);
    });
  });

  describe('Edge Cases', () => {
    it('handles empty name gracefully', () => {
      render(
        <TestWrapper>
          <Avatar name="" testID="empty-name-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('empty-name-avatar')).toBeTruthy();
      expect(screen.getByText('?')).toBeTruthy();
    });

    it('handles whitespace-only name', () => {
      render(
        <TestWrapper>
          <Avatar name="   " testID="whitespace-name-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('whitespace-name-avatar')).toBeTruthy();
    });

    it('handles special characters in name', () => {
      render(
        <TestWrapper>
          <Avatar name="José María" testID="special-chars-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('special-chars-avatar')).toBeTruthy();
      expect(screen.getByText('JM')).toBeTruthy();
    });

    it('handles very long names', () => {
      render(
        <TestWrapper>
          <Avatar name="Very Long Name With Many Words That Should Be Truncated" testID="long-name-avatar" />
        </TestWrapper>
      );
      expect(screen.getByTestId('long-name-avatar')).toBeTruthy();
      expect(screen.getByText('VT')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/atoms/Avatar/Avatar.tsx">
/**
 * Avatar Component
 * User profile images and initials with consistent sizing and fallbacks
 */

import React, { useState } from 'react';
import { View, Image, Text, TouchableOpacity, ViewStyle, TextStyle, ImageStyle } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';

// Avatar Props Interface
export interface AvatarProps {
  // Image source
  source?: { uri: string } | number;
  
  // Fallback options
  name?: string;
  initials?: string;
  
  // Size options
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | number;
  
  // Shape options
  shape?: 'circle' | 'square' | 'rounded';
  
  // Interactive
  onPress?: () => void;
  disabled?: boolean;
  
  // Styling
  backgroundColor?: string;
  textColor?: string;
  borderColor?: string;
  borderWidth?: number;
  
  // Custom styling
  containerStyle?: ViewStyle;
  imageStyle?: ImageStyle;
  textStyle?: TextStyle;
  
  // Status indicator
  showStatus?: boolean;
  status?: 'online' | 'offline' | 'away' | 'busy';
  statusColor?: string;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  
  // Test ID
  testID?: string;
}

// Avatar Component
export const Avatar: React.FC<AvatarProps> = ({
  source,
  name,
  initials,
  size = 'md',
  shape = 'circle',
  onPress,
  disabled = false,
  backgroundColor,
  textColor,
  borderColor,
  borderWidth = 0,
  containerStyle,
  imageStyle,
  textStyle,
  showStatus = false,
  status = 'offline',
  statusColor,
  accessibilityLabel,
  accessibilityHint,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const [imageError, setImageError] = useState(false);

  // Get avatar size in pixels
  const getAvatarSize = (): number => {
    if (typeof size === 'number') {
      return size;
    }

    const sizeMap = {
      xs: 24,
      sm: 32,
      md: 40,
      lg: 48,
      xl: 64,
      '2xl': 80,
    };

    return sizeMap[size];
  };

  // Get border radius based on shape
  const getBorderRadius = (): number => {
    const avatarSize = getAvatarSize();
    
    switch (shape) {
      case 'circle':
        return avatarSize / 2;
      case 'square':
        return 0;
      case 'rounded':
        return theme.borderRadius.md;
      default:
        return avatarSize / 2;
    }
  };

  // Generate initials from name
  const generateInitials = (): string => {
    if (initials) return initials.toUpperCase().slice(0, 2);
    if (!name) return '?';
    
    const words = name.trim().split(' ');
    if (words.length === 1) {
      return words[0].charAt(0).toUpperCase();
    }
    
    return (words[0].charAt(0) + words[words.length - 1].charAt(0)).toUpperCase();
  };

  // Get background color for initials
  const getBackgroundColor = (): string => {
    if (backgroundColor) return backgroundColor;
    
    // Generate consistent color based on name/initials
    if (name || initials) {
      const text = name || initials || '';
      const hash = text.split('').reduce((acc, char) => {
        return char.charCodeAt(0) + ((acc << 5) - acc);
      }, 0);
      
      const colors = [
        '#005e7a', // Primary
        '#f0c75e', // Secondary
        '#4caf50', // Success
        '#ff9800', // Warning
        '#9c27b0', // Purple
        '#2196f3', // Blue
        '#ff5722', // Deep Orange
        '#795548', // Brown
      ];
      
      return colors[Math.abs(hash) % colors.length];
    }
    
    return colors.surface.secondary;
  };

  // Get text color for initials
  const getTextColor = (): string => {
    if (textColor) return textColor;
    return colors.text.inverse;
  };

  // Get font size for initials
  const getFontSize = (): number => {
    const avatarSize = getAvatarSize();
    return Math.floor(avatarSize * 0.4);
  };

  // Get status indicator color
  const getStatusColor = (): string => {
    if (statusColor) return statusColor;
    
    const statusColors = {
      online: colors.success.main,
      offline: colors.text.disabled,
      away: colors.warning.main,
      busy: colors.error.main,
    };
    
    return statusColors[status];
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const avatarSize = getAvatarSize();
    
    return {
      width: avatarSize,
      height: avatarSize,
      borderRadius: getBorderRadius(),
      backgroundColor: getBackgroundColor(),
      alignItems: 'center',
      justifyContent: 'center',
      overflow: 'hidden',
      ...(borderWidth > 0 && {
        borderWidth,
        borderColor: borderColor || colors.border.primary,
      }),
      ...(onPress && {
        opacity: disabled ? 0.6 : 1,
      }),
    };
  };

  // Get image styles
  const getImageStyles = (): ImageStyle => {
    const avatarSize = getAvatarSize();
    
    return {
      width: avatarSize,
      height: avatarSize,
      borderRadius: getBorderRadius(),
    };
  };

  // Get text styles for initials
  const getTextStyles = (): TextStyle => {
    return {
      fontSize: getFontSize(),
      fontWeight: theme.typography.fontWeight.semibold as TextStyle['fontWeight'],
      color: getTextColor(),
      textAlign: 'center',
    };
  };

  // Get status indicator styles
  const getStatusStyles = (): ViewStyle => {
    const avatarSize = getAvatarSize();
    const statusSize = Math.max(8, avatarSize * 0.2);
    
    return {
      position: 'absolute',
      bottom: 0,
      right: 0,
      width: statusSize,
      height: statusSize,
      borderRadius: statusSize / 2,
      backgroundColor: getStatusColor(),
      borderWidth: 2,
      borderColor: colors.surface.primary,
    };
  };

  // Render avatar content
  const renderAvatarContent = () => {
    // Try to render image first
    if (source && !imageError) {
      return (
        <Image
          source={source}
          style={[getImageStyles(), imageStyle]}
          onError={() => setImageError(true)}
          accessibilityRole="image"
          testID="avatar-image"
        />
      );
    }

    // Fallback to initials
    const displayInitials = generateInitials();
    
    return (
      <Text style={[getTextStyles(), textStyle]}>
        {displayInitials}
      </Text>
    );
  };

  // Render status indicator
  const renderStatusIndicator = () => {
    if (!showStatus) return null;
    
    return <View style={getStatusStyles()} testID="status-indicator" />;
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    if (name) return `Avatar for ${name}`;
    return 'User avatar';
  };

  // Render avatar
  const avatarContent = (
    <View style={[getContainerStyles(), containerStyle]}>
      {renderAvatarContent()}
      {renderStatusIndicator()}
    </View>
  );

  // If interactive, wrap in TouchableOpacity
  if (onPress) {
    return (
      <TouchableOpacity
        onPress={disabled ? undefined : onPress}
        disabled={disabled}
        accessibilityRole="button"
        accessibilityLabel={getAccessibilityLabel()}
        accessibilityHint={accessibilityHint}
        accessibilityState={{ disabled }}
        testID={testID}
      >
        {avatarContent}
      </TouchableOpacity>
    );
  }

  // Simple avatar without interaction
  return (
    <View
      accessibilityRole="image"
      accessibilityLabel={getAccessibilityLabel()}
      testID={testID}
    >
      {avatarContent}
    </View>
  );
};

// Export default
export default Avatar;
</file>

<file path="src/components/atoms/Avatar/index.ts">
/**
 * Avatar Component Exports
 */

export { Avatar, type AvatarProps } from './Avatar';
export { default } from './Avatar';
</file>

<file path="src/components/atoms/Button/index.ts">
/**
 * Button Component Exports
 */

export { Button, type ButtonProps } from './Button';
export { default } from './Button';
</file>

<file path="src/components/atoms/Icon/Icon.test.tsx">
/**
 * Icon Component Tests
 * Comprehensive test suite for all icon variants, sizes, and interactions
 */

import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { Icon } from './Icon';

// Test wrapper with ThemeProvider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

describe('Icon Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders basic icon', () => {
      render(
        <TestWrapper>
          <Icon name="home" testID="basic-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('basic-icon')).toBeTruthy();
    });

    it('renders with accessibility label', () => {
      render(
        <TestWrapper>
          <Icon name="home" accessibilityLabel="Home icon" testID="labeled-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Home icon')).toBeTruthy();
    });

    it('has correct accessibility role for image', () => {
      render(
        <TestWrapper>
          <Icon name="home" testID="image-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('image-icon');
      expect(icon.props.accessibilityRole).toBe('image');
    });
  });

  // Size tests
  describe('Sizes', () => {
    const sizes = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'] as const;

    sizes.forEach(size => {
      it(`renders ${size} size correctly`, () => {
        render(
          <TestWrapper>
            <Icon name="home" size={size} testID={`icon-${size}`} />
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`icon-${size}`)).toBeTruthy();
      });
    });

    it('renders with custom numeric size', () => {
      render(
        <TestWrapper>
          <Icon name="home" size={48} testID="custom-size-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-size-icon')).toBeTruthy();
    });
  });

  // Color tests
  describe('Colors', () => {
    const colors = [
      'primary', 'secondary', 'tertiary', 'disabled', 'inverse',
      'success', 'warning', 'error'
    ] as const;

    colors.forEach(color => {
      it(`renders with ${color} color`, () => {
        render(
          <TestWrapper>
            <Icon name="home" color={color} testID={`icon-${color}`} />
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`icon-${color}`)).toBeTruthy();
      });
    });

    it('renders with custom hex color', () => {
      render(
        <TestWrapper>
          <Icon name="home" color="#ff0000" testID="custom-color-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-color-icon')).toBeTruthy();
    });

    it('renders with custom RGB color', () => {
      render(
        <TestWrapper>
          <Icon name="home" color="rgb(255, 0, 0)" testID="rgb-color-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('rgb-color-icon')).toBeTruthy();
    });
  });

  // Interactive tests
  describe('Interactive Icons', () => {
    it('renders as button when onPress is provided', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Icon name="home" onPress={onPress} testID="interactive-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('interactive-icon');
      expect(icon.props.accessibilityRole).toBe('button');
    });

    it('calls onPress when pressed', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Icon name="home" onPress={onPress} testID="pressable-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('pressable-icon');
      fireEvent.press(icon);
      
      expect(onPress).toHaveBeenCalledTimes(1);
    });

    it('does not call onPress when disabled', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Icon name="home" onPress={onPress} disabled testID="disabled-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('disabled-icon');
      fireEvent.press(icon);
      
      expect(onPress).not.toHaveBeenCalled();
    });

    it('has correct accessibility state when disabled', () => {
      render(
        <TestWrapper>
          <Icon name="home" onPress={() => {}} disabled testID="disabled-state-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('disabled-state-icon');
      expect(icon.props.accessibilityState.disabled).toBe(true);
    });
  });

  // Background tests
  describe('Background', () => {
    it('renders with background', () => {
      render(
        <TestWrapper>
          <Icon name="home" background testID="background-icon" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('background-icon')).toBeTruthy();
    });

    it('renders with custom background color', () => {
      render(
        <TestWrapper>
          <Icon 
            name="home" 
            background 
            backgroundColor="#ff0000" 
            testID="custom-bg-icon" 
          />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-bg-icon')).toBeTruthy();
    });

    it('renders interactive icon with background', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Icon 
            name="home" 
            background 
            onPress={onPress} 
            testID="interactive-bg-icon" 
          />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('interactive-bg-icon');
      fireEvent.press(icon);
      
      expect(onPress).toHaveBeenCalledTimes(1);
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('uses custom accessibility role', () => {
      render(
        <TestWrapper>
          <Icon name="home" accessibilityRole="button" testID="custom-role-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('custom-role-icon');
      expect(icon.props.accessibilityRole).toBe('button');
    });

    it('uses custom accessibility hint', () => {
      render(
        <TestWrapper>
          <Icon 
            name="home" 
            accessibilityHint="Navigate to home screen" 
            testID="hint-icon" 
          />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('hint-icon');
      expect(icon.props.accessibilityHint).toBe('Navigate to home screen');
    });

    it('has none accessibility role when specified', () => {
      render(
        <TestWrapper>
          <Icon name="home" accessibilityRole="none" testID="none-role-icon" />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('none-role-icon');
      expect(icon.props.accessibilityRole).toBe('none');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom container style', () => {
      const customStyle = { margin: 10 };
      
      render(
        <TestWrapper>
          <Icon 
            name="home" 
            containerStyle={customStyle} 
            testID="custom-style-icon" 
          />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-style-icon')).toBeTruthy();
    });

    it('applies custom container style with background', () => {
      const customStyle = { margin: 10 };
      
      render(
        <TestWrapper>
          <Icon 
            name="home" 
            background
            containerStyle={customStyle} 
            testID="custom-bg-style-icon" 
          />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-bg-style-icon')).toBeTruthy();
    });
  });

  // Complex combinations
  describe('Complex Combinations', () => {
    it('renders with all features combined', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Icon
            name="settings"
            size="lg"
            color="primary"
            background
            backgroundColor="#f0f0f0"
            onPress={onPress}
            accessibilityLabel="Settings button"
            accessibilityHint="Open settings menu"
            testID="complex-icon"
          />
        </TestWrapper>
      );
      
      const icon = screen.getByTestId('complex-icon');
      expect(icon).toBeTruthy();
      expect(icon.props.accessibilityRole).toBe('button');
      expect(icon.props.accessibilityLabel).toBe('Settings button');
      expect(icon.props.accessibilityHint).toBe('Open settings menu');
      
      fireEvent.press(icon);
      expect(onPress).toHaveBeenCalledTimes(1);
    });
  });
});
</file>

<file path="src/components/atoms/Icon/Icon.tsx">
/**
 * Icon Component
 * Consistent icon wrapper with sizing, colors, and accessibility
 */

import React from 'react';
import { View, TouchableOpacity, ViewStyle, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';

// Icon Props Interface
export interface IconProps {
  // Icon configuration
  name: keyof typeof Ionicons.glyphMap;
  
  // Size options
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | number;
  
  // Color options
  color?: 'primary' | 'secondary' | 'tertiary' | 'disabled' | 'inverse' | 'success' | 'warning' | 'error' | string;
  
  // Interactive
  onPress?: () => void;
  disabled?: boolean;
  
  // Container styling
  containerStyle?: ViewStyle;
  
  // Background circle
  background?: boolean;
  backgroundColor?: string;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  accessibilityRole?: 'button' | 'image' | 'none';
  
  // Test ID
  testID?: string;
}

// Icon Component
export const Icon: React.FC<IconProps> = ({
  name,
  size = 'md',
  color = 'primary',
  onPress,
  disabled = false,
  containerStyle,
  background = false,
  backgroundColor,
  accessibilityLabel,
  accessibilityHint,
  accessibilityRole,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get icon size in pixels
  const getIconSize = (): number => {
    if (typeof size === 'number') {
      return size;
    }

    const sizeMap = {
      xs: 12,
      sm: 16,
      md: 20,
      lg: 24,
      xl: 32,
      '2xl': 40,
    };

    return sizeMap[size];
  };

  // Get icon color
  const getIconColor = (): string => {
    // If color is a custom hex/rgb value, use it directly
    if (color.startsWith('#') || color.startsWith('rgb') || color.startsWith('hsl')) {
      return disabled ? colors.text.disabled : color;
    }

    // Map semantic color names to theme colors
    const colorMap = {
      primary: colors.text.primary,
      secondary: colors.text.secondary,
      tertiary: colors.text.tertiary,
      disabled: colors.text.disabled,
      inverse: colors.text.inverse,
      success: colors.success.main,
      warning: colors.warning.main,
      error: colors.error.main,
    };

    const mappedColor = colorMap[color as keyof typeof colorMap] || colors.text.primary;
    return disabled ? colors.text.disabled : mappedColor;
  };

  // Get container styles for background
  const getContainerStyles = (): ViewStyle => {
    if (!background && !onPress) return {};

    const iconSize = getIconSize();
    const containerSize = iconSize + (theme.spacing.base.sm * 2); // Add padding

    const baseStyle: ViewStyle = {
      width: containerSize,
      height: containerSize,
      borderRadius: containerSize / 2,
      alignItems: 'center',
      justifyContent: 'center',
      minWidth: 44, // Minimum touch target
      minHeight: 44,
    };

    if (background) {
      baseStyle.backgroundColor = backgroundColor || colors.surface.secondary;
    }

    if (onPress) {
      baseStyle.opacity = disabled ? 0.6 : 1;
    }

    return baseStyle;
  };

  // Get accessibility role
  const getAccessibilityRole = () => {
    if (accessibilityRole) return accessibilityRole;
    if (onPress) return 'button';
    return 'image';
  };

  // Render icon
  const renderIcon = () => (
    <Ionicons
      name={name}
      size={getIconSize()}
      color={getIconColor()}
    />
  );

  // If interactive, wrap in TouchableOpacity
  if (onPress) {
    return (
      <TouchableOpacity
        style={[getContainerStyles(), containerStyle]}
        onPress={disabled ? undefined : onPress}
        disabled={disabled}
        accessibilityRole={getAccessibilityRole()}
        accessibilityLabel={accessibilityLabel}
        accessibilityHint={accessibilityHint}
        accessibilityState={{ disabled }}
        testID={testID}
      >
        {renderIcon()}
      </TouchableOpacity>
    );
  }

  // If has background, wrap in View
  if (background) {
    return (
      <View
        style={[getContainerStyles(), containerStyle]}
        accessibilityRole={getAccessibilityRole()}
        accessibilityLabel={accessibilityLabel}
        accessibilityHint={accessibilityHint}
        testID={testID}
      >
        {renderIcon()}
      </View>
    );
  }

  // Simple icon without container
  return (
    <View
      style={containerStyle}
      accessibilityRole={getAccessibilityRole()}
      accessibilityLabel={accessibilityLabel}
      accessibilityHint={accessibilityHint}
      testID={testID}
    >
      {renderIcon()}
    </View>
  );
};

// Export default
export default Icon;
</file>

<file path="src/components/atoms/Icon/index.ts">
/**
 * Icon Component Exports
 */

export { Icon, type IconProps } from './Icon';
export { default } from './Icon';
</file>

<file path="src/components/atoms/Input/index.ts">
/**
 * Input Component Exports
 */

export { Input, type InputProps } from './Input';
export { default } from './Input';
</file>

<file path="src/components/atoms/Input/Input.stories.tsx">
/**
 * Input Component Stories
 * Documentation and examples for the Input component
 */

import React, { useState } from 'react';
import { View, StyleSheet, ScrollView } from 'react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { Input } from './Input';
import { Typography } from '../Typography';

// Story wrapper
const StoryWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    <ScrollView style={styles.container}>
      {children}
    </ScrollView>
  </ThemeProvider>
);

// Section wrapper for organizing stories
const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
  <View style={styles.section}>
    <Typography variant="h3" style={styles.sectionTitle}>{title}</Typography>
    {children}
  </View>
);

// Default Input
export const Default = () => (
  <StoryWrapper>
    <Input placeholder="Enter text..." />
  </StoryWrapper>
);

// All Variants
export const Variants = () => (
  <StoryWrapper>
    <Section title="Input Variants">
      <Input 
        variant="outlined" 
        placeholder="Outlined input (default)"
        label="Outlined Input"
      />
      <Input 
        variant="filled" 
        placeholder="Filled input"
        label="Filled Input"
      />
    </Section>
  </StoryWrapper>
);

// All Sizes
export const Sizes = () => (
  <StoryWrapper>
    <Section title="Input Sizes">
      <Input 
        size="small" 
        placeholder="Small input"
        label="Small Input"
      />
      <Input 
        size="medium" 
        placeholder="Medium input (default)"
        label="Medium Input"
      />
      <Input 
        size="large" 
        placeholder="Large input"
        label="Large Input"
      />
    </Section>
  </StoryWrapper>
);

// States
export const States = () => (
  <StoryWrapper>
    <Section title="Input States">
      <Input 
        placeholder="Normal state"
        label="Normal Input"
      />
      <Input 
        disabled
        placeholder="Disabled state"
        label="Disabled Input"
        value="Cannot edit this"
      />
      <Input 
        error
        errorText="This field is required"
        placeholder="Error state"
        label="Error Input"
      />
      <Input 
        required
        placeholder="Required field"
        label="Required Input"
      />
    </Section>
  </StoryWrapper>
);

// With Labels and Helper Text
export const LabelsAndHelperText = () => (
  <StoryWrapper>
    <Section title="Labels and Helper Text">
      <Input 
        label="Email Address"
        placeholder="Enter your email"
        helperText="We'll never share your email with anyone else"
      />
      <Input 
        label="Password"
        placeholder="Enter your password"
        secureTextEntry
        helperText="Must be at least 8 characters long"
      />
      <Input 
        label="Required Field"
        placeholder="This field is required"
        required
        error
        errorText="This field cannot be empty"
      />
    </Section>
  </StoryWrapper>
);

// With Icons
export const WithIcons = () => (
  <StoryWrapper>
    <Section title="Input with Icons">
      <Input 
        leftIcon="mail"
        placeholder="Email with left icon"
        label="Email Address"
      />
      <Input 
        rightIcon="eye"
        placeholder="Password with right icon"
        label="Password"
        secureTextEntry
      />
      <Input 
        leftIcon="person"
        rightIcon="checkmark-circle"
        placeholder="Username with both icons"
        label="Username"
      />
      <Input 
        leftIcon="search"
        rightIcon="close"
        placeholder="Search with clear button"
        label="Search"
      />
    </Section>
  </StoryWrapper>
);

// Interactive Examples
export const InteractiveExamples = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [search, setSearch] = useState('');

  return (
    <StoryWrapper>
      <Section title="Interactive Examples">
        <Input 
          label="Email Address"
          placeholder="Enter your email"
          value={email}
          onChangeText={setEmail}
          leftIcon="mail"
          keyboardType="email-address"
          autoCapitalize="none"
        />
        
        <Input 
          label="Password"
          placeholder="Enter your password"
          value={password}
          onChangeText={setPassword}
          leftIcon="lock-closed"
          rightIcon={showPassword ? "eye-off" : "eye"}
          onRightIconPress={() => setShowPassword(!showPassword)}
          secureTextEntry={!showPassword}
        />
        
        <Input 
          label="Search"
          placeholder="Search for something..."
          value={search}
          onChangeText={setSearch}
          leftIcon="search"
          rightIcon={search ? "close" : undefined}
          onRightIconPress={() => setSearch('')}
        />
      </Section>
    </StoryWrapper>
  );
};

// Character Count
export const CharacterCount = () => {
  const [text, setText] = useState('');
  const [longText, setLongText] = useState('This text is already quite long and exceeds the limit');

  return (
    <StoryWrapper>
      <Section title="Character Count">
        <Input 
          label="Short Message"
          placeholder="Enter a short message"
          value={text}
          onChangeText={setText}
          showCharacterCount
          maxLength={50}
          helperText="Keep it brief"
        />
        
        <Input 
          label="Over Limit Example"
          placeholder="This will show error styling"
          value={longText}
          onChangeText={setLongText}
          showCharacterCount
          maxLength={30}
          helperText="This text exceeds the character limit"
        />
      </Section>
    </StoryWrapper>
  );
};

// Form Examples
export const FormExamples = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    message: '',
  });

  const updateField = (field: string) => (value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <StoryWrapper>
      <Section title="Form Example">
        <Input 
          label="First Name"
          placeholder="Enter your first name"
          value={formData.firstName}
          onChangeText={updateField('firstName')}
          required
        />
        
        <Input 
          label="Last Name"
          placeholder="Enter your last name"
          value={formData.lastName}
          onChangeText={updateField('lastName')}
          required
        />
        
        <Input 
          label="Email Address"
          placeholder="Enter your email"
          value={formData.email}
          onChangeText={updateField('email')}
          leftIcon="mail"
          keyboardType="email-address"
          autoCapitalize="none"
          required
        />
        
        <Input 
          label="Phone Number"
          placeholder="Enter your phone number"
          value={formData.phone}
          onChangeText={updateField('phone')}
          leftIcon="call"
          keyboardType="phone-pad"
        />
        
        <Input 
          label="Message"
          placeholder="Enter your message"
          value={formData.message}
          onChangeText={updateField('message')}
          multiline
          numberOfLines={4}
          showCharacterCount
          maxLength={500}
          helperText="Tell us how we can help you"
        />
      </Section>
    </StoryWrapper>
  );
};

// Validation Examples
export const ValidationExamples = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const isValidEmail = (email: string) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const isValidPassword = (password: string) => {
    return password.length >= 8;
  };

  const passwordsMatch = password === confirmPassword;

  return (
    <StoryWrapper>
      <Section title="Validation Examples">
        <Input 
          label="Email Address"
          placeholder="Enter your email"
          value={email}
          onChangeText={setEmail}
          leftIcon="mail"
          error={email.length > 0 && !isValidEmail(email)}
          errorText={email.length > 0 && !isValidEmail(email) ? "Please enter a valid email address" : undefined}
          helperText="We'll use this to send you updates"
          keyboardType="email-address"
          autoCapitalize="none"
        />
        
        <Input 
          label="Password"
          placeholder="Enter your password"
          value={password}
          onChangeText={setPassword}
          leftIcon="lock-closed"
          secureTextEntry
          error={password.length > 0 && !isValidPassword(password)}
          errorText={password.length > 0 && !isValidPassword(password) ? "Password must be at least 8 characters" : undefined}
          helperText="Must be at least 8 characters long"
        />
        
        <Input 
          label="Confirm Password"
          placeholder="Confirm your password"
          value={confirmPassword}
          onChangeText={setConfirmPassword}
          leftIcon="lock-closed"
          secureTextEntry
          error={confirmPassword.length > 0 && !passwordsMatch}
          errorText={confirmPassword.length > 0 && !passwordsMatch ? "Passwords do not match" : undefined}
          helperText="Re-enter your password to confirm"
        />
      </Section>
    </StoryWrapper>
  );
};

// All Combinations
export const AllCombinations = () => (
  <StoryWrapper>
    <Section title="Size and Variant Combinations">
      {(['outlined', 'filled'] as const).map(variant => (
        <View key={variant} style={styles.variantGroup}>
          <Typography variant="h4" style={styles.variantTitle}>
            {variant.charAt(0).toUpperCase() + variant.slice(1)} Variant
          </Typography>
          {(['small', 'medium', 'large'] as const).map(size => (
            <Input
              key={`${variant}-${size}`}
              variant={variant}
              size={size}
              placeholder={`${variant} ${size} input`}
              label={`${variant.charAt(0).toUpperCase() + variant.slice(1)} ${size.charAt(0).toUpperCase() + size.slice(1)}`}
              leftIcon="person"
            />
          ))}
        </View>
      ))}
    </Section>
  </StoryWrapper>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f5f5f5',
  },
  section: {
    marginBottom: 32,
  },
  sectionTitle: {
    marginBottom: 16,
    color: '#005e7a',
  },
  variantGroup: {
    marginBottom: 24,
  },
  variantTitle: {
    marginBottom: 12,
    color: '#333333',
  },
});

// Export all stories
export default {
  Default,
  Variants,
  Sizes,
  States,
  LabelsAndHelperText,
  WithIcons,
  InteractiveExamples,
  CharacterCount,
  FormExamples,
  ValidationExamples,
  AllCombinations,
};
</file>

<file path="src/components/atoms/Input/Input.tsx">
/**
 * Input Component
 * Consistent form input implementation with validation, states, and accessibility
 */

import React, { useState, useRef, forwardRef } from 'react';
import {
  TextInput,
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  TextInputProps,
  ViewStyle,
  TextStyle,
  NativeSyntheticEvent,
  TextInputFocusEventData,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors, useComponentTheme } from '../../../context/ThemeContext';

// Input Props Interface
export interface InputProps extends Omit<TextInputProps, 'style'> {
  // Label and helper text
  label?: string;
  helperText?: string;
  errorText?: string;
  
  // Input states
  error?: boolean;
  disabled?: boolean;
  required?: boolean;
  
  // Icons
  leftIcon?: keyof typeof Ionicons.glyphMap;
  rightIcon?: keyof typeof Ionicons.glyphMap;
  onRightIconPress?: () => void;
  
  // Input variants
  variant?: 'outlined' | 'filled';
  size?: 'small' | 'medium' | 'large';
  
  // Custom styling
  containerStyle?: ViewStyle;
  inputStyle?: TextStyle;
  labelStyle?: TextStyle;
  helperTextStyle?: TextStyle;
  errorTextStyle?: TextStyle;
  
  // Validation
  showCharacterCount?: boolean;
  maxLength?: number;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
}

// Input Component with forwardRef for TextInput ref access
export const Input = forwardRef<TextInput, InputProps>(({
  label,
  helperText,
  errorText,
  error = false,
  disabled = false,
  required = false,
  leftIcon,
  rightIcon,
  onRightIconPress,
  variant = 'outlined',
  size = 'medium',
  containerStyle,
  inputStyle,
  labelStyle,
  helperTextStyle,
  errorTextStyle,
  showCharacterCount = false,
  maxLength,
  accessibilityLabel,
  accessibilityHint,
  onFocus,
  onBlur,
  value,
  ...props
}, ref) => {
  const { theme } = useTheme();
  const colors = useColors();
  const [isFocused, setIsFocused] = useState(false);

  // Handle focus events
  const handleFocus = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {
    setIsFocused(true);
    onFocus?.(e);
  };

  const handleBlur = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {
    setIsFocused(false);
    onBlur?.(e);
  };

  // Handle value changes for character count
  const handleChangeText = (text: string) => {
    props.onChangeText?.(text);
  };

  // Get current value for character count
  const currentValue = value || '';

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      marginBottom: theme.spacing.base.sm,
    };

    return {
      ...baseStyle,
      opacity: disabled ? 0.6 : 1,
    };
  };

  // Get input container styles
  const getInputContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      flexDirection: 'row',
      alignItems: 'center',
      borderRadius: theme.borderRadius.md,
      borderWidth: 1,
    };

    // Size-specific styles
    const sizeStyles = {
      small: {
        minHeight: 36,
        paddingHorizontal: theme.spacing.base.sm,
        paddingVertical: theme.spacing.base.xs,
      },
      medium: {
        minHeight: 40,
        paddingHorizontal: theme.spacing.base.md,
        paddingVertical: theme.spacing.base.sm,
      },
      large: {
        minHeight: 48,
        paddingHorizontal: theme.spacing.base.lg,
        paddingVertical: theme.spacing.base.md,
      },
    };

    // Variant-specific styles
    const variantStyles = {
      outlined: {
        backgroundColor: disabled ? colors.interactive.disabled : colors.surface.primary,
        borderColor: error 
          ? colors.border.error 
          : isFocused 
            ? colors.border.focus 
            : colors.border.primary,
      },
      filled: {
        backgroundColor: disabled 
          ? colors.interactive.disabled 
          : isFocused 
            ? colors.surface.primary 
            : colors.surface.secondary,
        borderColor: error 
          ? colors.border.error 
          : 'transparent',
      },
    };

    return {
      ...baseStyle,
      ...sizeStyles[size],
      ...variantStyles[variant],
    };
  };

  // Get input text styles
  const getInputTextStyles = (): TextStyle => {
    const baseStyle: TextStyle = {
      flex: 1,
      fontSize: theme.typography.fontSize.base,
      fontWeight: theme.typography.fontWeight.normal as TextStyle['fontWeight'],
      color: disabled ? colors.text.disabled : colors.text.primary,
      lineHeight: theme.typography.fontSize.base * theme.typography.lineHeight.normal,
    };

    // Size-specific text styles
    const sizeTextStyles = {
      small: {
        fontSize: theme.typography.fontSize.sm,
        lineHeight: theme.typography.fontSize.sm * theme.typography.lineHeight.normal,
      },
      medium: {
        fontSize: theme.typography.fontSize.base,
        lineHeight: theme.typography.fontSize.base * theme.typography.lineHeight.normal,
      },
      large: {
        fontSize: theme.typography.fontSize.lg,
        lineHeight: theme.typography.fontSize.lg * theme.typography.lineHeight.normal,
      },
    };

    return {
      ...baseStyle,
      ...sizeTextStyles[size],
    };
  };

  // Get label styles
  const getLabelStyles = (): TextStyle => {
    return {
      fontSize: theme.typography.fontSize.sm,
      fontWeight: theme.typography.fontWeight.medium as TextStyle['fontWeight'],
      color: error ? colors.error.main : colors.text.primary,
      marginBottom: theme.spacing.base.xs,
    };
  };

  // Get helper text styles
  const getHelperTextStyles = (): TextStyle => {
    return {
      fontSize: theme.typography.fontSize.xs,
      color: colors.text.secondary,
      marginTop: theme.spacing.base.xs,
    };
  };

  // Get error text styles
  const getErrorTextStyles = (): TextStyle => {
    return {
      fontSize: theme.typography.fontSize.xs,
      color: colors.error.main,
      marginTop: theme.spacing.base.xs,
    };
  };

  // Get icon size based on input size
  const getIconSize = (): number => {
    const iconSizes = {
      small: 16,
      medium: 20,
      large: 24,
    };
    return iconSizes[size];
  };

  // Get icon color
  const getIconColor = (): string => {
    if (disabled) return colors.text.disabled;
    if (error) return colors.error.main;
    if (isFocused) return colors.primary.main;
    return colors.text.secondary;
  };

  // Render left icon
  const renderLeftIcon = () => {
    if (!leftIcon) return null;

    return (
      <Ionicons
        name={leftIcon}
        size={getIconSize()}
        color={getIconColor()}
        style={styles.leftIcon}
      />
    );
  };

  // Render right icon
  const renderRightIcon = () => {
    if (!rightIcon) return null;

    const IconComponent = onRightIconPress ? TouchableOpacity : View;

    return (
      <IconComponent
        onPress={onRightIconPress}
        disabled={disabled}
        style={styles.rightIconContainer}
      >
        <Ionicons
          name={rightIcon}
          size={getIconSize()}
          color={getIconColor()}
        />
      </IconComponent>
    );
  };

  // Render character count
  const renderCharacterCount = () => {
    if (!showCharacterCount || !maxLength) return null;

    const count = currentValue.length;
    const isOverLimit = count > maxLength;

    return (
      <Text style={[
        getHelperTextStyles(),
        { textAlign: 'right' },
        isOverLimit && { color: colors.error.main }
      ]}>
        {count}/{maxLength}
      </Text>
    );
  };

  // Render label
  const renderLabel = () => {
    if (!label) return null;

    return (
      <Text style={[getLabelStyles(), labelStyle]}>
        {label}
        {required && <Text style={{ color: colors.error.main }}> *</Text>}
      </Text>
    );
  };

  // Render helper text or error text
  const renderHelperText = () => {
    if (error && errorText) {
      return (
        <View style={styles.helperTextContainer}>
          <Text style={[getErrorTextStyles(), errorTextStyle]}>
            {errorText}
          </Text>
          {renderCharacterCount()}
        </View>
      );
    }

    if (helperText || showCharacterCount) {
      return (
        <View style={styles.helperTextContainer}>
          {helperText && (
            <Text style={[getHelperTextStyles(), helperTextStyle]}>
              {helperText}
            </Text>
          )}
          {renderCharacterCount()}
        </View>
      );
    }

    return null;
  };

  return (
    <View style={[getContainerStyles(), containerStyle]}>
      {renderLabel()}
      
      <View style={getInputContainerStyles()}>
        {renderLeftIcon()}
        
        <TextInput
          ref={ref}
          style={[getInputTextStyles(), inputStyle]}
          value={value}
          onChangeText={handleChangeText}
          onFocus={handleFocus}
          onBlur={handleBlur}
          editable={!disabled}
          maxLength={maxLength}
          placeholderTextColor={colors.text.tertiary}
          accessibilityLabel={accessibilityLabel || label}
          accessibilityHint={accessibilityHint}
          accessibilityState={{
            disabled,
          }}
          {...props}
        />
        
        {renderRightIcon()}
      </View>
      
      {renderHelperText()}
    </View>
  );
});

// Set display name for debugging
Input.displayName = 'Input';

// Internal styles
const styles = StyleSheet.create({
  leftIcon: {
    marginRight: 8,
  },
  rightIconContainer: {
    marginLeft: 8,
    padding: 4,
  },
  helperTextContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
});

// Export default
export default Input;
</file>

<file path="src/components/atoms/Typography/index.ts">
/**
 * Typography Component Exports
 */

export { 
  Typography, 
  Heading1,
  Heading2,
  Heading3,
  Heading4,
  Body1,
  Body2,
  Caption,
  Overline,
  type TypographyProps 
} from './Typography';
export { default } from './Typography';
</file>

<file path="src/components/atoms/Typography/Typography.stories.tsx">
/**
 * Typography Component Stories
 * Documentation and examples for the Typography component
 */

import React from 'react';
import { View, StyleSheet, ScrollView } from 'react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { 
  Typography, 
  Heading1, 
  Heading2, 
  Heading3, 
  Heading4, 
  Body1, 
  Body2, 
  Caption, 
  Overline 
} from './Typography';

// Story wrapper
const StoryWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    <ScrollView style={styles.container}>
      {children}
    </ScrollView>
  </ThemeProvider>
);

// Default Typography
export const Default = () => (
  <StoryWrapper>
    <Typography>Default typography (body1)</Typography>
  </StoryWrapper>
);

// All Variants
export const AllVariants = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography variant="h1">Heading 1 - Main page title</Typography>
      <Typography variant="h2">Heading 2 - Section title</Typography>
      <Typography variant="h3">Heading 3 - Subsection title</Typography>
      <Typography variant="h4">Heading 4 - Card title</Typography>
      <Typography variant="body1">Body 1 - Main body text for paragraphs and content</Typography>
      <Typography variant="body2">Body 2 - Secondary body text for descriptions</Typography>
      <Typography variant="caption">Caption - Small text for labels and metadata</Typography>
      <Typography variant="overline">OVERLINE - UPPERCASE LABELS</Typography>
      <Typography variant="button">Button - Button text styling</Typography>
      <Typography variant="buttonSmall">Button Small - Small button text</Typography>
      <Typography variant="buttonLarge">Button Large - Large button text</Typography>
    </View>
  </StoryWrapper>
);

// Convenience Components
export const ConvenienceComponents = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Heading1>Heading 1 Component</Heading1>
      <Heading2>Heading 2 Component</Heading2>
      <Heading3>Heading 3 Component</Heading3>
      <Heading4>Heading 4 Component</Heading4>
      <Body1>Body 1 Component - Main body text</Body1>
      <Body2>Body 2 Component - Secondary body text</Body2>
      <Caption>Caption Component - Small text</Caption>
      <Overline>OVERLINE COMPONENT</Overline>
    </View>
  </StoryWrapper>
);

// Color Variations
export const Colors = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography color="primary">Primary color text</Typography>
      <Typography color="secondary">Secondary color text</Typography>
      <Typography color="tertiary">Tertiary color text</Typography>
      <Typography color="disabled">Disabled color text</Typography>
      <Typography color="success">Success color text</Typography>
      <Typography color="warning">Warning color text</Typography>
      <Typography color="error">Error color text</Typography>
      <Typography color="#ff6b35">Custom hex color text</Typography>
      <Typography color="rgb(255, 107, 53)">Custom RGB color text</Typography>
    </View>
  </StoryWrapper>
);

// Text Alignment
export const Alignment = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography align="left">Left aligned text (default)</Typography>
      <Typography align="center">Center aligned text</Typography>
      <Typography align="right">Right aligned text</Typography>
      <Typography align="justify">Justified text that will wrap to multiple lines and be justified across the full width of the container when it becomes long enough to demonstrate the justification behavior.</Typography>
    </View>
  </StoryWrapper>
);

// Font Weights
export const FontWeights = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography weight="normal">Normal weight text</Typography>
      <Typography weight="medium">Medium weight text</Typography>
      <Typography weight="semibold">Semibold weight text</Typography>
      <Typography weight="bold">Bold weight text</Typography>
    </View>
  </StoryWrapper>
);

// Text Transforms
export const TextTransforms = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography transform="none">No transform applied</Typography>
      <Typography transform="uppercase">UPPERCASE TRANSFORM</Typography>
      <Typography transform="lowercase">lowercase transform</Typography>
      <Typography transform="capitalize">Capitalize Transform</Typography>
    </View>
  </StoryWrapper>
);

// Text Decorations
export const TextDecorations = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography decoration="none">No decoration</Typography>
      <Typography decoration="underline">Underlined text</Typography>
      <Typography decoration="line-through">Strikethrough text</Typography>
    </View>
  </StoryWrapper>
);

// Line Heights
export const LineHeights = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography lineHeight="tight">
        Tight line height - This text has tight line spacing which is good for headings and compact layouts where space is at a premium.
      </Typography>
      <Typography lineHeight="normal">
        Normal line height - This text has normal line spacing which is the default and works well for most body text and general content.
      </Typography>
      <Typography lineHeight="relaxed">
        Relaxed line height - This text has relaxed line spacing which provides more breathing room and is good for improved readability in longer content.
      </Typography>
      <Typography lineHeight={32}>
        Custom line height (32px) - This text uses a custom numeric line height value for precise control over spacing.
      </Typography>
    </View>
  </StoryWrapper>
);

// Text Truncation
export const TextTruncation = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography numberOfLines={1}>
        Single line truncation - This is a very long text that will be truncated to a single line with an ellipsis at the end when it exceeds the container width.
      </Typography>
      <Typography numberOfLines={2}>
        Two line truncation - This is a longer text that will be truncated to exactly two lines with an ellipsis at the end when it exceeds the specified number of lines in the container.
      </Typography>
      <Typography numberOfLines={1} ellipsizeMode="head">
        ...Head ellipsis - This text will be truncated at the beginning with ellipsis at the start.
      </Typography>
      <Typography numberOfLines={1} ellipsizeMode="middle">
        Middle ellip...sis - This text will be truncated in the middle with ellipsis in the center.
      </Typography>
      <Typography numberOfLines={1} ellipsizeMode="tail">
        Tail ellipsis... - This text will be truncated at the end with ellipsis at the tail.
      </Typography>
    </View>
  </StoryWrapper>
);

// Complex Examples
export const ComplexExamples = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography
        variant="h1"
        color="primary"
        align="center"
        weight="bold"
        transform="uppercase"
      >
        Main Title
      </Typography>
      
      <Typography
        variant="h3"
        color="secondary"
        align="center"
        decoration="underline"
      >
        Subtitle with Underline
      </Typography>
      
      <Typography
        variant="body1"
        color="tertiary"
        lineHeight="relaxed"
        align="justify"
      >
        This is a paragraph of body text that demonstrates multiple typography properties working together. It uses body1 variant with tertiary color, relaxed line height, and justified alignment for a professional appearance.
      </Typography>
      
      <Typography
        variant="caption"
        color="disabled"
        transform="uppercase"
        align="right"
      >
        Metadata Caption
      </Typography>
      
      <Typography
        variant="overline"
        color="error"
        decoration="line-through"
      >
        DEPRECATED FEATURE
      </Typography>
    </View>
  </StoryWrapper>
);

// Typography Scale Demonstration
export const TypographyScale = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Typography variant="h1" style={styles.scaleItem}>H1 - 32px</Typography>
      <Typography variant="h2" style={styles.scaleItem}>H2 - 24px</Typography>
      <Typography variant="h3" style={styles.scaleItem}>H3 - 20px</Typography>
      <Typography variant="h4" style={styles.scaleItem}>H4 - 18px</Typography>
      <Typography variant="body1" style={styles.scaleItem}>Body1 - 16px</Typography>
      <Typography variant="body2" style={styles.scaleItem}>Body2 - 14px</Typography>
      <Typography variant="caption" style={styles.scaleItem}>Caption - 12px</Typography>
    </View>
  </StoryWrapper>
);

// Real-world Usage Examples
export const RealWorldExamples = () => (
  <StoryWrapper>
    <View style={styles.section}>
      {/* Article Header */}
      <View style={styles.articleHeader}>
        <Heading1 color="primary">Article Title</Heading1>
        <Caption color="secondary">Published on March 15, 2024</Caption>
        <Body2 color="tertiary">By John Doe</Body2>
      </View>
      
      {/* Article Content */}
      <View style={styles.articleContent}>
        <Heading3>Introduction</Heading3>
        <Body1 lineHeight="relaxed">
          This is the introduction paragraph that provides context and overview of the article content. It uses proper typography hierarchy and spacing.
        </Body1>
        
        <Heading3>Main Content</Heading3>
        <Body1 lineHeight="relaxed">
          This is the main content section with detailed information. The typography is optimized for readability with appropriate line height and font size.
        </Body1>
        
        <Caption color="disabled" align="center">
          Figure 1: Example diagram
        </Caption>
      </View>
      
      {/* UI Elements */}
      <View style={styles.uiElements}>
        <Overline color="primary">SETTINGS</Overline>
        <Body1>Enable notifications</Body1>
        <Caption color="secondary">Receive updates about your account</Caption>
      </View>
    </View>
  </StoryWrapper>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f5f5f5',
  },
  section: {
    gap: 16,
    marginBottom: 32,
  },
  scaleItem: {
    marginBottom: 8,
  },
  articleHeader: {
    marginBottom: 24,
    gap: 4,
  },
  articleContent: {
    gap: 12,
    marginBottom: 24,
  },
  uiElements: {
    gap: 4,
    padding: 16,
    backgroundColor: '#ffffff',
    borderRadius: 8,
  },
});

// Export all stories
export default {
  Default,
  AllVariants,
  ConvenienceComponents,
  Colors,
  Alignment,
  FontWeights,
  TextTransforms,
  TextDecorations,
  LineHeights,
  TextTruncation,
  ComplexExamples,
  TypographyScale,
  RealWorldExamples,
};
</file>

<file path="src/components/atoms/Typography/Typography.test.tsx">
/**
 * Typography Component Tests
 * Comprehensive test suite for all typography variants, colors, and styling options
 */

import React from 'react';
import { render, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { 
  Typography, 
  Heading1, 
  Heading2, 
  Heading3, 
  Heading4, 
  Body1, 
  Body2, 
  Caption, 
  Overline 
} from './Typography';

// Test wrapper with ThemeProvider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

describe('Typography Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with text content', () => {
      render(
        <TestWrapper>
          <Typography>Test Text</Typography>
        </TestWrapper>
      );
      
      expect(screen.getByText('Test Text')).toBeTruthy();
    });

    it('renders with default variant (body1)', () => {
      render(
        <TestWrapper>
          <Typography testID="default-typography">Default Text</Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('default-typography')).toBeTruthy();
      expect(screen.getByText('Default Text')).toBeTruthy();
    });

    it('renders with accessibility label', () => {
      render(
        <TestWrapper>
          <Typography accessibilityLabel="Custom Label">Test Text</Typography>
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Custom Label')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    const variants = [
      'h1', 'h2', 'h3', 'h4', 
      'body1', 'body2', 
      'caption', 'overline',
      'button', 'buttonSmall', 'buttonLarge'
    ] as const;

    variants.forEach(variant => {
      it(`renders ${variant} variant correctly`, () => {
        render(
          <TestWrapper>
            <Typography variant={variant} testID={`typography-${variant}`}>
              {variant} Text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`typography-${variant}`)).toBeTruthy();
        expect(screen.getByText(`${variant} Text`)).toBeTruthy();
      });
    });
  });

  // Color tests
  describe('Colors', () => {
    const colors = [
      'primary', 'secondary', 'tertiary', 'disabled', 'inverse',
      'success', 'warning', 'error'
    ] as const;

    colors.forEach(color => {
      it(`renders with ${color} color`, () => {
        render(
          <TestWrapper>
            <Typography color={color} testID={`typography-${color}`}>
              {color} Text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`typography-${color}`)).toBeTruthy();
        expect(screen.getByText(`${color} Text`)).toBeTruthy();
      });
    });

    it('renders with custom hex color', () => {
      render(
        <TestWrapper>
          <Typography color="#ff0000" testID="custom-color">
            Custom Color Text
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-color')).toBeTruthy();
      expect(screen.getByText('Custom Color Text')).toBeTruthy();
    });
  });

  // Alignment tests
  describe('Text Alignment', () => {
    const alignments = ['left', 'center', 'right', 'justify'] as const;

    alignments.forEach(align => {
      it(`renders with ${align} alignment`, () => {
        render(
          <TestWrapper>
            <Typography align={align} testID={`align-${align}`}>
              {align} aligned text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`align-${align}`)).toBeTruthy();
        expect(screen.getByText(`${align} aligned text`)).toBeTruthy();
      });
    });
  });

  // Weight tests
  describe('Font Weight', () => {
    const weights = ['normal', 'medium', 'semibold', 'bold'] as const;

    weights.forEach(weight => {
      it(`renders with ${weight} weight`, () => {
        render(
          <TestWrapper>
            <Typography weight={weight} testID={`weight-${weight}`}>
              {weight} weight text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`weight-${weight}`)).toBeTruthy();
        expect(screen.getByText(`${weight} weight text`)).toBeTruthy();
      });
    });
  });

  // Transform tests
  describe('Text Transform', () => {
    const transforms = ['none', 'uppercase', 'lowercase', 'capitalize'] as const;

    transforms.forEach(transform => {
      it(`renders with ${transform} transform`, () => {
        render(
          <TestWrapper>
            <Typography transform={transform} testID={`transform-${transform}`}>
              transform text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`transform-${transform}`)).toBeTruthy();
        expect(screen.getByText('transform text')).toBeTruthy();
      });
    });
  });

  // Decoration tests
  describe('Text Decoration', () => {
    const decorations = ['none', 'underline', 'line-through'] as const;

    decorations.forEach(decoration => {
      it(`renders with ${decoration} decoration`, () => {
        render(
          <TestWrapper>
            <Typography decoration={decoration} testID={`decoration-${decoration}`}>
              decorated text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`decoration-${decoration}`)).toBeTruthy();
        expect(screen.getByText('decorated text')).toBeTruthy();
      });
    });
  });

  // Line height tests
  describe('Line Height', () => {
    const lineHeights = ['tight', 'normal', 'relaxed'] as const;

    lineHeights.forEach(lineHeight => {
      it(`renders with ${lineHeight} line height`, () => {
        render(
          <TestWrapper>
            <Typography lineHeight={lineHeight} testID={`lineheight-${lineHeight}`}>
              line height text
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`lineheight-${lineHeight}`)).toBeTruthy();
        expect(screen.getByText('line height text')).toBeTruthy();
      });
    });

    it('renders with custom numeric line height', () => {
      render(
        <TestWrapper>
          <Typography lineHeight={24} testID="custom-lineheight">
            Custom line height
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-lineheight')).toBeTruthy();
      expect(screen.getByText('Custom line height')).toBeTruthy();
    });
  });

  // Truncation tests
  describe('Text Truncation', () => {
    it('renders with numberOfLines', () => {
      render(
        <TestWrapper>
          <Typography numberOfLines={2} testID="truncated-text">
            This is a very long text that should be truncated after two lines
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('truncated-text')).toBeTruthy();
    });

    const ellipsizeModes = ['head', 'middle', 'tail', 'clip'] as const;

    ellipsizeModes.forEach(mode => {
      it(`renders with ${mode} ellipsize mode`, () => {
        render(
          <TestWrapper>
            <Typography 
              numberOfLines={1} 
              ellipsizeMode={mode} 
              testID={`ellipsize-${mode}`}
            >
              Long text to be ellipsized
            </Typography>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`ellipsize-${mode}`)).toBeTruthy();
      });
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility role for headings', () => {
      render(
        <TestWrapper>
          <Typography variant="h1" testID="heading-text">
            Heading Text
          </Typography>
        </TestWrapper>
      );
      
      const element = screen.getByTestId('heading-text');
      expect(element.props.accessibilityRole).toBe('header');
    });

    it('has correct accessibility role for button variants', () => {
      render(
        <TestWrapper>
          <Typography variant="button" testID="button-text">
            Button Text
          </Typography>
        </TestWrapper>
      );
      
      const element = screen.getByTestId('button-text');
      expect(element.props.accessibilityRole).toBe('button');
    });

    it('has correct accessibility role for body text', () => {
      render(
        <TestWrapper>
          <Typography variant="body1" testID="body-text">
            Body Text
          </Typography>
        </TestWrapper>
      );
      
      const element = screen.getByTestId('body-text');
      expect(element.props.accessibilityRole).toBe('text');
    });

    it('uses custom accessibility role', () => {
      render(
        <TestWrapper>
          <Typography accessibilityRole="link" testID="link-text">
            Link Text
          </Typography>
        </TestWrapper>
      );
      
      const element = screen.getByTestId('link-text');
      expect(element.props.accessibilityRole).toBe('link');
    });

    it('uses custom accessibility hint', () => {
      render(
        <TestWrapper>
          <Typography accessibilityHint="Custom hint" testID="hint-text">
            Text with hint
          </Typography>
        </TestWrapper>
      );
      
      const element = screen.getByTestId('hint-text');
      expect(element.props.accessibilityHint).toBe('Custom hint');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { fontSize: 20, color: 'blue' };
      
      render(
        <TestWrapper>
          <Typography style={customStyle} testID="custom-style">
            Custom styled text
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-style')).toBeTruthy();
      expect(screen.getByText('Custom styled text')).toBeTruthy();
    });

    it('applies custom font size', () => {
      render(
        <TestWrapper>
          <Typography fontSize={24} testID="custom-fontsize">
            Custom font size
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-fontsize')).toBeTruthy();
      expect(screen.getByText('Custom font size')).toBeTruthy();
    });
  });

  // Convenience component tests
  describe('Convenience Components', () => {
    const convenienceComponents = [
      { Component: Heading1, name: 'Heading1' },
      { Component: Heading2, name: 'Heading2' },
      { Component: Heading3, name: 'Heading3' },
      { Component: Heading4, name: 'Heading4' },
      { Component: Body1, name: 'Body1' },
      { Component: Body2, name: 'Body2' },
      { Component: Caption, name: 'Caption' },
      { Component: Overline, name: 'Overline' },
    ];

    convenienceComponents.forEach(({ Component, name }) => {
      it(`renders ${name} convenience component`, () => {
        render(
          <TestWrapper>
            <Component testID={`convenience-${name.toLowerCase()}`}>
              {name} Text
            </Component>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`convenience-${name.toLowerCase()}`)).toBeTruthy();
        expect(screen.getByText(`${name} Text`)).toBeTruthy();
      });
    });
  });

  // Complex combinations
  describe('Complex Combinations', () => {
    it('renders with multiple style properties', () => {
      render(
        <TestWrapper>
          <Typography
            variant="h2"
            color="primary"
            align="center"
            weight="bold"
            transform="uppercase"
            decoration="underline"
            testID="complex-typography"
          >
            Complex Typography
          </Typography>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('complex-typography')).toBeTruthy();
      expect(screen.getByText('Complex Typography')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/atoms/Typography/Typography.tsx">
/**
 * Typography Component
 * Consistent text rendering with all variants, colors, and styling options
 */

import React from 'react';
import { Text, TextProps, TextStyle } from 'react-native';
import { useTheme, useColors, useTypography } from '../../../context/ThemeContext';

// Typography Props Interface
export interface TypographyProps extends Omit<TextProps, 'style'> {
  // Content
  children: React.ReactNode;
  
  // Typography variants
  variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'body1' | 'body2' | 'caption' | 'overline' | 'button' | 'buttonSmall' | 'buttonLarge';
  
  // Color options
  color?: 'primary' | 'secondary' | 'tertiary' | 'disabled' | 'inverse' | 'success' | 'warning' | 'error' | string;
  
  // Text alignment
  align?: 'left' | 'center' | 'right' | 'justify';
  
  // Font weight override
  weight?: 'normal' | 'medium' | 'semibold' | 'bold';
  
  // Text transform
  transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';
  
  // Text decoration
  decoration?: 'none' | 'underline' | 'line-through';
  
  // Line height override
  lineHeight?: 'tight' | 'normal' | 'relaxed' | number;
  
  // Font size override (use sparingly)
  fontSize?: number;
  
  // Truncation
  numberOfLines?: number;
  ellipsizeMode?: 'head' | 'middle' | 'tail' | 'clip';
  
  // Custom styling
  style?: TextStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  accessibilityRole?: 'text' | 'header' | 'link' | 'button';
}

// Typography Component
export const Typography: React.FC<TypographyProps> = ({
  children,
  variant = 'body1',
  color = 'primary',
  align = 'left',
  weight,
  transform = 'none',
  decoration = 'none',
  lineHeight,
  fontSize,
  numberOfLines,
  ellipsizeMode = 'tail',
  style,
  accessibilityLabel,
  accessibilityHint,
  accessibilityRole,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const typography = useTypography();

  // Get base typography styles for the variant
  const getVariantStyles = (): TextStyle => {
    const variantStyle = typography.variants[variant];
    
    return {
      fontSize: fontSize || variantStyle.fontSize,
      fontWeight: weight ? theme.typography.fontWeight[weight] as TextStyle['fontWeight'] : variantStyle.fontWeight as TextStyle['fontWeight'],
      lineHeight: getLineHeight(variantStyle),
      letterSpacing: variantStyle.letterSpacing,
      ...((variantStyle as any).textTransform && { textTransform: (variantStyle as any).textTransform as TextStyle['textTransform'] }),
    };
  };

  // Calculate line height
  const getLineHeight = (variantStyle: typeof typography.variants[keyof typeof typography.variants]): number => {
    if (typeof lineHeight === 'number') {
      return lineHeight;
    }
    
    if (lineHeight) {
      const lineHeightMultiplier = theme.typography.lineHeight[lineHeight];
      return (fontSize || variantStyle.fontSize) * lineHeightMultiplier;
    }
    
    return variantStyle.lineHeight * (fontSize || variantStyle.fontSize);
  };

  // Get text color
  const getTextColor = (): string => {
    // If color is a custom hex/rgb value, use it directly
    if (color.startsWith('#') || color.startsWith('rgb') || color.startsWith('hsl')) {
      return color;
    }

    // Map semantic color names to theme colors
    const colorMap = {
      primary: colors.text.primary,
      secondary: colors.text.secondary,
      tertiary: colors.text.tertiary,
      disabled: colors.text.disabled,
      inverse: colors.text.inverse,
      success: colors.success.main,
      warning: colors.warning.main,
      error: colors.error.main,
    };

    return colorMap[color as keyof typeof colorMap] || colors.text.primary;
  };

  // Get accessibility role based on variant
  const getAccessibilityRole = (): TextProps['accessibilityRole'] => {
    if (accessibilityRole) {
      return accessibilityRole;
    }

    // Auto-assign roles based on variant
    if (variant.startsWith('h')) {
      return 'header';
    }
    
    if (variant.includes('button')) {
      return 'button';
    }
    
    return 'text';
  };

  // Combine all styles
  const textStyles: TextStyle = {
    ...getVariantStyles(),
    color: getTextColor(),
    textAlign: align,
    textTransform: transform as TextStyle['textTransform'],
    textDecorationLine: decoration as TextStyle['textDecorationLine'],
  };

  return (
    <Text
      style={[textStyles, style]}
      numberOfLines={numberOfLines}
      ellipsizeMode={ellipsizeMode}
      accessibilityLabel={accessibilityLabel}
      accessibilityHint={accessibilityHint}
      accessibilityRole={getAccessibilityRole()}
      {...props}
    >
      {children}
    </Text>
  );
};

// Convenience components for common variants
export const Heading1: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="h1" {...props} />
);

export const Heading2: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="h2" {...props} />
);

export const Heading3: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="h3" {...props} />
);

export const Heading4: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="h4" {...props} />
);

export const Body1: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="body1" {...props} />
);

export const Body2: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="body2" {...props} />
);

export const Caption: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="caption" {...props} />
);

export const Overline: React.FC<Omit<TypographyProps, 'variant'>> = (props) => (
  <Typography variant="overline" {...props} />
);

// Export default
export default Typography;
</file>

<file path="src/components/LogoIcon.tsx">
import React from 'react';
import { Svg, Circle, Path } from 'react-native-svg';

interface LogoIconProps {
  width?: number;
  height?: number;
  primaryColor?: string;
  secondaryColor?: string;
  accentColor?: string;
}

export const LogoIcon: React.FC<LogoIconProps> = ({
  width = 200,
  height = 200,
  primaryColor = '#005e7a',
  secondaryColor = '#ffffff',
  accentColor = '#f0c75e'
}) => {
  return (
    <Svg width={width} height={height} viewBox="0 0 200 200" fill="none">
      {/* Background Circle */}
      <Circle cx="100" cy="100" r="95" fill={primaryColor} />
      <Circle cx="100" cy="100" r="85" fill={secondaryColor} />
      
      {/* Open Book Symbol */}
      <Path d="M100 60C100 60 70 50 50 60V140C70 130 100 140 100 140V60Z" fill={primaryColor} />
      <Path d="M100 60C100 60 130 50 150 60V140C130 130 100 140 100 140V60Z" fill={primaryColor} />
      <Path d="M100 70C100 70 75 62 60 70V130C75 122 100 130 100 130V70Z" fill={secondaryColor} />
      <Path d="M100 70C100 70 125 62 140 70V130C125 122 100 130 100 130V70Z" fill={secondaryColor} />
      
      {/* Arabic-inspired Decorative Element */}
      <Path d="M100 40C100 40 90 45 100 50C110 45 100 40 100 40Z" fill={accentColor} />
      <Path d="M80 45C80 45 70 50 80 55C90 50 80 45 80 45Z" fill={accentColor} />
      <Path d="M120 45C120 45 110 50 120 55C130 50 120 45 120 45Z" fill={accentColor} />
      
      {/* Text "ZBT" */}
      <Path d="M70 160H130V170H70V160Z" fill={primaryColor} />
      <Path d="M70 160L130 160L100 145L70 160Z" fill={primaryColor} />
      <Path d="M85 170V180H115V170" stroke={primaryColor} strokeWidth="10" strokeLinecap="round" />
    </Svg>
  );
};
</file>

<file path="src/components/molecules/Card/Card.stories.tsx">
/**
 * Card Component Stories
 * Storybook stories demonstrating all Card component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { Card } from './Card';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';

const meta: Meta<typeof Card> = {
  title: 'Molecules/Card',
  component: Card,
  parameters: {
    docs: {
      description: {
        component: 'A consistent content container component with multiple variants and padding options.',
      },
    },
  },
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'elevated', 'outlined'],
      description: 'Visual variant of the card',
    },
    padding: {
      control: { type: 'select' },
      options: ['none', 'small', 'medium', 'large'],
      description: 'Internal padding size',
    },
    disabled: {
      control: { type: 'boolean' },
      description: 'Whether the card is disabled (if interactive)',
    },
    loading: {
      control: { type: 'boolean' },
      description: 'Whether the card is in loading state',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Card>;

// Basic card with default settings
export const Default: Story = {
  args: {
    children: (
      <View>
        <Typography variant="h4">Default Card</Typography>
        <Typography variant="body1">This is a default card with medium padding and shadow.</Typography>
      </View>
    ),
  },
};

// All variants side by side
export const Variants: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <Card variant="default">
        <Typography variant="h4">Default Card</Typography>
        <Typography variant="body2">With shadow elevation</Typography>
      </Card>
      
      <Card variant="elevated">
        <Typography variant="h4">Elevated Card</Typography>
        <Typography variant="body2">With enhanced shadow</Typography>
      </Card>
      
      <Card variant="outlined">
        <Typography variant="h4">Outlined Card</Typography>
        <Typography variant="body2">With border, no shadow</Typography>
      </Card>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different visual variants of the Card component.',
      },
    },
  },
};

// All padding options
export const PaddingOptions: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <Card padding="none" variant="outlined">
        <Typography variant="body2">No Padding (0px)</Typography>
      </Card>
      
      <Card padding="small" variant="outlined">
        <Typography variant="body2">Small Padding (12px)</Typography>
      </Card>
      
      <Card padding="medium" variant="outlined">
        <Typography variant="body2">Medium Padding (16px)</Typography>
      </Card>
      
      <Card padding="large" variant="outlined">
        <Typography variant="body2">Large Padding (20px)</Typography>
      </Card>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different padding options for the Card component.',
      },
    },
  },
};

// Interactive card
export const Interactive: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <Card onPress={() => alert('Card pressed!')}>
        <Typography variant="h4">Interactive Card</Typography>
        <Typography variant="body2">Tap me to see the interaction</Typography>
      </Card>
      
      <Card onPress={() => alert('Disabled card')} disabled>
        <Typography variant="h4">Disabled Card</Typography>
        <Typography variant="body2" color="disabled">This card is disabled</Typography>
      </Card>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Interactive cards with press handling and disabled states.',
      },
    },
  },
};

// Loading state
export const LoadingState: Story = {
  args: {
    loading: true,
    children: (
      <View>
        <Typography variant="h4">Loading Card</Typography>
        <Typography variant="body1">Content is loading...</Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Card in loading state with reduced opacity.',
      },
    },
  },
};

// Dashboard quick action example
export const DashboardQuickAction: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16, flexWrap: 'wrap' }}>
      <Card 
        style={{ flex: 1, minWidth: 150, alignItems: 'center' }}
        onPress={() => alert('View Schedule')}
      >
        <Icon name="calendar" size="xl" color="primary" />
        <Typography variant="h4" align="center" style={{ marginTop: 8 }}>
          Schedule
        </Typography>
        <Typography variant="body2" color="secondary" align="center">
          View daily classes
        </Typography>
      </Card>
      
      <Card 
        style={{ flex: 1, minWidth: 150, alignItems: 'center' }}
        onPress={() => alert('View Grades')}
      >
        <Icon name="school" size="xl" color="success" />
        <Typography variant="h4" align="center" style={{ marginTop: 8 }}>
          Grades
        </Typography>
        <Typography variant="body2" color="secondary" align="center">
          Check your progress
        </Typography>
      </Card>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of cards used as dashboard quick actions.',
      },
    },
  },
};

// Information display card
export const InformationDisplay: Story = {
  render: () => (
    <Card variant="outlined" padding="large">
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Student Information
      </Typography>
      
      <View style={{ gap: 8 }}>
        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
          <Typography variant="body1" weight="medium">Name:</Typography>
          <Typography variant="body1">Ahmed Al-Rashid</Typography>
        </View>
        
        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
          <Typography variant="body1" weight="medium">Class:</Typography>
          <Typography variant="body1">Grade 10-A</Typography>
        </View>
        
        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
          <Typography variant="body1" weight="medium">Status:</Typography>
          <Typography variant="body1" color="success">Active</Typography>
        </View>
      </View>
      
      <Button 
        variant="outline" 
        size="small" 
        style={{ marginTop: 16 }}
        onPress={() => alert('View Details')}
      >
        View Details
      </Button>
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of card used for displaying structured information.',
      },
    },
  },
};

// Complex content card
export const ComplexContent: Story = {
  render: () => (
    <Card>
      <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 12 }}>
        <Icon name="notifications" size="md" color="warning" />
        <Typography variant="h4" style={{ marginLeft: 8, flex: 1 }}>
          Important Notice
        </Typography>
        <Typography variant="caption" color="secondary">
          2 hours ago
        </Typography>
      </View>
      
      <Typography variant="body1" style={{ marginBottom: 16 }}>
        Parent-teacher conference scheduled for next week. Please confirm your attendance.
      </Typography>
      
      <View style={{ flexDirection: 'row', gap: 8 }}>
        <Button variant="primary" size="small" style={{ flex: 1 }}>
          Confirm
        </Button>
        <Button variant="outline" size="small" style={{ flex: 1 }}>
          Reschedule
        </Button>
      </View>
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of card with complex content including icons, text, and actions.',
      },
    },
  },
};
</file>

<file path="src/components/molecules/Card/Card.test.tsx">
/**
 * Card Component Tests
 * Unit tests for the Card component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Card } from './Card';
import { Typography } from '../../atoms/Typography';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('Card Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders children correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <Card>
            <Typography>Test Content</Typography>
          </Card>
        </TestWrapper>
      );

      expect(getByText('Test Content')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="test-card">
            <Typography>Content</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('test-card');
      expect(card).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('applies default variant styles', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="default-card" variant="default">
            <Typography>Default Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('default-card');
      expect(card).toBeTruthy();
      // Note: Style testing would require more complex setup with react-native-testing-library
    });

    it('applies elevated variant styles', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="elevated-card" variant="elevated">
            <Typography>Elevated Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('elevated-card');
      expect(card).toBeTruthy();
    });

    it('applies outlined variant styles', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="outlined-card" variant="outlined">
            <Typography>Outlined Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('outlined-card');
      expect(card).toBeTruthy();
    });
  });

  // Padding tests
  describe('Padding Options', () => {
    it('applies no padding', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="no-padding-card" padding="none">
            <Typography>No Padding</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('no-padding-card');
      expect(card).toBeTruthy();
    });

    it('applies small padding', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="small-padding-card" padding="small">
            <Typography>Small Padding</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('small-padding-card');
      expect(card).toBeTruthy();
    });

    it('applies medium padding (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="medium-padding-card" padding="medium">
            <Typography>Medium Padding</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('medium-padding-card');
      expect(card).toBeTruthy();
    });

    it('applies large padding', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="large-padding-card" padding="large">
            <Typography>Large Padding</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('large-padding-card');
      expect(card).toBeTruthy();
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles press events when onPress is provided', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="interactive-card" onPress={mockOnPress}>
            <Typography>Interactive Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('interactive-card');
      fireEvent.press(card);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('does not handle press events when disabled', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="disabled-card" onPress={mockOnPress} disabled>
            <Typography>Disabled Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('disabled-card');
      fireEvent.press(card);
      expect(mockOnPress).not.toHaveBeenCalled();
    });

    it('does not handle press events when loading', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="loading-card" onPress={mockOnPress} loading>
            <Typography>Loading Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('loading-card');
      fireEvent.press(card);
      expect(mockOnPress).not.toHaveBeenCalled();
    });

    it('renders as View when no onPress is provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="static-card">
            <Typography>Static Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('static-card');
      expect(card).toBeTruthy();
      // Static cards should not be pressable
    });
  });

  // State tests
  describe('States', () => {
    it('applies loading state', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="loading-card" loading>
            <Typography>Loading Content</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('loading-card');
      expect(card).toBeTruthy();
    });

    it('applies disabled state', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="disabled-card" onPress={() => {}} disabled>
            <Typography>Disabled Content</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('disabled-card');
      expect(card).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('sets correct accessibility role for interactive cards', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="interactive-card" onPress={() => {}}>
            <Typography>Interactive Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('interactive-card');
      expect(card.props.accessibilityRole).toBe('button');
    });

    it('sets correct accessibility role for static cards', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="static-card">
            <Typography>Static Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('static-card');
      expect(card.props.accessibilityRole).toBe('none');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="labeled-card" accessibilityLabel="Custom Card Label">
            <Typography>Card Content</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('labeled-card');
      expect(card.props.accessibilityLabel).toBe('Custom Card Label');
    });

    it('applies custom accessibility hint', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card 
            testID="hinted-card" 
            onPress={() => {}}
            accessibilityHint="Tap to view details"
          >
            <Typography>Card Content</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('hinted-card');
      expect(card.props.accessibilityHint).toBe('Tap to view details');
    });

    it('sets correct accessibility state for disabled cards', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="disabled-card" onPress={() => {}} disabled>
            <Typography>Disabled Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('disabled-card');
      expect(card.props.accessibilityState.disabled).toBe(true);
    });

    it('sets correct accessibility state for loading cards', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="loading-card" onPress={() => {}} loading>
            <Typography>Loading Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('loading-card');
      expect(card.props.accessibilityState.busy).toBe(true);
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <Card testID="custom-styled-card" style={customStyle}>
            <Typography>Custom Styled Card</Typography>
          </Card>
        </TestWrapper>
      );

      const card = getByTestId('custom-styled-card');
      expect(card).toBeTruthy();
      // Note: Testing actual style application would require more complex setup
    });
  });
});
</file>

<file path="src/components/molecules/Card/Card.tsx">
/**
 * Card Component
 * Consistent content container with variants, padding options, and press interactions
 */

import React from 'react';
import {
  View,
  TouchableOpacity,
  ViewStyle,
  StyleSheet,
  TouchableOpacityProps,
} from 'react-native';
import { useTheme, useColors } from '../../../context/ThemeContext';

// Card Props Interface
export interface CardProps extends Omit<TouchableOpacityProps, 'style'> {
  // Content
  children: React.ReactNode;
  
  // Variants
  variant?: 'default' | 'elevated' | 'outlined';
  
  // Padding options
  padding?: 'none' | 'small' | 'medium' | 'large';
  
  // Interactive
  onPress?: () => void;
  disabled?: boolean;
  
  // Loading state
  loading?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  accessibilityRole?: 'button' | 'none';
  
  // Test ID
  testID?: string;
}

// Card Component
export const Card: React.FC<CardProps> = ({
  children,
  variant = 'default',
  padding = 'medium',
  onPress,
  disabled = false,
  loading = false,
  style,
  accessibilityLabel,
  accessibilityHint,
  accessibilityRole,
  testID,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get card styles based on variant and state
  const getCardStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      borderRadius: theme.borderRadius.lg, // 12px as per design spec
      backgroundColor: colors.surface.primary,
    };

    // Padding styles
    const paddingStyles = {
      none: {},
      small: { padding: 12 }, // Small (12px) as per design spec
      medium: { padding: theme.spacing.base.md }, // Medium (16px) as per design spec
      large: { padding: 20 }, // Large (20px) as per design spec
    };

    // Variant styles
    const variantStyles = {
      default: {
        ...theme.shadows.card, // 0px 2px 4px rgba(0, 0, 0, 0.1) as per design spec
      },
      elevated: {
        ...theme.shadows.cardHover, // Enhanced shadow for elevated state
      },
      outlined: {
        borderWidth: 1,
        borderColor: colors.border.primary,
        // No shadow for outlined variant
      },
    };

    return {
      ...baseStyle,
      ...paddingStyles[padding],
      ...variantStyles[variant],
      ...(onPress && {
        opacity: disabled ? 0.6 : 1,
      }),
      ...(loading && {
        opacity: 0.7,
      }),
    };
  };

  // Get accessibility role
  const getAccessibilityRole = () => {
    if (accessibilityRole) return accessibilityRole;
    if (onPress) return 'button';
    return 'none';
  };

  // Render card content
  const renderContent = () => {
    if (loading) {
      // TODO: Add loading skeleton in future iteration
      return children;
    }
    
    return children;
  };

  // If interactive, wrap in TouchableOpacity
  if (onPress) {
    return (
      <TouchableOpacity
        style={[getCardStyles(), style]}
        onPress={disabled || loading ? undefined : onPress}
        disabled={disabled || loading}
        accessibilityRole={getAccessibilityRole()}
        accessibilityLabel={accessibilityLabel}
        accessibilityHint={accessibilityHint}
        accessibilityState={{
          disabled: disabled || loading,
          busy: loading,
        }}
        testID={testID}
        activeOpacity={0.7}
        {...props}
      >
        {renderContent()}
      </TouchableOpacity>
    );
  }

  // Static card without interaction
  return (
    <View
      style={[getCardStyles(), style]}
      accessibilityRole={getAccessibilityRole()}
      accessibilityLabel={accessibilityLabel}
      testID={testID}
    >
      {renderContent()}
    </View>
  );
};

// Export default
export default Card;
</file>

<file path="src/components/molecules/Card/index.ts">
/**
 * Card Component Exports
 */

export { Card, type CardProps } from './Card';
export { default } from './Card';
</file>

<file path="src/components/molecules/ListItem/index.ts">
/**
 * ListItem Component Exports
 */

export { ListItem, type ListItemProps } from './ListItem';
export { default } from './ListItem';
</file>

<file path="src/components/molecules/ListItem/ListItem.stories.tsx">
/**
 * ListItem Component Stories
 * Storybook stories demonstrating all ListItem component variants and use cases
 */

import React from 'react';
import { View, Switch } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { ListItem } from './ListItem';
import { Typography } from '../../atoms/Typography';
import { Avatar } from '../../atoms/Avatar';
import { Button } from '../../atoms/Button';
import { Card } from '../Card';

const meta: Meta<typeof ListItem> = {
  title: 'Molecules/ListItem',
  component: ListItem,
  parameters: {
    docs: {
      description: {
        component: 'A consistent list item component with uniform layout, spacing, and interactions.',
      },
    },
  },
  argTypes: {
    title: {
      control: { type: 'text' },
      description: 'Main title text',
    },
    subtitle: {
      control: { type: 'text' },
      description: 'Optional subtitle text',
    },
    leftIcon: {
      control: { type: 'text' },
      description: 'Optional left icon name',
    },
    rightIcon: {
      control: { type: 'text' },
      description: 'Optional right icon name',
    },
    showDivider: {
      control: { type: 'boolean' },
      description: 'Whether to show bottom divider',
    },
    disabled: {
      control: { type: 'boolean' },
      description: 'Whether the item is disabled',
    },
  },
};

export default meta;
type Story = StoryObj<typeof ListItem>;

// Basic list item
export const Default: Story = {
  args: {
    title: 'Default List Item',
    subtitle: 'This is a basic list item with title and subtitle',
  },
};

// Interactive list item
export const Interactive: Story = {
  args: {
    title: 'Interactive Item',
    subtitle: 'Tap to see interaction',
    onPress: () => alert('List item pressed!'),
  },
};

// List item with icons
export const WithIcons: Story = {
  render: () => (
    <View style={{ gap: 0 }}>
      <ListItem
        title="Left Icon Only"
        subtitle="Item with left icon"
        leftIcon="home"
        showDivider
      />
      <ListItem
        title="Right Icon Only"
        subtitle="Item with right icon"
        rightIcon="chevron-forward"
        showDivider
      />
      <ListItem
        title="Both Icons"
        subtitle="Item with both icons"
        leftIcon="person"
        rightIcon="chevron-forward"
        onPress={() => alert('Both icons pressed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'List items with different icon configurations.',
      },
    },
  },
};

// List item with custom components
export const WithCustomComponents: Story = {
  render: () => (
    <View style={{ gap: 0 }}>
      <ListItem
        title="John Doe"
        subtitle="Student - Grade 10A"
        leftComponent={
          <Avatar
            name="John Doe"
            size="sm"
          />
        }
        rightComponent={
          <Typography variant="caption" color="success">
            Present
          </Typography>
        }
        onPress={() => alert('Student pressed')}
        showDivider
      />
      <ListItem
        title="Settings"
        subtitle="App preferences"
        leftIcon="settings"
        rightComponent={
          <Button variant="outline" size="small">
            Edit
          </Button>
        }
        showDivider
      />
      <ListItem
        title="Notifications"
        subtitle="Push notification settings"
        leftIcon="notifications"
        rightComponent={
          <Switch value={true} onValueChange={() => {}} />
        }
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'List items with custom left and right components.',
      },
    },
  },
};

// List with dividers
export const WithDividers: Story = {
  render: () => (
    <Card padding="none">
      <ListItem
        title="First Item"
        subtitle="First item description"
        leftIcon="document"
        showDivider
      />
      <ListItem
        title="Second Item"
        subtitle="Second item description"
        leftIcon="folder"
        showDivider
      />
      <ListItem
        title="Third Item"
        subtitle="Third item description"
        leftIcon="image"
        showDivider
      />
      <ListItem
        title="Last Item"
        subtitle="Last item without divider"
        leftIcon="star"
      />
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'List items with dividers in a card container.',
      },
    },
  },
};

// Disabled state
export const DisabledState: Story = {
  render: () => (
    <View style={{ gap: 0 }}>
      <ListItem
        title="Normal Item"
        subtitle="This item is enabled"
        leftIcon="checkmark-circle"
        rightIcon="chevron-forward"
        onPress={() => alert('Normal item pressed')}
        showDivider
      />
      <ListItem
        title="Disabled Item"
        subtitle="This item is disabled"
        leftIcon="lock-closed"
        rightIcon="chevron-forward"
        disabled
        onPress={() => alert('This should not fire')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Comparison between normal and disabled list items.',
      },
    },
  },
};

// Navigation menu example
export const NavigationMenu: Story = {
  render: () => (
    <Card padding="none">
      <ListItem
        title="Dashboard"
        subtitle="Overview and quick actions"
        leftIcon="home"
        rightIcon="chevron-forward"
        onPress={() => alert('Navigate to Dashboard')}
        showDivider
      />
      <ListItem
        title="Profile"
        subtitle="Personal information"
        leftIcon="person"
        rightIcon="chevron-forward"
        onPress={() => alert('Navigate to Profile')}
        showDivider
      />
      <ListItem
        title="Classes"
        subtitle="View your classes"
        leftIcon="school"
        rightIcon="chevron-forward"
        onPress={() => alert('Navigate to Classes')}
        showDivider
      />
      <ListItem
        title="Settings"
        subtitle="App preferences"
        leftIcon="settings"
        rightIcon="chevron-forward"
        onPress={() => alert('Navigate to Settings')}
      />
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of list items used for navigation menu.',
      },
    },
  },
};

// Student list example
export const StudentList: Story = {
  render: () => (
    <Card padding="none">
      <ListItem
        title="Ahmed Al-Rashid"
        subtitle="Grade 10A - Student ID: 12345"
        leftComponent={
          <Avatar
            name="Ahmed Al-Rashid"
            size="sm"
          />
        }
        rightComponent={
          <View style={{ alignItems: 'flex-end' }}>
            <Typography variant="caption" color="success">
              Present
            </Typography>
            <Typography variant="caption" color="secondary">
              95% Attendance
            </Typography>
          </View>
        }
        onPress={() => alert('View Ahmed\'s profile')}
        showDivider
      />
      <ListItem
        title="Fatima Hassan"
        subtitle="Grade 10A - Student ID: 12346"
        leftComponent={
          <Avatar
            name="Fatima Hassan"
            size="sm"
          />
        }
        rightComponent={
          <View style={{ alignItems: 'flex-end' }}>
            <Typography variant="caption" color="warning">
              Late
            </Typography>
            <Typography variant="caption" color="secondary">
              88% Attendance
            </Typography>
          </View>
        }
        onPress={() => alert('View Fatima\'s profile')}
        showDivider
      />
      <ListItem
        title="Omar Khalil"
        subtitle="Grade 10A - Student ID: 12347"
        leftComponent={
          <Avatar
            name="Omar Khalil"
            size="sm"
          />
        }
        rightComponent={
          <View style={{ alignItems: 'flex-end' }}>
            <Typography variant="caption" color="error">
              Absent
            </Typography>
            <Typography variant="caption" color="secondary">
              76% Attendance
            </Typography>
          </View>
        }
        onPress={() => alert('View Omar\'s profile')}
      />
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of list items used for displaying student information.',
      },
    },
  },
};

// Activity feed example
export const ActivityFeed: Story = {
  render: () => (
    <Card padding="none">
      <ListItem
        title="Assignment Submitted"
        subtitle="Math homework submitted by Ahmed Al-Rashid"
        leftIcon="document-text"
        rightComponent={
          <Typography variant="caption" color="secondary">
            2 min ago
          </Typography>
        }
        onPress={() => alert('View assignment')}
        showDivider
      />
      <ListItem
        title="New Announcement"
        subtitle="Parent-teacher meeting scheduled for next week"
        leftIcon="megaphone"
        rightComponent={
          <Typography variant="caption" color="secondary">
            1 hour ago
          </Typography>
        }
        onPress={() => alert('View announcement')}
        showDivider
      />
      <ListItem
        title="Grade Updated"
        subtitle="Science test grade posted for Grade 10A"
        leftIcon="school"
        rightComponent={
          <Typography variant="caption" color="secondary">
            3 hours ago
          </Typography>
        }
        onPress={() => alert('View grades')}
        showDivider
      />
      <ListItem
        title="Incident Report"
        subtitle="Minor incident reported in playground"
        leftIcon="warning"
        rightComponent={
          <Typography variant="caption" color="secondary">
            1 day ago
          </Typography>
        }
        onPress={() => alert('View incident')}
      />
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of list items used for activity feed.',
      },
    },
  },
};

// Settings list example
export const SettingsList: Story = {
  render: () => {
    const [notifications, setNotifications] = React.useState(true);
    const [darkMode, setDarkMode] = React.useState(false);
    
    return (
      <Card padding="none">
        <ListItem
          title="Notifications"
          subtitle="Push notifications and alerts"
          leftIcon="notifications"
          rightComponent={
            <Switch
              value={notifications}
              onValueChange={setNotifications}
            />
          }
          showDivider
        />
        <ListItem
          title="Dark Mode"
          subtitle="Use dark theme"
          leftIcon="moon"
          rightComponent={
            <Switch
              value={darkMode}
              onValueChange={setDarkMode}
            />
          }
          showDivider
        />
        <ListItem
          title="Privacy"
          subtitle="Privacy and security settings"
          leftIcon="shield"
          rightIcon="chevron-forward"
          onPress={() => alert('Navigate to Privacy')}
          showDivider
        />
        <ListItem
          title="About"
          subtitle="App version and information"
          leftIcon="information-circle"
          rightIcon="chevron-forward"
          onPress={() => alert('Navigate to About')}
        />
      </Card>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Example of list items used for settings screen.',
      },
    },
  },
};
</file>

<file path="src/components/molecules/ListItem/ListItem.test.tsx">
/**
 * ListItem Component Tests
 * Unit tests for the ListItem component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { View, Text } from 'react-native';
import { ListItem } from './ListItem';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('ListItem Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders title correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <ListItem title="Test Title" />
        </TestWrapper>
      );

      expect(getByText('Test Title')).toBeTruthy();
    });

    it('renders title and subtitle correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <ListItem title="Test Title" subtitle="Test Subtitle" />
        </TestWrapper>
      );

      expect(getByText('Test Title')).toBeTruthy();
      expect(getByText('Test Subtitle')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem title="Test Title" testID="test-list-item" />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });
  });

  // Icon tests
  describe('Icons', () => {
    it('renders with left icon', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            leftIcon="home"
            testID="test-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });

    it('renders with right icon', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            rightIcon="chevron-forward"
            testID="test-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });

    it('renders with both icons', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            leftIcon="home"
            rightIcon="chevron-forward"
            testID="test-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });
  });

  // Custom component tests
  describe('Custom Components', () => {
    it('renders with left component', () => {
      const LeftComponent = () => <Text>Left Component</Text>;
      
      const { getByText } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            leftComponent={<LeftComponent />}
          />
        </TestWrapper>
      );

      expect(getByText('Left Component')).toBeTruthy();
    });

    it('renders with right component', () => {
      const RightComponent = () => <Text>Right Component</Text>;
      
      const { getByText } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            rightComponent={<RightComponent />}
          />
        </TestWrapper>
      );

      expect(getByText('Right Component')).toBeTruthy();
    });

    it('prioritizes custom components over icons', () => {
      const LeftComponent = () => <Text>Custom Left</Text>;
      const RightComponent = () => <Text>Custom Right</Text>;
      
      const { getByText } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            leftIcon="home"
            rightIcon="chevron-forward"
            leftComponent={<LeftComponent />}
            rightComponent={<RightComponent />}
          />
        </TestWrapper>
      );

      expect(getByText('Custom Left')).toBeTruthy();
      expect(getByText('Custom Right')).toBeTruthy();
    });
  });

  // Divider tests
  describe('Divider', () => {
    it('shows divider when showDivider is true', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            showDivider
            testID="test-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });

    it('does not show divider by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title" 
            testID="test-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('test-list-item');
      expect(listItem).toBeTruthy();
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles press events when onPress is provided', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Interactive Item"
            onPress={mockOnPress}
            testID="interactive-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('interactive-list-item');
      fireEvent.press(listItem);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('does not handle press events when disabled', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Disabled Item"
            onPress={mockOnPress}
            disabled
            testID="disabled-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('disabled-list-item');
      fireEvent.press(listItem);
      expect(mockOnPress).not.toHaveBeenCalled();
    });

    it('renders as View when no onPress is provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Static Item"
            testID="static-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('static-list-item');
      expect(listItem).toBeTruthy();
    });
  });

  // State tests
  describe('States', () => {
    it('applies disabled state', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Disabled Item"
            onPress={() => {}}
            disabled
            testID="disabled-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('disabled-list-item');
      expect(listItem).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('sets correct accessibility role for interactive items', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Interactive Item"
            onPress={() => {}}
            testID="interactive-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('interactive-list-item');
      expect(listItem.props.accessibilityRole).toBe('button');
    });

    it('sets correct accessibility role for static items', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Static Item"
            testID="static-list-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('static-list-item');
      expect(listItem.props.accessibilityRole).toBe('none');
    });

    it('generates accessibility label from title only', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title"
            testID="title-only-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('title-only-item');
      expect(listItem.props.accessibilityLabel).toBe('Test Title');
    });

    it('generates accessibility label from title and subtitle', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title"
            subtitle="Test Subtitle"
            testID="title-subtitle-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('title-subtitle-item');
      expect(listItem.props.accessibilityLabel).toBe('Test Title, Test Subtitle');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title"
            accessibilityLabel="Custom Label"
            testID="custom-label-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('custom-label-item');
      expect(listItem.props.accessibilityLabel).toBe('Custom Label');
    });

    it('applies custom accessibility hint', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title"
            onPress={() => {}}
            accessibilityHint="Tap to view details"
            testID="hinted-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('hinted-item');
      expect(listItem.props.accessibilityHint).toBe('Tap to view details');
    });

    it('sets correct accessibility state for disabled items', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Disabled Item"
            onPress={() => {}}
            disabled
            testID="disabled-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('disabled-item');
      expect(listItem.props.accessibilityState.disabled).toBe(true);
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Custom Styled Item"
            style={customStyle}
            testID="custom-styled-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('custom-styled-item');
      expect(listItem).toBeTruthy();
    });

    it('applies custom title styles', () => {
      const titleStyle = { color: 'blue' };
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Custom Title Style"
            titleStyle={titleStyle}
            testID="custom-title-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('custom-title-item');
      expect(listItem).toBeTruthy();
    });

    it('applies custom subtitle styles', () => {
      const subtitleStyle = { color: 'green' };
      const { getByTestId } = render(
        <TestWrapper>
          <ListItem 
            title="Test Title"
            subtitle="Custom Subtitle Style"
            subtitleStyle={subtitleStyle}
            testID="custom-subtitle-item"
          />
        </TestWrapper>
      );

      const listItem = getByTestId('custom-subtitle-item');
      expect(listItem).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/molecules/ListItem/ListItem.tsx">
/**
 * ListItem Component
 * Consistent list item implementation with uniform layout, spacing, and interactions
 */

import React from 'react';
import {
  View,
  TouchableOpacity,
  ViewStyle,
  TextStyle,
  StyleSheet,
  TouchableOpacityProps,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { combineStyles } from '../../../utils/styleHelpers';

// ListItem Props Interface
export interface ListItemProps extends Omit<TouchableOpacityProps, 'style'> {
  // Content
  title: string;
  subtitle?: string;
  
  // Icons
  leftIcon?: keyof typeof Ionicons.glyphMap;
  rightIcon?: keyof typeof Ionicons.glyphMap;
  
  // Custom components (alternative to icons)
  leftComponent?: React.ReactNode;
  rightComponent?: React.ReactNode;
  
  // Visual options
  showDivider?: boolean;
  
  // Interactive
  onPress?: () => void;
  disabled?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  titleStyle?: TextStyle;
  subtitleStyle?: TextStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  accessibilityRole?: 'button' | 'none';
  
  // Test ID
  testID?: string;
}

// ListItem Component
export const ListItem: React.FC<ListItemProps> = ({
  title,
  subtitle,
  leftIcon,
  rightIcon,
  leftComponent,
  rightComponent,
  showDivider = false,
  onPress,
  disabled = false,
  style,
  titleStyle,
  subtitleStyle,
  accessibilityLabel,
  accessibilityHint,
  accessibilityRole,
  testID,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: theme.spacing.base.md,
      paddingVertical: theme.spacing.base.sm,
      minHeight: 56, // Standard list item height for good touch targets
      backgroundColor: colors.surface.primary,
    };

    return {
      ...baseStyle,
      ...(onPress && {
        opacity: disabled ? 0.6 : 1,
      }),
    };
  };

  // Get content container styles
  const getContentStyles = (): ViewStyle => {
    return {
      flex: 1,
      marginLeft: leftIcon || leftComponent ? theme.spacing.base.sm : 0,
      marginRight: rightIcon || rightComponent ? theme.spacing.base.sm : 0,
    };
  };

  // Get divider styles
  const getDividerStyles = (): ViewStyle => {
    return {
      height: 1,
      backgroundColor: colors.border.primary,
      marginLeft: leftIcon || leftComponent ? 56 : theme.spacing.base.md, // Align with content
    };
  };

  // Get accessibility role
  const getAccessibilityRole = () => {
    if (accessibilityRole) return accessibilityRole;
    if (onPress) return 'button';
    return 'none';
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    return subtitle ? `${title}, ${subtitle}` : title;
  };

  // Render left content
  const renderLeftContent = () => {
    if (leftComponent) {
      return leftComponent;
    }
    
    if (leftIcon) {
      return (
        <Icon
          name={leftIcon}
          size="md"
          color={disabled ? 'disabled' : 'secondary'}
        />
      );
    }
    
    return null;
  };

  // Render right content
  const renderRightContent = () => {
    if (rightComponent) {
      return rightComponent;
    }
    
    if (rightIcon) {
      return (
        <Icon
          name={rightIcon}
          size="md"
          color={disabled ? 'disabled' : 'tertiary'}
        />
      );
    }
    
    return null;
  };

  // Render main content
  const renderContent = () => {
    return (
      <View style={styles.container}>
        <View style={getContainerStyles()}>
          {renderLeftContent()}
          
          <View style={getContentStyles()}>
            <Typography
              variant="body1"
              color={disabled ? 'disabled' : 'primary'}
              numberOfLines={1}
              ellipsizeMode="tail"
              style={titleStyle}
            >
              {title}
            </Typography>
            
            {subtitle && (
              <Typography
                variant="body2"
                color={disabled ? 'disabled' : 'secondary'}
                numberOfLines={1}
                ellipsizeMode="tail"
                style={combineStyles({ marginTop: 2 }, subtitleStyle) as TextStyle}
              >
                {subtitle}
              </Typography>
            )}
          </View>
          
          {renderRightContent()}
        </View>
        
        {showDivider && <View style={getDividerStyles()} />}
      </View>
    );
  };

  // If interactive, wrap in TouchableOpacity
  if (onPress) {
    return (
      <TouchableOpacity
        style={style}
        onPress={disabled ? undefined : onPress}
        disabled={disabled}
        accessibilityRole={getAccessibilityRole()}
        accessibilityLabel={getAccessibilityLabel()}
        accessibilityHint={accessibilityHint}
        accessibilityState={{ disabled }}
        testID={testID}
        activeOpacity={0.7}
        {...props}
      >
        {renderContent()}
      </TouchableOpacity>
    );
  }

  // Static list item without interaction
  return (
    <View
      style={style}
      accessibilityRole={getAccessibilityRole()}
      accessibilityLabel={getAccessibilityLabel()}
      testID={testID}
    >
      {renderContent()}
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  container: {
    backgroundColor: 'transparent',
  },
});

// Export default
export default ListItem;
</file>

<file path="src/components/molecules/NotificationItem/index.ts">
/**
 * NotificationItem Component Exports
 */

export { NotificationItem, type NotificationItemProps, type NotificationType } from './NotificationItem';
export { default } from './NotificationItem';
</file>

<file path="src/components/molecules/NotificationItem/NotificationItem.stories.tsx">
/**
 * NotificationItem Component Stories
 * Storybook stories demonstrating all NotificationItem component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { NotificationItem } from './NotificationItem';
import { Typography } from '../../atoms/Typography';
import { Card } from '../Card';

const meta: Meta<typeof NotificationItem> = {
  title: 'Molecules/NotificationItem',
  component: NotificationItem,
  parameters: {
    docs: {
      description: {
        component: 'A consistent notification display component with status indicators and actions.',
      },
    },
  },
  argTypes: {
    title: {
      control: { type: 'text' },
      description: 'Notification title',
    },
    message: {
      control: { type: 'text' },
      description: 'Notification message',
    },
    type: {
      control: { type: 'select' },
      options: ['info', 'success', 'warning', 'error'],
      description: 'Notification type with color coding',
    },
    timestamp: {
      control: { type: 'text' },
      description: 'Optional timestamp text',
    },
    read: {
      control: { type: 'boolean' },
      description: 'Whether notification has been read',
    },
    compact: {
      control: { type: 'boolean' },
      description: 'Whether to use compact layout',
    },
    showDismiss: {
      control: { type: 'boolean' },
      description: 'Whether to show dismiss button',
    },
  },
};

export default meta;
type Story = StoryObj<typeof NotificationItem>;

// Basic notification
export const Default: Story = {
  args: {
    title: 'New Assignment',
    message: 'Math homework has been assigned for tomorrow',
    timestamp: '2 hours ago',
  },
};

// Different notification types
export const NotificationTypes: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <NotificationItem
        type="info"
        title="Class Schedule Update"
        message="Your Monday schedule has been updated"
        timestamp="1 hour ago"
      />
      
      <NotificationItem
        type="success"
        title="Assignment Submitted"
        message="Your science project has been successfully submitted"
        timestamp="30 minutes ago"
      />
      
      <NotificationItem
        type="warning"
        title="Low Attendance"
        message="Your attendance is below the required threshold"
        timestamp="1 day ago"
      />
      
      <NotificationItem
        type="error"
        title="Payment Failed"
        message="Unable to process your fee payment. Please try again"
        timestamp="2 days ago"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different notification types with appropriate color coding.',
      },
    },
  },
};

// Read vs Unread states
export const ReadStates: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <NotificationItem
        title="Unread Notification"
        message="This notification has not been read yet"
        timestamp="1 hour ago"
        read={false}
      />
      
      <NotificationItem
        title="Read Notification"
        message="This notification has already been read"
        timestamp="2 hours ago"
        read={true}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Comparison between read and unread notification states.',
      },
    },
  },
};

// Interactive notifications
export const InteractiveNotifications: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <NotificationItem
        title="Parent-Teacher Meeting"
        message="Scheduled for next Friday at 3:00 PM"
        timestamp="1 hour ago"
        onPress={() => alert('Notification pressed')}
        onDismiss={() => alert('Notification dismissed')}
      />
      
      <NotificationItem
        type="warning"
        title="Fee Payment Due"
        message="Your semester fee payment is due in 3 days"
        timestamp="2 days ago"
        onPress={() => alert('View payment details')}
        onAction={() => alert('Make payment')}
        actionLabel="Pay Now"
        onDismiss={() => alert('Dismissed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Interactive notifications with press, action, and dismiss handlers.',
      },
    },
  },
};

// Compact mode
export const CompactMode: Story = {
  render: () => (
    <Card>
      <Typography variant="h4" style={{ marginBottom: 12 }}>
        Recent Updates
      </Typography>
      
      <View style={{ gap: 8 }}>
        <NotificationItem
          title="New Assignment"
          message="Math homework assigned"
          timestamp="1h"
          compact
          showDismiss={false}
        />
        
        <NotificationItem
          title="Grade Updated"
          message="Science test graded"
          timestamp="2h"
          type="success"
          compact
          showDismiss={false}
        />
        
        <NotificationItem
          title="Meeting Reminder"
          message="Parent meeting tomorrow"
          timestamp="1d"
          type="warning"
          compact
          showDismiss={false}
        />
        
        <NotificationItem
          title="System Maintenance"
          message="Scheduled for tonight"
          timestamp="3h"
          type="info"
          compact
          showDismiss={false}
        />
      </View>
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Compact notifications for dense information display.',
      },
    },
  },
};

// Custom icons
export const CustomIcons: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <NotificationItem
        title="Star Achievement"
        message="You've earned a gold star for excellent performance"
        icon="star"
        type="success"
        timestamp="1 hour ago"
      />
      
      <NotificationItem
        title="Book Recommendation"
        message="New book added to your reading list"
        icon="book"
        type="info"
        timestamp="2 hours ago"
      />
      
      <NotificationItem
        title="Calendar Event"
        message="Sports day scheduled for next week"
        icon="calendar"
        type="warning"
        timestamp="1 day ago"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Notifications with custom icons instead of default type icons.',
      },
    },
  },
};

// Notification feed example
export const NotificationFeed: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Notifications
      </Typography>
      
      <NotificationItem
        type="info"
        title="Class Schedule Change"
        message="Your Physics class has been moved to Room 205"
        timestamp="2 hours ago"
        onPress={() => alert('View schedule')}
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="success"
        title="Assignment Graded"
        message="Your English essay received an A grade"
        timestamp="1 day ago"
        read={true}
        onPress={() => alert('View grade')}
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="warning"
        title="Fee Payment Due"
        message="Your semester fee payment is due in 3 days"
        timestamp="2 days ago"
        onPress={() => alert('View payment')}
        onAction={() => alert('Make payment')}
        actionLabel="Pay Now"
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="error"
        title="Incident Report Required"
        message="Please submit an incident report for today's playground incident"
        timestamp="3 days ago"
        onPress={() => alert('View incident')}
        onAction={() => alert('Create report')}
        actionLabel="Create Report"
        onDismiss={() => alert('Dismissed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of a complete notification feed with various types and states.',
      },
    },
  },
};

// Student notifications
export const StudentNotifications: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Student Dashboard Notifications
      </Typography>
      
      <NotificationItem
        type="info"
        title="New Assignment Posted"
        message="Math Chapter 5 exercises are now available in your assignments"
        timestamp="30 minutes ago"
        onPress={() => alert('View assignment')}
        onAction={() => alert('Start assignment')}
        actionLabel="Start Now"
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="success"
        title="Quiz Results Available"
        message="Your Science quiz results have been published. Great job!"
        timestamp="2 hours ago"
        onPress={() => alert('View results')}
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="warning"
        title="Library Book Due"
        message="'Introduction to Physics' is due for return tomorrow"
        timestamp="1 day ago"
        onPress={() => alert('View library')}
        onAction={() => alert('Renew book')}
        actionLabel="Renew"
        onDismiss={() => alert('Dismissed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Student-specific notifications with relevant actions.',
      },
    },
  },
};

// Teacher notifications
export const TeacherNotifications: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Teacher Dashboard Notifications
      </Typography>
      
      <NotificationItem
        type="info"
        title="New Student Enrollment"
        message="Sarah Ahmed has been enrolled in your Grade 10A class"
        timestamp="1 hour ago"
        onPress={() => alert('View student profile')}
        onAction={() => alert('Send welcome message')}
        actionLabel="Welcome"
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="warning"
        title="Assignment Deadline Approaching"
        message="Math homework deadline is tomorrow. 5 students haven't submitted yet"
        timestamp="3 hours ago"
        onPress={() => alert('View submissions')}
        onAction={() => alert('Send reminder')}
        actionLabel="Remind Students"
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="success"
        title="Parent Meeting Confirmed"
        message="Ahmed's parent has confirmed attendance for tomorrow's meeting"
        timestamp="1 day ago"
        read={true}
        onPress={() => alert('View meeting details')}
        onDismiss={() => alert('Dismissed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Teacher-specific notifications with classroom management actions.',
      },
    },
  },
};

// Parent notifications
export const ParentNotifications: Story = {
  render: () => (
    <View style={{ gap: 12 }}>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Parent Dashboard Notifications
      </Typography>
      
      <NotificationItem
        type="success"
        title="Excellent Performance"
        message="Ahmed scored 95% in the Mathematics test. Congratulations!"
        timestamp="2 hours ago"
        onPress={() => alert('View detailed results')}
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="warning"
        title="Attendance Notice"
        message="Ahmed was absent from school today. Please confirm if this was planned"
        timestamp="4 hours ago"
        onPress={() => alert('View attendance')}
        onAction={() => alert('Confirm absence')}
        actionLabel="Confirm"
        onDismiss={() => alert('Dismissed')}
      />
      
      <NotificationItem
        type="info"
        title="Parent-Teacher Meeting"
        message="Scheduled meeting with Ahmed's class teacher for next Friday at 3 PM"
        timestamp="1 day ago"
        onPress={() => alert('View meeting details')}
        onAction={() => alert('Confirm attendance')}
        actionLabel="Confirm"
        onDismiss={() => alert('Dismissed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Parent-specific notifications with child monitoring actions.',
      },
    },
  },
};
</file>

<file path="src/components/molecules/NotificationItem/NotificationItem.test.tsx">
/**
 * NotificationItem Component Tests
 * Unit tests for the NotificationItem component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { NotificationItem } from './NotificationItem';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('NotificationItem Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders title and message correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title="Test Title"
            message="Test message content"
          />
        </TestWrapper>
      );

      expect(getByText('Test Title')).toBeTruthy();
      expect(getByText('Test message content')).toBeTruthy();
    });

    it('renders with timestamp', () => {
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title="Test Title"
            message="Test message"
            timestamp="2 hours ago"
          />
        </TestWrapper>
      );

      expect(getByText('2 hours ago')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Test Title"
            message="Test message"
            testID="test-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('test-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Type tests
  describe('Notification Types', () => {
    it('renders info type (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Info Notification"
            message="Info message"
            type="info"
            testID="info-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('info-notification');
      expect(notification).toBeTruthy();
    });

    it('renders success type', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Success Notification"
            message="Success message"
            type="success"
            testID="success-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('success-notification');
      expect(notification).toBeTruthy();
    });

    it('renders warning type', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Warning Notification"
            message="Warning message"
            type="warning"
            testID="warning-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('warning-notification');
      expect(notification).toBeTruthy();
    });

    it('renders error type', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Error Notification"
            message="Error message"
            type="error"
            testID="error-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('error-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Read state tests
  describe('Read States', () => {
    it('renders unread state (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Unread Notification"
            message="Unread message"
            read={false}
            testID="unread-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('unread-notification');
      expect(notification).toBeTruthy();
    });

    it('renders read state', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Read Notification"
            message="Read message"
            read={true}
            testID="read-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('read-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Icon tests
  describe('Icons', () => {
    it('uses default icon for type', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Default Icon"
            message="Uses type-based icon"
            type="success"
            testID="default-icon-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('default-icon-notification');
      expect(notification).toBeTruthy();
    });

    it('uses custom icon when provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Custom Icon"
            message="Uses custom icon"
            icon="star"
            testID="custom-icon-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('custom-icon-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles press events when onPress is provided', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Interactive Notification"
            message="Tap to interact"
            onPress={mockOnPress}
            testID="interactive-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('interactive-notification');
      fireEvent.press(notification);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('handles dismiss events', () => {
      const mockOnDismiss = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <NotificationItem
            title="Dismissible Notification"
            message="Can be dismissed"
            onDismiss={mockOnDismiss}
          />
        </TestWrapper>
      );

      const dismissButton = getByLabelText('Dismiss notification');
      fireEvent.press(dismissButton);
      expect(mockOnDismiss).toHaveBeenCalledTimes(1);
    });

    it('handles action events', () => {
      const mockOnAction = jest.fn();
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title="Action Notification"
            message="Has action button"
            onAction={mockOnAction}
            actionLabel="Take Action"
          />
        </TestWrapper>
      );

      const actionButton = getByText('Take Action');
      fireEvent.press(actionButton);
      expect(mockOnAction).toHaveBeenCalledTimes(1);
    });

    it('renders as View when no onPress is provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Static Notification"
            message="Not interactive"
            testID="static-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('static-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Dismiss button tests
  describe('Dismiss Button', () => {
    it('shows dismiss button by default when onDismiss is provided', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <NotificationItem
            title="Dismissible"
            message="Has dismiss button"
            onDismiss={() => {}}
          />
        </TestWrapper>
      );

      const dismissButton = getByLabelText('Dismiss notification');
      expect(dismissButton).toBeTruthy();
    });

    it('hides dismiss button when showDismiss is false', () => {
      const { queryByLabelText } = render(
        <TestWrapper>
          <NotificationItem
            title="No Dismiss"
            message="No dismiss button"
            onDismiss={() => {}}
            showDismiss={false}
          />
        </TestWrapper>
      );

      const dismissButton = queryByLabelText('Dismiss notification');
      expect(dismissButton).toBeNull();
    });

    it('does not show dismiss button when onDismiss is not provided', () => {
      const { queryByLabelText } = render(
        <TestWrapper>
          <NotificationItem
            title="No Dismiss Handler"
            message="No dismiss functionality"
          />
        </TestWrapper>
      );

      const dismissButton = queryByLabelText('Dismiss notification');
      expect(dismissButton).toBeNull();
    });
  });

  // Action button tests
  describe('Action Button', () => {
    it('shows action button when onAction and actionLabel are provided', () => {
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title="Action Notification"
            message="Has action"
            onAction={() => {}}
            actionLabel="Do Something"
          />
        </TestWrapper>
      );

      const actionButton = getByText('Do Something');
      expect(actionButton).toBeTruthy();
    });

    it('does not show action button when onAction is missing', () => {
      const { queryByText } = render(
        <TestWrapper>
          <NotificationItem
            title="No Action"
            message="No action handler"
            actionLabel="Do Something"
          />
        </TestWrapper>
      );

      const actionButton = queryByText('Do Something');
      expect(actionButton).toBeNull();
    });

    it('does not show action button when actionLabel is missing', () => {
      const { queryByRole } = render(
        <TestWrapper>
          <NotificationItem
            title="No Label"
            message="No action label"
            onAction={() => {}}
          />
        </TestWrapper>
      );

      // Should not find any button with role 'button' for action
      const buttons = queryByRole('button');
      expect(buttons).toBeNull();
    });
  });

  // Compact mode tests
  describe('Compact Mode', () => {
    it('renders in compact mode', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Compact Notification"
            message="Compact layout"
            compact
            testID="compact-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('compact-notification');
      expect(notification).toBeTruthy();
    });

    it('renders in normal mode by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Normal Notification"
            message="Normal layout"
            testID="normal-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('normal-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('sets correct accessibility role for interactive notifications', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Interactive"
            message="Interactive notification"
            onPress={() => {}}
            testID="interactive-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('interactive-notification');
      expect(notification.props.accessibilityRole).toBe('button');
    });

    it('sets correct accessibility role for static notifications', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Static"
            message="Static notification"
            testID="static-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('static-notification');
      expect(notification.props.accessibilityRole).toBe('text');
    });

    it('generates accessibility label from content', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Test Title"
            message="Test message"
            type="success"
            timestamp="1 hour ago"
            testID="auto-label-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('auto-label-notification');
      expect(notification.props.accessibilityLabel).toBe(
        'success notification: Test Title, Test message, 1 hour ago, unread'
      );
    });

    it('includes read status in accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Read Notification"
            message="Already read"
            read={true}
            testID="read-label-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('read-label-notification');
      expect(notification.props.accessibilityLabel).toContain('read');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Custom Label"
            message="Custom accessibility"
            accessibilityLabel="Custom notification label"
            testID="custom-label-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('custom-label-notification');
      expect(notification.props.accessibilityLabel).toBe('Custom notification label');
    });

    it('applies accessibility hint', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Hinted Notification"
            message="Has accessibility hint"
            onPress={() => {}}
            accessibilityHint="Tap to view details"
            testID="hinted-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('hinted-notification');
      expect(notification.props.accessibilityHint).toBe('Tap to view details');
    });

    it('provides proper accessibility for dismiss button', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <NotificationItem
            title="Dismissible"
            message="Can be dismissed"
            onDismiss={() => {}}
          />
        </TestWrapper>
      );

      const dismissButton = getByLabelText('Dismiss notification');
      expect(dismissButton.props.accessibilityRole).toBe('button');
      expect(dismissButton.props.accessibilityHint).toBe('Removes this notification');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="Custom Styled"
            message="Has custom styles"
            style={customStyle}
            testID="custom-styled-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('custom-styled-notification');
      expect(notification).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles long titles gracefully', () => {
      const longTitle = 'This is a very long notification title that should be truncated properly';
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title={longTitle}
            message="Short message"
          />
        </TestWrapper>
      );

      expect(getByText(longTitle)).toBeTruthy();
    });

    it('handles long messages gracefully', () => {
      const longMessage = 'This is a very long notification message that should be truncated properly when it exceeds the maximum number of lines allowed for display';
      const { getByText } = render(
        <TestWrapper>
          <NotificationItem
            title="Short Title"
            message={longMessage}
          />
        </TestWrapper>
      );

      expect(getByText(longMessage)).toBeTruthy();
    });

    it('handles empty timestamp', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NotificationItem
            title="No Timestamp"
            message="No timestamp provided"
            testID="no-timestamp-notification"
          />
        </TestWrapper>
      );

      const notification = getByTestId('no-timestamp-notification');
      expect(notification).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/molecules/NotificationItem/NotificationItem.tsx">
/**
 * NotificationItem Component
 * Consistent notification display with status indicators and actions
 */

import React from 'react';
import {
  View,
  TouchableOpacity,
  ViewStyle,
  StyleSheet,
  TouchableOpacityProps,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';

// Notification types
export type NotificationType = 'info' | 'success' | 'warning' | 'error';

// NotificationItem Props Interface
export interface NotificationItemProps extends Omit<TouchableOpacityProps, 'style'> {
  // Content
  title: string;
  message: string;
  
  // Notification type
  type?: NotificationType;
  
  // Timing
  timestamp?: string;
  
  // Status
  read?: boolean;
  
  // Icon
  icon?: keyof typeof Ionicons.glyphMap;
  
  // Actions
  onPress?: () => void;
  onDismiss?: () => void;
  onAction?: () => void;
  actionLabel?: string;
  
  // Visual options
  showDismiss?: boolean;
  compact?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  
  // Test ID
  testID?: string;
}

// NotificationItem Component
export const NotificationItem: React.FC<NotificationItemProps> = ({
  title,
  message,
  type = 'info',
  timestamp,
  read = false,
  icon,
  onPress,
  onDismiss,
  onAction,
  actionLabel,
  showDismiss = true,
  compact = false,
  style,
  accessibilityLabel,
  accessibilityHint,
  testID,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get notification icon based on type
  const getNotificationIcon = (): keyof typeof Ionicons.glyphMap => {
    if (icon) return icon;
    
    const typeIcons = {
      info: 'information-circle' as const,
      success: 'checkmark-circle' as const,
      warning: 'warning' as const,
      error: 'alert-circle' as const,
    };
    
    return typeIcons[type];
  };

  // Get notification color based on type
  const getNotificationColor = (): string => {
    const typeColors = {
      info: colors.primary.main,
      success: colors.success.main,
      warning: colors.warning.main,
      error: colors.error.main,
    };
    
    return typeColors[type];
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      flexDirection: 'row',
      padding: compact ? theme.spacing.base.sm : theme.spacing.base.md,
      backgroundColor: read ? colors.surface.primary : colors.surface.secondary,
      borderLeftWidth: 4,
      borderLeftColor: getNotificationColor(),
      borderRadius: theme.borderRadius.md,
      ...theme.shadows.card,
    };

    return {
      ...baseStyle,
      opacity: read ? 0.8 : 1,
    };
  };

  // Get content styles
  const getContentStyles = (): ViewStyle => {
    return {
      flex: 1,
      marginLeft: theme.spacing.base.sm,
      marginRight: showDismiss || onAction ? theme.spacing.base.sm : 0,
    };
  };

  // Get header styles
  const getHeaderStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-start',
      marginBottom: compact ? 2 : 4,
    };
  };

  // Get actions container styles
  const getActionsStyles = (): ViewStyle => {
    return {
      flexDirection: 'column',
      alignItems: 'flex-end',
      gap: theme.spacing.base.xs,
    };
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    
    const statusText = read ? 'read' : 'unread';
    const timeText = timestamp ? `, ${timestamp}` : '';
    return `${type} notification: ${title}, ${message}${timeText}, ${statusText}`;
  };

  // Render notification content
  const renderContent = () => {
    return (
      <>
        <Icon
          name={getNotificationIcon()}
          size={compact ? 'md' : 'lg'}
          color={getNotificationColor()}
        />
        
        <View style={getContentStyles()}>
          <View style={getHeaderStyles()}>
            <Typography
              variant={compact ? 'body2' : 'body1'}
              weight="medium"
              color={read ? 'secondary' : 'primary'}
              numberOfLines={2}
              ellipsizeMode="tail"
            >
              {title}
            </Typography>
            
            {timestamp && (
              <Typography
                variant="caption"
                color="tertiary"
                style={{ marginLeft: theme.spacing.base.xs }}
              >
                {timestamp}
              </Typography>
            )}
          </View>
          
          <Typography
            variant={compact ? 'caption' : 'body2'}
            color={read ? 'tertiary' : 'secondary'}
            numberOfLines={compact ? 2 : 3}
            ellipsizeMode="tail"
            style={{ marginBottom: onAction ? theme.spacing.base.xs : 0 }}
          >
            {message}
          </Typography>
          
          {onAction && actionLabel && (
            <Button
              variant="outline"
              size="small"
              onPress={onAction}
              style={{ alignSelf: 'flex-start', marginTop: theme.spacing.base.xs }}
            >
              {actionLabel}
            </Button>
          )}
        </View>
        
        {(showDismiss || onAction) && (
          <View style={getActionsStyles()}>
            {showDismiss && onDismiss && (
              <TouchableOpacity
                onPress={onDismiss}
                style={styles.dismissButton}
                accessibilityRole="button"
                accessibilityLabel="Dismiss notification"
                accessibilityHint="Removes this notification"
              >
                <Icon
                  name="close"
                  size="sm"
                  color="tertiary"
                />
              </TouchableOpacity>
            )}
          </View>
        )}
      </>
    );
  };

  // If interactive, wrap in TouchableOpacity
  if (onPress) {
    return (
      <TouchableOpacity
        style={[getContainerStyles(), style]}
        onPress={onPress}
        accessibilityRole="button"
        accessibilityLabel={getAccessibilityLabel()}
        accessibilityHint={accessibilityHint}
        testID={testID}
        activeOpacity={0.7}
        {...props}
      >
        {renderContent()}
      </TouchableOpacity>
    );
  }

  // Static notification item
  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="text"
      accessibilityLabel={getAccessibilityLabel()}
      testID={testID}
    >
      {renderContent()}
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  dismissButton: {
    padding: 4,
    borderRadius: 12,
  },
});

// Export default
export default NotificationItem;
</file>

<file path="src/components/molecules/ProgressBar/index.ts">
/**
 * ProgressBar Component Exports
 */

export { ProgressBar, type ProgressBarProps } from './ProgressBar';
export { default } from './ProgressBar';
</file>

<file path="src/components/molecules/ProgressBar/ProgressBar.stories.tsx">
/**
 * ProgressBar Component Stories
 * Storybook stories demonstrating all ProgressBar component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { ProgressBar } from './ProgressBar';
import { Typography } from '../../atoms/Typography';
import { Card } from '../Card';

const meta: Meta<typeof ProgressBar> = {
  title: 'Molecules/ProgressBar',
  component: ProgressBar,
  parameters: {
    docs: {
      description: {
        component: 'A consistent progress indicator component with visual patterns and color coding.',
      },
    },
  },
  argTypes: {
    value: {
      control: { type: 'range', min: 0, max: 100, step: 1 },
      description: 'Progress value (0-100)',
    },
    variant: {
      control: { type: 'select' },
      options: ['default', 'success', 'warning', 'error'],
      description: 'Visual variant with color coding',
    },
    size: {
      control: { type: 'select' },
      options: ['small', 'medium', 'large'],
      description: 'Height of the progress bar',
    },
    showLabel: {
      control: { type: 'boolean' },
      description: 'Whether to show the label',
    },
    showPercentage: {
      control: { type: 'boolean' },
      description: 'Whether to show percentage',
    },
    animated: {
      control: { type: 'boolean' },
      description: 'Whether to animate progress changes',
    },
  },
};

export default meta;
type Story = StoryObj<typeof ProgressBar>;

// Basic progress bar
export const Default: Story = {
  args: {
    value: 75,
  },
};

// Progress bar with label and percentage
export const WithLabelAndPercentage: Story = {
  args: {
    value: 85,
    label: 'Course Progress',
    showLabel: true,
    showPercentage: true,
  },
};

// Different variants
export const Variants: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Default (Primary)
        </Typography>
        <ProgressBar value={60} variant="default" />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Success (Green)
        </Typography>
        <ProgressBar value={100} variant="success" />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Warning (Orange)
        </Typography>
        <ProgressBar value={30} variant="warning" />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Error (Red)
        </Typography>
        <ProgressBar value={15} variant="error" />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different color variants for various states and contexts.',
      },
    },
  },
};

// Different sizes
export const Sizes: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Small (4px)
        </Typography>
        <ProgressBar value={50} size="small" />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Medium (8px) - Default
        </Typography>
        <ProgressBar value={50} size="medium" />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Large (12px)
        </Typography>
        <ProgressBar value={50} size="large" />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different sizes for various use cases and visual hierarchy.',
      },
    },
  },
};

// With labels and percentages
export const WithLabels: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <ProgressBar
        value={78}
        label="Overall Grade"
        showLabel
        showPercentage
        variant="success"
      />
      
      <ProgressBar
        value={65}
        label="Attendance"
        showLabel
        showPercentage
        variant="warning"
      />
      
      <ProgressBar
        value={92}
        label="Assignment Completion"
        showLabel
        showPercentage
        variant="success"
      />
      
      <ProgressBar
        value={45}
        label="Participation"
        showLabel
        showPercentage
        variant="error"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Progress bars with labels and percentage display.',
      },
    },
  },
};

// Student progress card example
export const StudentProgressCard: Story = {
  render: () => (
    <Card>
      <Typography variant="h4" style={{ marginBottom: 16 }}>
        Ahmed's Semester Progress
      </Typography>
      
      <View style={{ gap: 12 }}>
        <ProgressBar
          value={88}
          label="Overall Grade"
          showLabel
          showPercentage
          variant="success"
          size="large"
        />
        
        <ProgressBar
          value={72}
          label="Attendance"
          showLabel
          showPercentage
          variant="warning"
        />
        
        <ProgressBar
          value={95}
          label="Assignment Completion"
          showLabel
          showPercentage
          variant="success"
        />
        
        <ProgressBar
          value={68}
          label="Class Participation"
          showLabel
          showPercentage
          variant="warning"
        />
      </View>
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of progress bars used in a student progress card.',
      },
    },
  },
};

// Class performance overview
export const ClassPerformanceOverview: Story = {
  render: () => (
    <Card>
      <Typography variant="h4" style={{ marginBottom: 16 }}>
        Grade 10A - Subject Performance
      </Typography>
      
      <View style={{ gap: 16 }}>
        <ProgressBar
          value={85}
          label="Mathematics"
          showLabel
          showPercentage
          size="large"
          variant="success"
        />
        
        <ProgressBar
          value={72}
          label="Science"
          showLabel
          showPercentage
          size="large"
          variant="warning"
        />
        
        <ProgressBar
          value={95}
          label="English"
          showLabel
          showPercentage
          size="large"
          variant="success"
        />
        
        <ProgressBar
          value={58}
          label="History"
          showLabel
          showPercentage
          size="large"
          variant="error"
        />
        
        <ProgressBar
          value={79}
          label="Islamic Studies"
          showLabel
          showPercentage
          size="large"
          variant="default"
        />
      </View>
    </Card>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of progress bars used for class performance overview.',
      },
    },
  },
};

// Loading progress example
export const LoadingProgress: Story = {
  render: () => {
    const [progress, setProgress] = React.useState(0);
    
    React.useEffect(() => {
      const interval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 100) {
            return 0; // Reset for demo
          }
          return prev + 2;
        });
      }, 100);
      
      return () => clearInterval(interval);
    }, []);
    
    return (
      <Card>
        <Typography variant="h4" style={{ marginBottom: 16 }}>
          File Upload Progress
        </Typography>
        
        <ProgressBar
          value={progress}
          label="Uploading assignment.pdf"
          showLabel
          showPercentage
          size="large"
        />
        
        <Typography variant="body2" color="secondary" style={{ marginTop: 8 }}>
          {progress < 100 ? 'Uploading...' : 'Upload complete!'}
        </Typography>
      </Card>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Example of animated progress bar for loading states.',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Custom Purple Progress
        </Typography>
        <ProgressBar
          value={70}
          progressColor="#9c27b0"
          backgroundColor="#e1bee7"
          showPercentage
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Custom Blue Progress
        </Typography>
        <ProgressBar
          value={45}
          progressColor="#2196f3"
          backgroundColor="#bbdefb"
          showPercentage
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8 }}>
          Custom Teal Progress
        </Typography>
        <ProgressBar
          value={90}
          progressColor="#009688"
          backgroundColor="#b2dfdb"
          showPercentage
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Progress bars with custom colors for specific branding needs.',
      },
    },
  },
};

// Without animation
export const WithoutAnimation: Story = {
  render: () => {
    const [value, setValue] = React.useState(25);
    
    return (
      <View style={{ gap: 16 }}>
        <Card>
          <Typography variant="h4" style={{ marginBottom: 16 }}>
            Animation Comparison
          </Typography>
          
          <View style={{ gap: 12 }}>
            <View>
              <Typography variant="body2" style={{ marginBottom: 8 }}>
                With Animation (Default)
              </Typography>
              <ProgressBar
                value={value}
                showPercentage
                animated={true}
              />
            </View>
            
            <View>
              <Typography variant="body2" style={{ marginBottom: 8 }}>
                Without Animation
              </Typography>
              <ProgressBar
                value={value}
                showPercentage
                animated={false}
              />
            </View>
          </View>
          
          <View style={{ flexDirection: 'row', gap: 8, marginTop: 16 }}>
            <Typography variant="body2">Test Values:</Typography>
            {[25, 50, 75, 100].map(testValue => (
              <Typography
                key={testValue}
                variant="body2"
                color="primary"
                style={{ 
                  textDecorationLine: value === testValue ? 'underline' : 'none',
                  fontWeight: value === testValue ? 'bold' : 'normal'
                }}
                onPress={() => setValue(testValue)}
              >
                {testValue}%
              </Typography>
            ))}
          </View>
        </Card>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Comparison between animated and non-animated progress bars.',
      },
    },
  },
};
</file>

<file path="src/components/molecules/ProgressBar/ProgressBar.test.tsx">
/**
 * ProgressBar Component Tests
 * Unit tests for the ProgressBar component functionality and accessibility
 */

import React from 'react';
import { render, act } from '@testing-library/react-native';
import { ProgressBar } from './ProgressBar';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('ProgressBar Component', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  // Helper function to run timers and reduce boilerplate
  const runTimers = () => {
    act(() => {
      jest.runAllTimers();
    });
  };

  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with basic props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} testID="test-progress-bar" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('test-progress-bar');
      expect(progressBar).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={75} testID="default-progress-bar" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('default-progress-bar');
      expect(progressBar).toBeTruthy();
    });
  });

  // Value handling tests
  describe('Value Handling', () => {
    it('handles normal values correctly', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} testID="normal-value" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('normal-value');
      expect(progressBar).toBeTruthy();
    });

    it('clamps values below 0', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={-10} testID="negative-value" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('negative-value');
      expect(progressBar).toBeTruthy();
    });

    it('clamps values above 100', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={150} testID="over-value" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('over-value');
      expect(progressBar).toBeTruthy();
    });

    it('handles edge values (0 and 100)', () => {
      const { getByTestId: getByTestId1 } = render(
        <TestWrapper>
          <ProgressBar value={0} testID="zero-value" />
        </TestWrapper>
      );
      runTimers();

      const { getByTestId: getByTestId2 } = render(
        <TestWrapper>
          <ProgressBar value={100} testID="hundred-value" />
        </TestWrapper>
      );
      runTimers();

      expect(getByTestId1('zero-value')).toBeTruthy();
      expect(getByTestId2('hundred-value')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} variant="default" testID="default-variant" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('default-variant');
      expect(progressBar).toBeTruthy();
    });

    it('renders success variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} variant="success" testID="success-variant" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('success-variant');
      expect(progressBar).toBeTruthy();
    });

    it('renders warning variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} variant="warning" testID="warning-variant" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('warning-variant');
      expect(progressBar).toBeTruthy();
    });

    it('renders error variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} variant="error" testID="error-variant" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('error-variant');
      expect(progressBar).toBeTruthy();
    });
  });

  // Size tests
  describe('Sizes', () => {
    it('renders small size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} size="small" testID="small-size" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('small-size');
      expect(progressBar).toBeTruthy();
    });

    it('renders medium size (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} size="medium" testID="medium-size" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('medium-size');
      expect(progressBar).toBeTruthy();
    });

    it('renders large size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} size="large" testID="large-size" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('large-size');
      expect(progressBar).toBeTruthy();
    });
  });

  // Label tests
  describe('Labels', () => {
    it('shows label when showLabel is true', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={50} label="Test Progress" showLabel />
        </TestWrapper>
      );
      runTimers();
      expect(getByText('Test Progress')).toBeTruthy();
    });

    it('shows percentage when showPercentage is true', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={75} showPercentage />
        </TestWrapper>
      );
      runTimers();
      expect(getByText('75%')).toBeTruthy();
    });

    it('shows both label and percentage', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={85} label="Course Progress" showLabel showPercentage />
        </TestWrapper>
      );
      runTimers();
      expect(getByText('Course Progress')).toBeTruthy();
      expect(getByText('85%')).toBeTruthy();
    });

    it('does not show labels by default', () => {
      const { queryByText } = render(
        <TestWrapper>
          <ProgressBar value={50} label="Hidden Label" />
        </TestWrapper>
      );
      runTimers();
      expect(queryByText('Hidden Label')).toBeNull();
      expect(queryByText('50%')).toBeNull();
    });
  });

  // Animation tests
  describe('Animation', () => {
    it('enables animation by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} testID="animated-progress" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('animated-progress');
      expect(progressBar).toBeTruthy();
    });

    it('disables animation when animated is false', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} animated={false} testID="static-progress" />
        </TestWrapper>
      );
      // No need to run timers here as animation is disabled
      const progressBar = getByTestId('static-progress');
      expect(progressBar).toBeTruthy();
    });

    it('accepts custom animation duration', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            animationDuration={500}
            testID="custom-duration"
          />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('custom-duration');
      expect(progressBar).toBeTruthy();
    });
  });

  // Custom colors tests
  describe('Custom Colors', () => {
    it('accepts custom progress color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            progressColor="#ff0000"
            testID="custom-progress-color"
          />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('custom-progress-color');
      expect(progressBar).toBeTruthy();
    });

    it('accepts custom background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            backgroundColor="#f0f0f0"
            testID="custom-bg-color"
          />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('custom-bg-color');
      expect(progressBar).toBeTruthy();
    });

    it('accepts both custom colors', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            progressColor="#00ff00"
            backgroundColor="#cccccc"
            testID="both-custom-colors"
          />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('both-custom-colors');
      expect(progressBar).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('renders with accessibility properties', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} testID="progress-bar" animated={false} />
        </TestWrapper>
      );
      const progressBar = getByTestId('progress-bar');
      expect(progressBar).toBeTruthy();
    });

    it('renders with custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            accessibilityLabel="Custom progress label"
            testID="progress-bar"
            animated={false}
          />
        </TestWrapper>
      );
      const progressBar = getByTestId('progress-bar');
      expect(progressBar).toBeTruthy();
    });

    it('renders with accessibility hint', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={50}
            accessibilityHint="Shows completion percentage"
            testID="progress-bar"
            animated={false}
          />
        </TestWrapper>
      );
      const progressBar = getByTestId('progress-bar');
      expect(progressBar).toBeTruthy();
    });

    it('renders with label for accessibility', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar
            value={80}
            label="Course Progress"
            testID="progress-bar"
            animated={false}
          />
        </TestWrapper>
      );
      const progressBar = getByTestId('progress-bar');
      expect(progressBar).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { marginTop: 20 };
      const { getByTestId } = render(
        <TestWrapper>
          <ProgressBar value={50} style={customStyle} testID="custom-styled" />
        </TestWrapper>
      );
      runTimers();
      const progressBar = getByTestId('custom-styled');
      expect(progressBar).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles decimal values', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={75.7} showPercentage />
        </TestWrapper>
      );
      runTimers();
      // Should round to nearest integer
      expect(getByText('76%')).toBeTruthy();
    });

    it('handles very small values', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={0.1} showPercentage />
        </TestWrapper>
      );
      runTimers();
      expect(getByText('0%')).toBeTruthy();
    });

    it('handles very large values', () => {
      const { getByText } = render(
        <TestWrapper>
          <ProgressBar value={99.9} showPercentage />
        </TestWrapper>
      );
      runTimers();
      expect(getByText('100%')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/molecules/ProgressBar/ProgressBar.tsx">
/**
 * ProgressBar Component
 * Consistent progress indicator with visual patterns and color coding
 */

import React from 'react';
import {
  View,
  ViewStyle,
  StyleSheet,
  Animated,
} from 'react-native';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';

// ProgressBar Props Interface
export interface ProgressBarProps {
  // Progress value (0-100)
  value: number;
  
  // Visual options
  variant?: 'default' | 'success' | 'warning' | 'error';
  size?: 'small' | 'medium' | 'large';
  
  // Display options
  showLabel?: boolean;
  showPercentage?: boolean;
  label?: string;
  
  // Styling
  backgroundColor?: string;
  progressColor?: string;
  
  // Animation
  animated?: boolean;
  animationDuration?: number;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  
  // Test ID
  testID?: string;
}

// ProgressBar Component
export const ProgressBar: React.FC<ProgressBarProps> = ({
  value,
  variant = 'default',
  size = 'medium',
  showLabel = false,
  showPercentage = false,
  label,
  backgroundColor,
  progressColor,
  animated = true,
  animationDuration = 300,
  style,
  accessibilityLabel,
  accessibilityHint,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const animatedValue = React.useRef(new Animated.Value(0)).current;

  // Clamp value between 0 and 100
  const clampedValue = Math.max(0, Math.min(100, value));

  // Animate progress bar when value changes
  React.useEffect(() => {
    if (animated) {
      Animated.timing(animatedValue, {
        toValue: clampedValue,
        duration: animationDuration,
        useNativeDriver: false,
      }).start();
    } else {
      animatedValue.setValue(clampedValue);
    }
  }, [clampedValue, animated, animationDuration, animatedValue]);

  // Get progress bar height based on size
  const getProgressBarHeight = (): number => {
    const heights = {
      small: 4,
      medium: 8,
      large: 12,
    };
    return heights[size];
  };

  // Get progress color based on variant
  const getProgressColor = (): string => {
    if (progressColor) return progressColor;
    
    const variantColors = {
      default: colors.primary.main,
      success: colors.success.main,
      warning: colors.warning.main,
      error: colors.error.main,
    };
    
    return variantColors[variant];
  };

  // Get background color
  const getBackgroundColor = (): string => {
    if (backgroundColor) return backgroundColor;
    return colors.surface.secondary;
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    return {
      width: '100%',
    };
  };

  // Get progress bar container styles
  const getProgressBarContainerStyles = (): ViewStyle => {
    const height = getProgressBarHeight();
    
    return {
      height,
      backgroundColor: getBackgroundColor(),
      borderRadius: height / 2,
      overflow: 'hidden',
    };
  };

  // Get progress bar fill styles
  const getProgressBarFillStyles = (): ViewStyle => {
    const height = getProgressBarHeight();
    
    return {
      height: '100%',
      backgroundColor: getProgressColor(),
      borderRadius: height / 2,
    };
  };

  // Get label styles
  const getLabelStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: theme.spacing.base.xs,
    };
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    
    const baseLabel = label || 'Progress';
    return `${baseLabel}: ${clampedValue} percent`;
  };

  // Render label section
  const renderLabel = () => {
    if (!showLabel && !showPercentage) return null;
    
    return (
      <View style={getLabelStyles()}>
        {showLabel && label && (
          <Typography variant="body2" color="primary">
            {label}
          </Typography>
        )}
        
        {showPercentage && (
          <Typography variant="body2" color="secondary">
            {Math.round(clampedValue)}%
          </Typography>
        )}
      </View>
    );
  };

  return (
    <View style={[getContainerStyles(), style]} testID={testID}>
      {renderLabel()}
      
      <View
        style={getProgressBarContainerStyles()}
        accessibilityRole="progressbar"
        accessibilityLabel={getAccessibilityLabel()}
        accessibilityHint={accessibilityHint}
        accessibilityValue={{
          min: 0,
          max: 100,
          now: clampedValue,
        }}
      >
        <Animated.View
          style={[
            getProgressBarFillStyles(),
            {
              width: animatedValue.interpolate({
                inputRange: [0, 100],
                outputRange: ['0%', '100%'],
                extrapolate: 'clamp',
              }),
            },
          ]}
        />
      </View>
    </View>
  );
};

// Export default
export default ProgressBar;
</file>

<file path="src/components/molecules/QuickAction/index.ts">
/**
 * QuickAction Component Exports
 */

export { QuickAction, type QuickActionProps } from './QuickAction';
export { default } from './QuickAction';
</file>

<file path="src/components/molecules/QuickAction/QuickAction.stories.tsx">
/**
 * QuickAction Component Stories
 * Storybook stories demonstrating all QuickAction component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { QuickAction } from './QuickAction';
import { Typography } from '../../atoms/Typography';

const meta: Meta<typeof QuickAction> = {
  title: 'Molecules/QuickAction',
  component: QuickAction,
  parameters: {
    docs: {
      description: {
        component: 'A consistent dashboard action button with grid layout and visual hierarchy.',
      },
    },
  },
  argTypes: {
    title: {
      control: { type: 'text' },
      description: 'Action title',
    },
    subtitle: {
      control: { type: 'text' },
      description: 'Optional subtitle text',
    },
    icon: {
      control: { type: 'text' },
      description: 'Icon name',
    },
    badge: {
      control: { type: 'number', min: 0, max: 999 },
      description: 'Badge number',
    },
    variant: {
      control: { type: 'select' },
      options: ['default', 'primary', 'secondary'],
      description: 'Visual variant',
    },
    size: {
      control: { type: 'select' },
      options: ['small', 'medium', 'large'],
      description: 'Component size',
    },
    layout: {
      control: { type: 'select' },
      options: ['vertical', 'horizontal'],
      description: 'Icon and text layout',
    },
    disabled: {
      control: { type: 'boolean' },
      description: 'Whether the action is disabled',
    },
  },
};

export default meta;
type Story = StoryObj<typeof QuickAction>;

// Basic quick action
export const Default: Story = {
  args: {
    title: 'View Schedule',
    icon: 'calendar',
    onPress: () => alert('Schedule pressed!'),
  },
};

// Quick action with subtitle
export const WithSubtitle: Story = {
  args: {
    title: 'Assignments',
    subtitle: '3 pending',
    icon: 'document-text',
    onPress: () => alert('Assignments pressed!'),
  },
};

// Quick action with badge
export const WithBadge: Story = {
  args: {
    title: 'Messages',
    subtitle: 'New messages',
    icon: 'mail',
    badge: 5,
    onPress: () => alert('Messages pressed!'),
  },
};

// Different variants
export const Variants: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16, flexWrap: 'wrap' }}>
      <QuickAction
        title="Default"
        subtitle="Default variant"
        icon="home"
        variant="default"
        onPress={() => alert('Default pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Primary"
        subtitle="Primary variant"
        icon="star"
        variant="primary"
        onPress={() => alert('Primary pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Secondary"
        subtitle="Secondary variant"
        icon="heart"
        variant="secondary"
        onPress={() => alert('Secondary pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different visual variants for various contexts and emphasis levels.',
      },
    },
  },
};

// Different sizes
export const Sizes: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16, alignItems: 'flex-start' }}>
      <QuickAction
        title="Small"
        subtitle="Small size"
        icon="home"
        size="small"
        onPress={() => alert('Small pressed')}
      />
      
      <QuickAction
        title="Medium"
        subtitle="Medium size"
        icon="home"
        size="medium"
        onPress={() => alert('Medium pressed')}
      />
      
      <QuickAction
        title="Large"
        subtitle="Large size"
        icon="home"
        size="large"
        onPress={() => alert('Large pressed')}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different sizes for various use cases and visual hierarchy.',
      },
    },
  },
};

// Layout options
export const Layouts: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      <View>
        <Typography variant="h4" style={{ marginBottom: 12 }}>
          Vertical Layout (Default)
        </Typography>
        <View style={{ flexDirection: 'row', gap: 16 }}>
          <QuickAction
            title="Schedule"
            subtitle="Today's classes"
            icon="calendar"
            layout="vertical"
            onPress={() => alert('Vertical pressed')}
            style={{ flex: 1 }}
          />
          
          <QuickAction
            title="Messages"
            subtitle="New messages"
            icon="mail"
            badge={3}
            layout="vertical"
            onPress={() => alert('Vertical with badge pressed')}
            style={{ flex: 1 }}
          />
        </View>
      </View>
      
      <View>
        <Typography variant="h4" style={{ marginBottom: 12 }}>
          Horizontal Layout
        </Typography>
        <View style={{ gap: 12 }}>
          <QuickAction
            title="Quick Message"
            subtitle="Send to teacher"
            icon="send"
            layout="horizontal"
            onPress={() => alert('Horizontal pressed')}
          />
          
          <QuickAction
            title="Emergency Contact"
            subtitle="Call school office"
            icon="call"
            layout="horizontal"
            badge={1}
            onPress={() => alert('Horizontal with badge pressed')}
          />
        </View>
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different layout options for various design needs.',
      },
    },
  },
};

// Badge examples
export const BadgeExamples: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16, flexWrap: 'wrap' }}>
      <QuickAction
        title="No Badge"
        subtitle="Normal action"
        icon="home"
        onPress={() => alert('No badge pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Small Badge"
        subtitle="Few notifications"
        icon="notifications"
        badge={3}
        onPress={() => alert('Small badge pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Large Badge"
        subtitle="Many notifications"
        icon="mail"
        badge={25}
        onPress={() => alert('Large badge pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Max Badge"
        subtitle="Too many notifications"
        icon="warning"
        badge={150}
        onPress={() => alert('Max badge pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Badge examples showing different notification counts and overflow handling.',
      },
    },
  },
};

// Disabled state
export const DisabledState: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16 }}>
      <QuickAction
        title="Enabled"
        subtitle="Normal state"
        icon="checkmark-circle"
        onPress={() => alert('Enabled pressed')}
        style={{ flex: 1 }}
      />
      
      <QuickAction
        title="Disabled"
        subtitle="Cannot interact"
        icon="ban"
        badge={5}
        disabled
        onPress={() => alert('This should not fire')}
        style={{ flex: 1 }}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Comparison between enabled and disabled quick actions.',
      },
    },
  },
};

// Student dashboard example
export const StudentDashboard: Story = {
  render: () => (
    <View>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Student Quick Actions
      </Typography>
      
      <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 16 }}>
        <QuickAction
          title="Schedule"
          subtitle="Today's classes"
          icon="calendar"
          onPress={() => alert('Navigate to schedule')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Assignments"
          subtitle="3 pending"
          icon="document-text"
          badge={3}
          onPress={() => alert('View assignments')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Grades"
          subtitle="View progress"
          icon="school"
          onPress={() => alert('View grades')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Messages"
          subtitle="New messages"
          icon="mail"
          badge={2}
          onPress={() => alert('View messages')}
          style={{ flex: 1, minWidth: 150 }}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of quick actions used in a student dashboard.',
      },
    },
  },
};

// Teacher dashboard example
export const TeacherDashboard: Story = {
  render: () => (
    <View>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Teacher Quick Actions
      </Typography>
      
      <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 16 }}>
        <QuickAction
          title="Classes"
          subtitle="Manage classes"
          icon="people"
          variant="primary"
          onPress={() => alert('Manage classes')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Attendance"
          subtitle="Mark attendance"
          icon="checkmark-circle"
          onPress={() => alert('Mark attendance')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Assignments"
          subtitle="Create & grade"
          icon="document-text"
          badge={5}
          onPress={() => alert('Manage assignments')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Reports"
          subtitle="Student reports"
          icon="bar-chart"
          onPress={() => alert('View reports')}
          style={{ flex: 1, minWidth: 150 }}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of quick actions used in a teacher dashboard.',
      },
    },
  },
};

// Parent dashboard example
export const ParentDashboard: Story = {
  render: () => (
    <View>
      <Typography variant="h3" style={{ marginBottom: 16 }}>
        Parent Quick Actions
      </Typography>
      
      <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 16 }}>
        <QuickAction
          title="Child Progress"
          subtitle="Ahmed's grades"
          icon="trending-up"
          variant="secondary"
          onPress={() => alert('View progress')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Attendance"
          subtitle="95% this month"
          icon="calendar-outline"
          onPress={() => alert('View attendance')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Messages"
          subtitle="From teachers"
          icon="mail"
          badge={1}
          onPress={() => alert('View messages')}
          style={{ flex: 1, minWidth: 150 }}
        />
        
        <QuickAction
          title="Payments"
          subtitle="Fee status"
          icon="card"
          onPress={() => alert('View payments')}
          style={{ flex: 1, minWidth: 150 }}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Example of quick actions used in a parent dashboard.',
      },
    },
  },
};

// Custom colors example
export const CustomColors: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', gap: 16, flexWrap: 'wrap' }}>
      <QuickAction
        title="Custom Purple"
        subtitle="Purple icon"
        icon="star"
        iconColor="#9c27b0"
        onPress={() => alert('Purple pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Custom Badge"
        subtitle="Orange badge"
        icon="notifications"
        badge={7}
        badgeColor="#ff5722"
        onPress={() => alert('Orange badge pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
      
      <QuickAction
        title="Both Custom"
        subtitle="Custom colors"
        icon="heart"
        iconColor="#e91e63"
        badge={12}
        badgeColor="#4caf50"
        onPress={() => alert('Both custom pressed')}
        style={{ flex: 1, minWidth: 120 }}
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Quick actions with custom icon and badge colors.',
      },
    },
  },
};
</file>

<file path="src/components/molecules/QuickAction/QuickAction.test.tsx">
/**
 * QuickAction Component Tests
 * Unit tests for the QuickAction component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { QuickAction } from './QuickAction';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('QuickAction Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders title correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title="Test Action"
            icon="home"
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('Test Action')).toBeTruthy();
    });

    it('renders title and subtitle correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title="Test Action"
            subtitle="Test subtitle"
            icon="home"
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('Test Action')).toBeTruthy();
      expect(getByText('Test subtitle')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Test Action"
            icon="home"
            onPress={() => {}}
            testID="test-quick-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('test-quick-action');
      expect(quickAction).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Default Action"
            icon="home"
            variant="default"
            onPress={() => {}}
            testID="default-variant"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('default-variant');
      expect(quickAction).toBeTruthy();
    });

    it('renders primary variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Primary Action"
            icon="star"
            variant="primary"
            onPress={() => {}}
            testID="primary-variant"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('primary-variant');
      expect(quickAction).toBeTruthy();
    });

    it('renders secondary variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Secondary Action"
            icon="heart"
            variant="secondary"
            onPress={() => {}}
            testID="secondary-variant"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('secondary-variant');
      expect(quickAction).toBeTruthy();
    });
  });

  // Size tests
  describe('Sizes', () => {
    it('renders small size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Small Action"
            icon="home"
            size="small"
            onPress={() => {}}
            testID="small-size"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('small-size');
      expect(quickAction).toBeTruthy();
    });

    it('renders medium size (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Medium Action"
            icon="home"
            size="medium"
            onPress={() => {}}
            testID="medium-size"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('medium-size');
      expect(quickAction).toBeTruthy();
    });

    it('renders large size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Large Action"
            icon="home"
            size="large"
            onPress={() => {}}
            testID="large-size"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('large-size');
      expect(quickAction).toBeTruthy();
    });
  });

  // Layout tests
  describe('Layout', () => {
    it('renders vertical layout (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Vertical Action"
            icon="home"
            layout="vertical"
            onPress={() => {}}
            testID="vertical-layout"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('vertical-layout');
      expect(quickAction).toBeTruthy();
    });

    it('renders horizontal layout', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Horizontal Action"
            icon="home"
            layout="horizontal"
            onPress={() => {}}
            testID="horizontal-layout"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('horizontal-layout');
      expect(quickAction).toBeTruthy();
    });
  });

  // Badge tests
  describe('Badge', () => {
    it('shows badge when badge prop is provided', () => {
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title="Badge Action"
            icon="mail"
            badge={5}
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('5')).toBeTruthy();
    });

    it('shows 99+ for badges over 99', () => {
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title="Large Badge Action"
            icon="notifications"
            badge={150}
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('99+')).toBeTruthy();
    });

    it('does not show badge when badge is 0', () => {
      const { queryByText } = render(
        <TestWrapper>
          <QuickAction
            title="No Badge Action"
            icon="home"
            badge={0}
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(queryByText('0')).toBeNull();
    });

    it('does not show badge when badge is not provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="No Badge Action"
            icon="home"
            onPress={() => {}}
            testID="no-badge-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('no-badge-action');
      expect(quickAction).toBeTruthy();
      // Badge should not be present
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles press events', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Interactive Action"
            icon="home"
            onPress={mockOnPress}
            testID="interactive-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('interactive-action');
      fireEvent.press(quickAction);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('does not handle press events when disabled', () => {
      const mockOnPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Disabled Action"
            icon="ban"
            onPress={mockOnPress}
            disabled
            testID="disabled-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('disabled-action');
      fireEvent.press(quickAction);
      expect(mockOnPress).not.toHaveBeenCalled();
    });
  });

  // State tests
  describe('States', () => {
    it('applies disabled state', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Disabled Action"
            icon="ban"
            onPress={() => {}}
            disabled
            testID="disabled-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('disabled-action');
      expect(quickAction).toBeTruthy();
    });
  });

  // Custom colors tests
  describe('Custom Colors', () => {
    it('accepts custom icon color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Custom Icon Color"
            icon="star"
            iconColor="#ff0000"
            onPress={() => {}}
            testID="custom-icon-color"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('custom-icon-color');
      expect(quickAction).toBeTruthy();
    });

    it('accepts custom badge color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Custom Badge Color"
            icon="notifications"
            badge={5}
            badgeColor="#00ff00"
            onPress={() => {}}
            testID="custom-badge-color"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('custom-badge-color');
      expect(quickAction).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility role', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Accessible Action"
            icon="home"
            onPress={() => {}}
            testID="accessible-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('accessible-action');
      expect(quickAction.props.accessibilityRole).toBe('button');
    });

    it('generates accessibility label from title only', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Test Action"
            icon="home"
            onPress={() => {}}
            testID="title-only-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('title-only-action');
      expect(quickAction.props.accessibilityLabel).toBe('Test Action');
    });

    it('generates accessibility label from title and subtitle', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Test Action"
            subtitle="Test subtitle"
            icon="home"
            onPress={() => {}}
            testID="title-subtitle-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('title-subtitle-action');
      expect(quickAction.props.accessibilityLabel).toBe('Test Action, Test subtitle');
    });

    it('includes badge count in accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Badge Action"
            subtitle="With badge"
            icon="mail"
            badge={3}
            onPress={() => {}}
            testID="badge-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('badge-action');
      expect(quickAction.props.accessibilityLabel).toBe('Badge Action, With badge, 3 notifications');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Custom Label Action"
            icon="home"
            accessibilityLabel="Custom accessibility label"
            onPress={() => {}}
            testID="custom-label-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('custom-label-action');
      expect(quickAction.props.accessibilityLabel).toBe('Custom accessibility label');
    });

    it('applies accessibility hint', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Hinted Action"
            icon="home"
            accessibilityHint="Tap to perform action"
            onPress={() => {}}
            testID="hinted-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('hinted-action');
      expect(quickAction.props.accessibilityHint).toBe('Tap to perform action');
    });

    it('sets correct accessibility state for disabled actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Disabled Action"
            icon="ban"
            onPress={() => {}}
            disabled
            testID="disabled-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('disabled-action');
      expect(quickAction.props.accessibilityState.disabled).toBe(true);
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <QuickAction
            title="Custom Styled Action"
            icon="home"
            style={customStyle}
            onPress={() => {}}
            testID="custom-styled-action"
          />
        </TestWrapper>
      );

      const quickAction = getByTestId('custom-styled-action');
      expect(quickAction).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles long titles gracefully', () => {
      const longTitle = 'This is a very long action title that should be truncated properly';
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title={longTitle}
            icon="home"
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText(longTitle)).toBeTruthy();
    });

    it('handles long subtitles gracefully', () => {
      const longSubtitle = 'This is a very long subtitle that should be truncated';
      const { getByText } = render(
        <TestWrapper>
          <QuickAction
            title="Short Title"
            subtitle={longSubtitle}
            icon="home"
            onPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText(longSubtitle)).toBeTruthy();
    });

    it('handles negative badge values', () => {
      const { queryByText } = render(
        <TestWrapper>
          <QuickAction
            title="Negative Badge"
            icon="home"
            badge={-5}
            onPress={() => {}}
          />
        </TestWrapper>
      );

      // Negative badges should not be shown
      expect(queryByText('-5')).toBeNull();
    });
  });
});
</file>

<file path="src/components/molecules/QuickAction/QuickAction.tsx">
/**
 * QuickAction Component
 * Consistent dashboard action button with grid layout and visual hierarchy
 */

import React from 'react';
import {
  TouchableOpacity,
  View,
  ViewStyle,
  StyleSheet,
  TouchableOpacityProps,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';

// QuickAction Props Interface
export interface QuickActionProps extends Omit<TouchableOpacityProps, 'style'> {
  // Content
  title: string;
  subtitle?: string;
  
  // Icon
  icon: keyof typeof Ionicons.glyphMap;
  iconColor?: string;
  
  // Badge
  badge?: number;
  badgeColor?: string;
  
  // Visual options
  variant?: 'default' | 'primary' | 'secondary';
  size?: 'small' | 'medium' | 'large';
  
  // Layout
  layout?: 'vertical' | 'horizontal';
  
  // Interactive
  onPress: () => void;
  disabled?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
  
  // Test ID
  testID?: string;
}

// QuickAction Component
export const QuickAction: React.FC<QuickActionProps> = ({
  title,
  subtitle,
  icon,
  iconColor,
  badge,
  badgeColor,
  variant = 'default',
  size = 'medium',
  layout = 'vertical',
  onPress,
  disabled = false,
  style,
  accessibilityLabel,
  accessibilityHint,
  testID,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get container styles based on size and variant
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      borderRadius: theme.borderRadius.lg,
      alignItems: layout === 'vertical' ? 'center' : 'flex-start',
      justifyContent: 'center',
      backgroundColor: colors.surface.primary,
      ...theme.shadows.card,
    };

    // Size-specific styles
    const sizeStyles = {
      small: {
        minHeight: 80,
        padding: theme.spacing.base.sm,
      },
      medium: {
        minHeight: 100,
        padding: theme.spacing.base.md,
      },
      large: {
        minHeight: 120,
        padding: theme.spacing.base.lg,
      },
    };

    // Variant-specific styles
    const variantStyles = {
      default: {
        borderWidth: 1,
        borderColor: colors.border.primary,
      },
      primary: {
        backgroundColor: colors.primary.main,
        borderWidth: 0,
      },
      secondary: {
        backgroundColor: colors.secondary.main,
        borderWidth: 0,
      },
    };

    return {
      ...baseStyle,
      ...sizeStyles[size],
      ...variantStyles[variant],
      ...(layout === 'horizontal' && {
        flexDirection: 'row',
        alignItems: 'center',
      }),
      opacity: disabled ? 0.6 : 1,
    };
  };

  // Get icon size based on component size
  const getIconSize = (): 'sm' | 'md' | 'lg' | 'xl' => {
    const iconSizes = {
      small: 'md' as const,
      medium: 'lg' as const,
      large: 'xl' as const,
    };
    return iconSizes[size];
  };

  // Get icon color based on variant
  const getIconColor = (): string => {
    if (iconColor) return iconColor;
    
    if (disabled) return colors.text.disabled;
    
    const variantIconColors = {
      default: colors.primary.main,
      primary: colors.primary.contrast,
      secondary: colors.secondary.contrast,
    };
    
    return variantIconColors[variant];
  };

  // Get text color based on variant
  const getTextColor = (): 'primary' | 'secondary' | 'disabled' | string => {
    if (disabled) return 'disabled';
    
    const variantTextColors = {
      default: 'primary' as const,
      primary: colors.primary.contrast,
      secondary: colors.secondary.contrast,
    };
    
    return variantTextColors[variant];
  };

  // Get subtitle text color
  const getSubtitleColor = (): 'secondary' | 'disabled' | string => {
    if (disabled) return 'disabled';
    
    const variantSubtitleColors = {
      default: 'secondary' as const,
      primary: colors.primary.contrast,
      secondary: colors.secondary.contrast,
    };
    
    return variantSubtitleColors[variant];
  };

  // Get content container styles
  const getContentStyles = (): ViewStyle => {
    return {
      flex: layout === 'horizontal' ? 1 : undefined,
      alignItems: layout === 'vertical' ? 'center' : 'flex-start',
      marginLeft: layout === 'horizontal' ? theme.spacing.base.sm : 0,
      marginTop: layout === 'vertical' ? theme.spacing.base.xs : 0,
    };
  };

  // Get badge styles
  const getBadgeStyles = (): ViewStyle => {
    const badgeSize = 20;
    
    return {
      position: 'absolute',
      top: -4,
      right: -4,
      minWidth: badgeSize,
      height: badgeSize,
      borderRadius: badgeSize / 2,
      backgroundColor: badgeColor || colors.error.main,
      alignItems: 'center',
      justifyContent: 'center',
      paddingHorizontal: 6,
    };
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    
    let label = title;
    if (subtitle) label += `, ${subtitle}`;
    if (badge && badge > 0) label += `, ${badge} notifications`;
    
    return label;
  };

  // Render badge
  const renderBadge = () => {
    if (!badge || badge <= 0) return null;
    
    return (
      <View style={getBadgeStyles()}>
        <Typography
          variant="caption"
          color={colors.error.contrast}
          style={{
            fontSize: 12,
            fontWeight: 'bold',
            lineHeight: 12,
          }}
        >
          {badge > 99 ? '99+' : badge.toString()}
        </Typography>
      </View>
    );
  };

  // Render icon with badge
  const renderIconWithBadge = () => {
    return (
      <View style={{ position: 'relative' }}>
        <Icon
          name={icon}
          size={getIconSize()}
          color={getIconColor()}
        />
        {renderBadge()}
      </View>
    );
  };

  // Render content
  const renderContent = () => {
    return (
      <View style={getContentStyles()}>
        <Typography
          variant={size === 'small' ? 'body2' : 'body1'}
          weight="medium"
          color={getTextColor()}
          align={layout === 'vertical' ? 'center' : 'left'}
          numberOfLines={2}
          ellipsizeMode="tail"
        >
          {title}
        </Typography>
        
        {subtitle && (
          <Typography
            variant="caption"
            color={getSubtitleColor()}
            align={layout === 'vertical' ? 'center' : 'left'}
            numberOfLines={1}
            ellipsizeMode="tail"
            style={{ marginTop: 2 }}
          >
            {subtitle}
          </Typography>
        )}
      </View>
    );
  };

  return (
    <TouchableOpacity
      style={[getContainerStyles(), style]}
      onPress={disabled ? undefined : onPress}
      disabled={disabled}
      accessibilityRole="button"
      accessibilityLabel={getAccessibilityLabel()}
      accessibilityHint={accessibilityHint}
      accessibilityState={{ disabled }}
      testID={testID}
      activeOpacity={0.7}
      {...props}
    >
      {renderIconWithBadge()}
      {renderContent()}
    </TouchableOpacity>
  );
};

// Export default
export default QuickAction;
</file>

<file path="src/services/dashboard.ts">
import { supabase } from '../utils/supabase';
import { getStudentCount, getTeacherCount } from './users';

/**
 * Interface for dashboard metrics
 */
export interface DashboardMetrics {
  studentEnrollment: number;
  teacherCount: number;
  teacherToStudentRatio: number;
  incidentSummary: {
    total: number;
    pending: number;
    resolved: number;
  };
  academicPerformance: {
    averageScore: number;
  };
  teacherPerformance: {
    averageScore: number;
  };
  studentAttendance: {
    averagePercentage: number;
  };
  parentEngagement: {
    meetingsHeld: number;
  };
}

/**
 * Fetch dashboard metrics for a specific school
 * @param schoolId The ID of the school to fetch metrics for
 * @returns Dashboard metrics data
 */
export async function fetchDashboardMetrics(schoolId: number): Promise<{ data: DashboardMetrics | null; error: any }> {
  try {
    // Fetch student count (optimized - count only, no full records)
    const studentCountResponse = await getStudentCount(schoolId);
    if (studentCountResponse.error) {
      throw new Error(`Failed to fetch student count: ${studentCountResponse.error.message}`);
    }
    const studentCount = studentCountResponse.data || 0;

    // Fetch teacher count (optimized - count only, no full records)
    const teacherCountResponse = await getTeacherCount(schoolId);
    if (teacherCountResponse.error) {
      throw new Error(`Failed to fetch teacher count: ${teacherCountResponse.error.message}`);
    }
    const teacherCount = teacherCountResponse.data || 0;

    // Calculate teacher-to-student ratio (students per teacher)
    const teacherToStudentRatio = teacherCount > 0
      ? parseFloat((studentCount / teacherCount).toFixed(2))
      : 0;

    // Fetch incident summary
    const incidentsResponse = await supabase
      .from('incidents')
      .select('id, status')
      .eq('school_id', schoolId);
    if (incidentsResponse.error) {
      throw new Error(`Failed to fetch incidents: ${incidentsResponse.error.message}`);
    }
    const incidents = incidentsResponse.data || [];
    const totalIncidents = incidents.length;
    const pendingIncidents = incidents.filter(i => i.status === 'pending').length;
    const resolvedIncidents = incidents.filter(i => i.status !== 'pending').length;

    // Fetch academic performance (average across student_performance joined with profiles)
    const academicResponse = await supabase
      .from('student_performance')
      .select(`
        academic_score,
        profiles!inner(school_id)
      `)
      .eq('profiles.school_id', schoolId);
    if (academicResponse.error) {
      throw new Error(`Failed to fetch academic performance: ${academicResponse.error.message}`);
    }
    const academicScores = academicResponse.data?.map(p => p.academic_score).filter(score => score !== null) || [];
    const averageAcademicScore = academicScores.length > 0 
      ? parseFloat((academicScores.reduce((a, b) => a + b, 0) / academicScores.length).toFixed(2)) 
      : 0;

    // Fetch teacher performance (average across teacher_performance joined with profiles)
    const teacherPerfResponse = await supabase
      .from('teacher_performance')
      .select(`
        class_observation,
        punctuality_score,
        profiles!inner(school_id)
      `)
      .eq('profiles.school_id', schoolId);
    if (teacherPerfResponse.error) {
      throw new Error(`Failed to fetch teacher performance: ${teacherPerfResponse.error.message}`);
    }
    const teacherScores = teacherPerfResponse.data?.map(p => {
      const obs = p.class_observation || 0;
      const punct = p.punctuality_score || 0;
      return (obs + punct) / 2; // Simple average of the two metrics
    }).filter(score => score > 0) || [];
    const averageTeacherScore = teacherScores.length > 0 
      ? parseFloat((teacherScores.reduce((a, b) => a + b, 0) / teacherScores.length).toFixed(2)) 
      : 0;

    // Fetch student attendance (average across student_performance joined with profiles)
    const attendanceResponse = await supabase
      .from('student_performance')
      .select(`
        attendance_pct,
        profiles!inner(school_id)
      `)
      .eq('profiles.school_id', schoolId);
    if (attendanceResponse.error) {
      throw new Error(`Failed to fetch attendance data: ${attendanceResponse.error.message}`);
    }
    const attendanceRates = attendanceResponse.data?.map(p => p.attendance_pct).filter(rate => rate !== null) || [];
    const averageAttendance = attendanceRates.length > 0 
      ? parseFloat((attendanceRates.reduce((a, b) => a + b, 0) / attendanceRates.length).toFixed(2)) 
      : 0;

    // Placeholder for parent engagement (mock data until real data source is available)
    const parentEngagement = {
      meetingsHeld: 0 // TODO: Implement actual data source for parent meetings or communications
    };

    const metrics: DashboardMetrics = {
      studentEnrollment: studentCount,
      teacherCount: teacherCount,
      teacherToStudentRatio: teacherToStudentRatio,
      incidentSummary: {
        total: totalIncidents,
        pending: pendingIncidents,
        resolved: resolvedIncidents
      },
      academicPerformance: {
        averageScore: averageAcademicScore
      },
      teacherPerformance: {
        averageScore: averageTeacherScore
      },
      studentAttendance: {
        averagePercentage: averageAttendance
      },
      parentEngagement: parentEngagement
    };

    return { data: metrics, error: null };
  } catch (err) {
    console.error('Service error fetching dashboard metrics:', err);
    return { data: null, error: err };
  }
}
</file>

<file path="src/services/schools.ts">
import { supabase } from '../utils/supabase';

/**
 * Interface for school data
 */
export interface School {
  id?: number;
  name: string;
  npsn: string;
  address: string;
  phone: string;
  email: string;
  website?: string;
  created_at?: string;
  updated_at?: string;
}

/**
 * Fetch school data by ID
 * @param schoolId The ID of the school to fetch
 * @returns School data
 */
export async function fetchSchoolById(schoolId: number): Promise<{ data: School | null; error: any }> {
  try {
    const { data, error } = await supabase
      .from('schools')
      .select('*')
      .eq('id', schoolId)
      .single();

    if (error) {
      console.error('Error fetching school by ID:', error);
      return { data: null, error };
    }

    return { data, error: null };
  } catch (err) {
    console.error('Service error fetching school by ID:', err);
    return { data: null, error: err };
  }
}

/**
 * Create or update school information
 * @param schoolData The school data to save
 * @param schoolId Optional ID of the school to update; if not provided, a new school will be created
 * @returns The saved school data
 */
export async function saveSchool(schoolData: School, schoolId?: number): Promise<{ data: School | null; error: any }> {
  try {
    let result;
    if (schoolId) {
      // Update existing school
      result = await supabase
        .from('schools')
        .update(schoolData)
        .eq('id', schoolId)
        .select('*')
        .single();
    } else {
      // Create new school
      result = await supabase
        .from('schools')
        .insert(schoolData)
        .select('*')
        .single();
    }

    const { data, error } = result;

    if (error) {
      console.error('Error saving school:', error);
      return { data: null, error };
    }

    return { data, error: null };
  } catch (err) {
    console.error('Service error saving school:', err);
    return { data: null, error: err };
  }
}
</file>

<file path="src/services/users.ts">
import { supabase } from '../utils/supabase';
import { Student, Teacher, Profile, StudentWithDetails, LegacyStudent, StudentWithRelations } from '../types';

/**
 * Fetch all students for a school using the new unified schema
 * Uses the compatibility view or joins profiles + student_details
 */
export async function fetchStudents(schoolId: number, limit?: number): Promise<{ data: Student[] | null; error: any }> {
  try {
    if (process.env.NODE_ENV === 'development') {
      console.log('fetchStudents called with schoolId:', schoolId, 'limit:', limit);
    }
    
    let query = supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        role,
        school_id,
        created_at,
        updated_at,
        student_details (
          user_id,
          nis,
          date_of_birth,
          gender,
          boarding,
          created_at,
          updated_at
        )
      `)
      .eq('role', 'student')
      .eq('school_id', schoolId)
      .order('full_name');

    if (limit) {
      query = query.limit(limit);
    }

    if (process.env.NODE_ENV === 'development') {
      console.log('About to execute supabase query...');
    }
    const { data, error } = await query;
    if (process.env.NODE_ENV === 'development') {
      console.log('Raw supabase response - data:', data, 'error:', error);
    }

    if (error) {
      console.error('Error fetching students:', error);
      return { data: null, error };
    }

    // Transform to Student interface
    const students: Student[] = data?.map((profile: any) => ({
      ...profile,
      details: profile.student_details?.[0] || undefined,
      // For backward compatibility, map common fields
      quran_progress: {
        memorized_verses: 0, // TODO: Get from actual progress tracking
        total_verses: 6236   // Standard Quran verse count
      }
    })) || [];

    return { data: students, error: null };
  } catch (err) {
    console.error('Service error fetching students:', err);
    return { data: null, error: err };
  }
}

/**
 * Fetch a single student by ID with all details
 */
export async function fetchStudentById(studentId: string): Promise<{ data: Student | null; error: any }> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        role,
        school_id,
        created_at,
        updated_at,
        student_details (
          user_id,
          nis,
          date_of_birth,
          gender,
          boarding,
          created_at,
          updated_at
        ),
        student_performance (
          id,
          user_id,
          period_start,
          period_end,
          academic_score,
          quran_score,
          attendance_pct,
          created_at
        ),
        class_students!left (
          classes (
            name
          )
        ),
        student_parent!left (
          parent_profile:profiles!inner (
            full_name,
            parent_details (
              phone_number,
              address
            )
          )
        )
      `)
      .eq('id', studentId)
      .eq('role', 'student')
      .single<StudentWithRelations>();

    if (error) {
      console.error('Error fetching student by ID:', error);
      return { data: null, error };
    }

    if (!data) {
      return { data: null, error: { message: 'Student not found' } };
    }

    // Transform to Student interface by explicitly mapping fields
    const student: Student = {
      // Base profile fields
      id: data.id,
      full_name: data.full_name,
      role: 'student',
      school_id: data.school_id,
      created_at: data.created_at,
      updated_at: data.updated_at,
      
      // Mapped-in fields for Student
      details: data.student_details?.[0] || undefined,
      performance: data.student_performance || [],
      class_name: data.class_students?.[0]?.classes?.name,
      parent_name: data.student_parent?.[0]?.parent_profile?.full_name,
      parent_phone: data.student_parent?.[0]?.parent_profile?.parent_details?.[0]?.phone_number ?? undefined,
      address: data.student_parent?.[0]?.parent_profile?.parent_details?.[0]?.address ?? undefined,
      quran_progress: {
        memorized_verses: 0, // TODO: Get from actual progress tracking
        total_verses: 6236
      }
    };

    return { data: student, error: null };
  } catch (err) {
    console.error('Service error fetching student by ID:', err);
    return { data: null, error: err };
  }
}

/**
 * Fetch all teachers for a school
 */
export async function fetchTeachers(schoolId: number, limit?: number): Promise<{ data: Teacher[] | null; error: any }> {
  try {
    let query = supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        role,
        school_id,
        created_at,
        updated_at,
        teacher_details (
          user_id,
          employee_id,
          hire_date,
          specialty,
          created_at,
          updated_at
        )
      `)
      .eq('role', 'teacher')
      .eq('school_id', schoolId)
      .order('full_name');

    if (limit) {
      query = query.limit(limit);
    }

    const { data, error } = await query;

    if (error) {
      console.error('Error fetching teachers:', error);
      return { data: null, error };
    }

    // Transform to Teacher interface
    const teachers: Teacher[] = data?.map((profile: any) => ({
      ...profile,
      details: profile.teacher_details?.[0] || undefined
    })) || [];

    return { data: teachers, error: null };
  } catch (err) {
    console.error('Service error fetching teachers:', err);
    return { data: null, error: err };
  }
}

/**
 * Legacy compatibility function that returns students in the old format
 * This helps ease the transition for existing components
 */
export async function fetchStudentsLegacyFormat(schoolId: number, limit?: number): Promise<{ data: LegacyStudent[] | null; error: any }> {
  const { data: students, error } = await fetchStudents(schoolId, limit);
  
  if (error || !students) {
    return { data: null, error };
  }

  // Transform to legacy format
  const legacyStudents: LegacyStudent[] = students.map(student => ({
    id: student.id,
    name: student.full_name,
    class: '', // TODO: Get class assignment from class_students table
    image_url: '', // TODO: Add profile images if needed
    quran_progress: student.quran_progress,
    gender: student.details?.gender,
    birth_date: student.details?.date_of_birth,
    parent_name: '', // TODO: Get from parent relationship if needed
    phone: '', // TODO: Get from student_details or parent_details
    address: '' // TODO: Get from student_details
  }));

  return { data: legacyStudents, error: null };
}

/**
 * Fetch user profile by ID (works for any role)
 */
export async function fetchUserProfile(userId: string): Promise<{ data: Profile | null; error: any }> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('Error fetching user profile:', error);
      return { data: null, error };
    }

    return { data, error: null };
  } catch (err) {
    console.error('Service error fetching user profile:', err);
    return { data: null, error: err };
  }
}

/**
 * Search students by name
 */
export async function searchStudents(schoolId: number, searchTerm: string, limit: number = 10): Promise<{ data: Student[] | null; error: any }> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select(`
        id,
        full_name,
        role,
        school_id,
        created_at,
        updated_at,
        student_details (
          user_id,
          nis,
          date_of_birth,
          gender,
          boarding,
          created_at,
          updated_at
        )
      `)
      .eq('role', 'student')
      .eq('school_id', schoolId)
      .ilike('full_name', `%${searchTerm}%`)
      .limit(limit)
      .order('full_name');

    if (error) {
      console.error('Error searching students:', error);
      return { data: null, error };
    }

    // Transform to Student interface
    const students: Student[] = data?.map((profile: any) => ({
      ...profile,
      details: profile.student_details?.[0] || undefined,
      quran_progress: {
        memorized_verses: 0,
        total_verses: 6236
      }
    })) || [];

    return { data: students, error: null };
  } catch (err) {
    console.error('Service error searching students:', err);
    return { data: null, error: err };
  }
}

/**
 * Get count of students for a school (optimized for dashboard metrics)
 * @param schoolId The school ID to count students for
 * @returns Promise with student count
 */
export async function getStudentCount(schoolId: number): Promise<{ data: number | null; error: any }> {
  try {
    const { count, error } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true })
      .eq('role', 'student')
      .eq('school_id', schoolId);

    if (error) {
      console.error('Error counting students:', error);
      return { data: null, error };
    }

    return { data: count || 0, error: null };
  } catch (err) {
    console.error('Service error counting students:', err);
    return { data: null, error: err };
  }
}

/**
 * Get count of teachers for a school (optimized for dashboard metrics)
 * @param schoolId The school ID to count teachers for
 * @returns Promise with teacher count
 */
export async function getTeacherCount(schoolId: number): Promise<{ data: number | null; error: any }> {
  try {
    const { count, error } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true })
      .eq('role', 'teacher')
      .eq('school_id', schoolId);

    if (error) {
      console.error('Error counting teachers:', error);
      return { data: null, error };
    }

    return { data: count || 0, error: null };
  } catch (err) {
    console.error('Service error counting teachers:', err);
    return { data: null, error: err };
  }
}
</file>

<file path="src/styles/shadows.ts">
/**
 * Shadow Design Tokens
 * Elevation system for depth and hierarchy using consistent shadow definitions
 */

import { Platform } from 'react-native';

// Shadow Style Interface
export interface ShadowStyle {
    shadowColor: string;
    shadowOffset: {
        width: number;
        height: number;
    };
    shadowOpacity: number;
    shadowRadius: number;
    elevation: number; // Android elevation
}

// Base Shadow Definitions
const baseShadows = {
    none: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 0 },
        shadowOpacity: 0,
        shadowRadius: 0,
        elevation: 0,
    },
    xs: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 2,
        elevation: 1,
    },
    sm: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
        elevation: 2,
    },
    md: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 8,
        elevation: 4,
    },
    lg: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.2,
        shadowRadius: 16,
        elevation: 8,
    },
    xl: {
        shadowColor: '#000000',
        shadowOffset: { width: 0, height: 12 },
        shadowOpacity: 0.25,
        shadowRadius: 24,
        elevation: 12,
    },
} as const;

// Semantic Shadow Mappings
export const semanticShadows = {
    // Component-specific shadows
    card: baseShadows.sm,           // Standard card elevation
    cardHover: baseShadows.md,      // Card hover state
    button: baseShadows.xs,         // Button elevation
    buttonPressed: baseShadows.none, // Button pressed state
    modal: baseShadows.xl,          // Modal overlay
    header: baseShadows.xs,         // Header elevation
    tabBar: baseShadows.sm,         // Tab bar elevation

    // Interactive shadows
    interactive: {
        rest: baseShadows.xs,         // Default interactive element
        hover: baseShadows.sm,        // Hover state
        pressed: baseShadows.none,    // Pressed state
        focus: baseShadows.md,        // Focus state
    },

    // Notification shadows
    notification: baseShadows.lg,   // Notification panel
    toast: baseShadows.md,          // Toast messages

    // Overlay shadows
    overlay: baseShadows.xl,        // Full screen overlays
    dropdown: baseShadows.lg,       // Dropdown menus
    tooltip: baseShadows.md,        // Tooltips
} as const;

// Platform-specific shadow adjustments
const getPlatformShadow = (shadow: ShadowStyle): ShadowStyle => {
    if (Platform.OS === 'android') {
        // Android uses elevation, reduce shadow opacity
        return {
            ...shadow,
            shadowOpacity: shadow.shadowOpacity * 0.5,
        };
    }
    return shadow;
};

// Export shadows with platform adjustments
export const shadows = {
    // Base shadows
    none: getPlatformShadow(baseShadows.none),
    xs: getPlatformShadow(baseShadows.xs),
    sm: getPlatformShadow(baseShadows.sm),
    md: getPlatformShadow(baseShadows.md),
    lg: getPlatformShadow(baseShadows.lg),
    xl: getPlatformShadow(baseShadows.xl),

    // Component-specific shadows
    card: getPlatformShadow(semanticShadows.card),
    cardHover: getPlatformShadow(semanticShadows.cardHover),
    button: getPlatformShadow(semanticShadows.button),
    buttonPressed: getPlatformShadow(semanticShadows.buttonPressed),
    modal: getPlatformShadow(semanticShadows.modal),
    header: getPlatformShadow(semanticShadows.header),
    tabBar: getPlatformShadow(semanticShadows.tabBar),

    // Interactive shadows
    interactive: {
        rest: getPlatformShadow(semanticShadows.interactive.rest),
        hover: getPlatformShadow(semanticShadows.interactive.hover),
        pressed: getPlatformShadow(semanticShadows.interactive.pressed),
        focus: getPlatformShadow(semanticShadows.interactive.focus),
    },

    // Notification shadows
    notification: getPlatformShadow(semanticShadows.notification),
    toast: getPlatformShadow(semanticShadows.toast),

    // Overlay shadows
    overlay: getPlatformShadow(semanticShadows.overlay),
    dropdown: getPlatformShadow(semanticShadows.dropdown),
    tooltip: getPlatformShadow(semanticShadows.tooltip),
} as const;

// Type definitions
export type ShadowKey = keyof typeof shadows;
export type SemanticShadowKey = keyof typeof semanticShadows;

// Helper functions
export const getShadow = (key: ShadowKey): ShadowStyle => {
    const shadow = shadows[key];
    if (key === 'interactive') {
        return (shadow as typeof shadows['interactive']).rest;
    }
    return shadow as ShadowStyle;
};

export const getSemanticShadow = (key: SemanticShadowKey) => {
    return shadows[key];
};

// Shadow utilities for common patterns
export const shadowUtils = {
    // Create shadow styles for components
    card: () => shadows.card,
    cardHover: () => shadows.cardHover,
    button: () => shadows.button,
    modal: () => shadows.modal,

    // Create custom shadow with specific elevation
    custom: (elevation: number): ShadowStyle => {
        const baseOpacity = 0.1;
        const maxOpacity = 0.3;
        const opacity = Math.min(baseOpacity + (elevation * 0.02), maxOpacity);

        return getPlatformShadow({
            shadowColor: '#000000',
            shadowOffset: { width: 0, height: elevation },
            shadowOpacity: opacity,
            shadowRadius: elevation * 2,
            elevation: elevation,
        });
    },

    // Combine multiple shadows (iOS only)
    combine: (...shadowKeys: ShadowKey[]): ShadowStyle => {
        // Filter to only include keys that map to ShadowStyle objects (not nested objects)
        const validShadowKeys = shadowKeys.filter(key => {
            const shadow = shadows[key];
            return shadow && typeof shadow === 'object' && 'shadowRadius' in shadow;
        }) as Array<keyof Pick<typeof shadows, 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'card' | 'cardHover' | 'button' | 'buttonPressed' | 'modal' | 'header' | 'tabBar' | 'notification' | 'toast' | 'overlay' | 'dropdown' | 'tooltip'>>;

        if (validShadowKeys.length === 0) {
            return shadows.none;
        }

        if (Platform.OS === 'android') {
            // Android doesn't support multiple shadows, use the strongest one
            const strongestShadow = validShadowKeys.reduce((strongest, current) => {
                const currentShadow = shadows[current] as ShadowStyle;
                const strongestShadow = shadows[strongest] as ShadowStyle;
                return currentShadow.elevation > strongestShadow.elevation ? current : strongest;
            });
            return shadows[strongestShadow] as ShadowStyle;
        }

        // For iOS, we can only return one shadow, so use the strongest
        const strongestShadow = validShadowKeys.reduce((strongest, current) => {
            const currentShadow = shadows[current] as ShadowStyle;
            const strongestShadow = shadows[strongest] as ShadowStyle;
            return currentShadow.shadowRadius > strongestShadow.shadowRadius ? current : strongest;
        });
        return shadows[strongestShadow] as ShadowStyle;
    },
} as const;

// Elevation levels for consistent z-index management
export const elevationLevels = {
    background: 0,
    surface: 1,
    card: 2,
    button: 3,
    header: 10,
    tabBar: 10,
    modal: 100,
    overlay: 1000,
    toast: 2000,
} as const;

export type ElevationLevel = keyof typeof elevationLevels;
</file>

<file path="src/styles/spacing.ts">
/**
 * Spacing Design Tokens
 * Consistent spacing scale for margins, padding, and gaps
 */

// Base Spacing Scale (in pixels)
// Following 8px grid system for consistent spacing
export const spacing = {
  xs: 4,   // Extra small spacing
  sm: 8,   // Small spacing
  md: 16,  // Medium spacing (base unit)
  lg: 24,  // Large spacing
  xl: 32,  // Extra large spacing
  '2xl': 48, // 2x extra large spacing
  '3xl': 64, // 3x extra large spacing
} as const;

// Semantic Spacing Mappings
export const semanticSpacing = {
  // Component Internal Spacing
  component: {
    xs: spacing.xs,   // 4px - minimal internal spacing
    sm: spacing.sm,   // 8px - small internal spacing
    md: spacing.md,   // 16px - standard internal spacing
    lg: spacing.lg,   // 24px - large internal spacing
  },
  
  // Layout Spacing
  layout: {
    xs: spacing.sm,   // 8px - tight layout spacing
    sm: spacing.md,   // 16px - standard layout spacing
    md: spacing.lg,   // 24px - comfortable layout spacing
    lg: spacing.xl,   // 32px - spacious layout spacing
    xl: spacing['2xl'], // 48px - section spacing
    '2xl': spacing['3xl'], // 64px - page spacing
  },
  
  // Container Padding
  container: {
    xs: spacing.sm,   // 8px - minimal container padding
    sm: spacing.md,   // 16px - standard container padding
    md: spacing.lg,   // 24px - comfortable container padding
    lg: spacing.xl,   // 32px - spacious container padding
  },
  
  // Card Spacing
  card: {
    xs: spacing.sm,   // 8px - minimal card padding
    sm: spacing.md,   // 16px - standard card padding
    md: spacing.lg,   // 24px - comfortable card padding
    lg: spacing.xl,   // 32px - spacious card padding
  },
  
  // Button Spacing
  button: {
    xs: spacing.xs,   // 4px - minimal button padding
    sm: spacing.sm,   // 8px - small button padding
    md: spacing.md,   // 16px - standard button padding
    lg: spacing.lg,   // 24px - large button padding
  },
  
  // Input Spacing
  input: {
    xs: spacing.sm,   // 8px - minimal input padding
    sm: spacing.md,   // 16px - standard input padding
    md: spacing.lg,   // 24px - comfortable input padding
  },
  
  // List Item Spacing
  listItem: {
    xs: spacing.sm,   // 8px - minimal list item padding
    sm: spacing.md,   // 16px - standard list item padding
    md: spacing.lg,   // 24px - comfortable list item padding
  },
} as const;

// Grid System Spacing
export const gridSpacing = {
  // Gap between grid items
  gap: {
    xs: spacing.xs,   // 4px
    sm: spacing.sm,   // 8px
    md: spacing.md,   // 16px
    lg: spacing.lg,   // 24px
  },
  
  // Column spacing
  column: {
    xs: spacing.sm,   // 8px
    sm: spacing.md,   // 16px
    md: spacing.lg,   // 24px
    lg: spacing.xl,   // 32px
  },
} as const;

// Screen Edge Spacing (safe areas)
export const screenSpacing = {
  horizontal: spacing.md, // 16px - standard horizontal screen padding
  vertical: spacing.lg,   // 24px - standard vertical screen padding
  top: spacing.lg,        // 24px - top safe area
  bottom: spacing.lg,     // 24px - bottom safe area
} as const;

// Component-specific Spacing Presets
export const componentSpacing = {
  // Header spacing
  header: {
    horizontal: spacing.md, // 16px
    vertical: spacing.md,   // 16px
    height: 60,             // Standard header height
  },
  
  // Tab bar spacing
  tabBar: {
    horizontal: spacing.sm, // 8px
    vertical: spacing.sm,   // 8px
    height: 60,             // Standard tab bar height
  },
  
  // Modal spacing
  modal: {
    padding: spacing.lg,    // 24px
    margin: spacing.md,     // 16px
    borderRadius: spacing.lg, // 24px (will be overridden by border radius tokens)
  },
  
  // Quick action grid
  quickAction: {
    gap: spacing.md,        // 16px - gap between quick actions
    padding: spacing.md,    // 16px - internal padding
  },
  
  // Welcome banner
  welcomeBanner: {
    padding: spacing.lg,    // 24px
    margin: spacing.md,     // 16px
  },
  
  // Section containers
  section: {
    marginBottom: spacing.lg, // 24px - space between sections
    padding: spacing.md,      // 16px - internal section padding
  },
} as const;

// Export all spacing tokens
export const spacingTokens = {
  base: spacing,
  semantic: semanticSpacing,
  grid: gridSpacing,
  screen: screenSpacing,
  component: componentSpacing,
} as const;

// Type definitions
export type SpacingKey = keyof typeof spacing;
export type SemanticSpacingCategory = keyof typeof semanticSpacing;
export type ComponentSpacingKey = keyof typeof componentSpacing;

// Helper functions
export const getSpacing = (size: SpacingKey): number => spacing[size];

export const getSemanticSpacing = <T extends SemanticSpacingCategory>(
  category: T,
  size: keyof (typeof semanticSpacing)[T]
): number => {
  return semanticSpacing[category][size] as number;
};

// Spacing utilities for common patterns
export const spacingUtils = {
  // Create consistent margin/padding objects
  margin: (size: SpacingKey) => ({ margin: spacing[size] }),
  marginHorizontal: (size: SpacingKey) => ({ marginHorizontal: spacing[size] }),
  marginVertical: (size: SpacingKey) => ({ marginVertical: spacing[size] }),
  marginTop: (size: SpacingKey) => ({ marginTop: spacing[size] }),
  marginBottom: (size: SpacingKey) => ({ marginBottom: spacing[size] }),
  marginLeft: (size: SpacingKey) => ({ marginLeft: spacing[size] }),
  marginRight: (size: SpacingKey) => ({ marginRight: spacing[size] }),
  
  padding: (size: SpacingKey) => ({ padding: spacing[size] }),
  paddingHorizontal: (size: SpacingKey) => ({ paddingHorizontal: spacing[size] }),
  paddingVertical: (size: SpacingKey) => ({ paddingVertical: spacing[size] }),
  paddingTop: (size: SpacingKey) => ({ paddingTop: spacing[size] }),
  paddingBottom: (size: SpacingKey) => ({ paddingBottom: spacing[size] }),
  paddingLeft: (size: SpacingKey) => ({ paddingLeft: spacing[size] }),
  paddingRight: (size: SpacingKey) => ({ paddingRight: spacing[size] }),
} as const;
</file>

<file path="src/styles/typography.ts">
/**
 * Typography Design Tokens
 * Consistent typography scale with font sizes, weights, and line heights
 */

// Font Family Definitions
export const fontFamily = {
  regular: 'System', // Uses system default font
  medium: 'System',
  semibold: 'System',
  bold: 'System',
} as const;

// Font Weight Definitions
export const fontWeight = {
  normal: '400',
  medium: '500',
  semibold: '600',
  bold: '700',
} as const;

// Font Size Scale (in pixels)
export const fontSize = {
  xs: 12,
  sm: 14,
  base: 16,
  lg: 18,
  xl: 20,
  '2xl': 24,
  '3xl': 32,
  '4xl': 40,
} as const;

// Line Height Scale
export const lineHeight = {
  tight: 1.2,
  normal: 1.4,
  relaxed: 1.6,
} as const;

// Typography Variants
export const typographyVariants = {
  // Heading Styles
  h1: {
    fontSize: fontSize['3xl'], // 32px
    fontWeight: fontWeight.bold,
    lineHeight: lineHeight.tight,
    letterSpacing: -0.5,
  },
  h2: {
    fontSize: fontSize['2xl'], // 24px
    fontWeight: fontWeight.bold,
    lineHeight: lineHeight.tight,
    letterSpacing: -0.25,
  },
  h3: {
    fontSize: fontSize.xl, // 20px
    fontWeight: fontWeight.semibold,
    lineHeight: lineHeight.normal,
    letterSpacing: 0,
  },
  h4: {
    fontSize: fontSize.lg, // 18px
    fontWeight: fontWeight.semibold,
    lineHeight: lineHeight.normal,
    letterSpacing: 0,
  },
  
  // Body Text Styles
  body1: {
    fontSize: fontSize.base, // 16px
    fontWeight: fontWeight.normal,
    lineHeight: lineHeight.normal,
    letterSpacing: 0,
  },
  body2: {
    fontSize: fontSize.sm, // 14px
    fontWeight: fontWeight.normal,
    lineHeight: lineHeight.normal,
    letterSpacing: 0,
  },
  
  // Utility Text Styles
  caption: {
    fontSize: fontSize.xs, // 12px
    fontWeight: fontWeight.normal,
    lineHeight: lineHeight.normal,
    letterSpacing: 0.25,
  },
  overline: {
    fontSize: fontSize.xs, // 12px
    fontWeight: fontWeight.medium,
    lineHeight: lineHeight.normal,
    letterSpacing: 1,
    textTransform: 'uppercase' as const,
  },
  
  // Button Text Styles
  button: {
    fontSize: fontSize.base, // 16px
    fontWeight: fontWeight.semibold,
    lineHeight: lineHeight.tight,
    letterSpacing: 0.25,
  },
  buttonSmall: {
    fontSize: fontSize.sm, // 14px
    fontWeight: fontWeight.semibold,
    lineHeight: lineHeight.tight,
    letterSpacing: 0.25,
  },
  buttonLarge: {
    fontSize: fontSize.lg, // 18px
    fontWeight: fontWeight.semibold,
    lineHeight: lineHeight.tight,
    letterSpacing: 0.25,
  },
} as const;

// Text Alignment Options
export const textAlign = {
  left: 'left',
  center: 'center',
  right: 'right',
  justify: 'justify',
} as const;

// Text Transform Options
export const textTransform = {
  none: 'none',
  uppercase: 'uppercase',
  lowercase: 'lowercase',
  capitalize: 'capitalize',
} as const;

// Export all typography tokens
export const typography = {
  fontFamily,
  fontWeight,
  fontSize,
  lineHeight,
  variants: typographyVariants,
  textAlign,
  textTransform,
} as const;

// Type definitions
export type FontFamilyKey = keyof typeof fontFamily;
export type FontWeightKey = keyof typeof fontWeight;
export type FontSizeKey = keyof typeof fontSize;
export type LineHeightKey = keyof typeof lineHeight;
export type TypographyVariant = keyof typeof typographyVariants;
export type TextAlign = keyof typeof textAlign;
export type TextTransform = keyof typeof textTransform;

// Helper function to get typography styles
export const getTypographyStyle = (variant: TypographyVariant) => {
  return typographyVariants[variant];
};

// Responsive typography helpers (for future use)
export const responsiveTypography = {
  // Scale factors for different screen sizes
  mobile: 1,
  tablet: 1.1,
  desktop: 1.2,
} as const;
</file>

<file path="src/utils/responsive.ts">
/**
 * Responsive Design Utilities
 * Helper functions for responsive design and screen size handling
 */

import { Dimensions, PixelRatio } from 'react-native';
import { theme } from '../styles/theme';

// Get screen dimensions
const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// Screen size categories
export const screenSizes = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
} as const;

// Get current screen size category
export const getCurrentScreenSize = (): keyof typeof screenSizes => {
  if (screenWidth >= screenSizes.xl) return 'xl';
  if (screenWidth >= screenSizes.lg) return 'lg';
  if (screenWidth >= screenSizes.md) return 'md';
  if (screenWidth >= screenSizes.sm) return 'sm';
  return 'xs';
};

// Check if screen matches specific size
export const isScreenSize = (size: keyof typeof screenSizes): boolean => {
  return getCurrentScreenSize() === size;
};

// Check if screen is at least a certain size
export const isScreenAtLeast = (size: keyof typeof screenSizes): boolean => {
  const currentSize = getCurrentScreenSize();
  const sizeOrder: (keyof typeof screenSizes)[] = ['xs', 'sm', 'md', 'lg', 'xl'];
  const currentIndex = sizeOrder.indexOf(currentSize);
  const targetIndex = sizeOrder.indexOf(size);
  return currentIndex >= targetIndex;
};

// Get responsive value based on screen size
export const getResponsiveValue = <T>(values: Partial<Record<keyof typeof screenSizes, T>>): T | undefined => {
  const currentSize = getCurrentScreenSize();
  const sizeOrder: (keyof typeof screenSizes)[] = ['xl', 'lg', 'md', 'sm', 'xs'];
  
  // Find the first available value for current or smaller screen size
  for (const size of sizeOrder) {
    if (values[size] !== undefined && screenWidth >= screenSizes[size]) {
      return values[size];
    }
  }
  
  // Fallback to the smallest available value
  for (const size of ['xs', 'sm', 'md', 'lg', 'xl'] as const) {
    if (values[size] !== undefined) {
      return values[size];
    }
  }
  
  return undefined;
};

// Scale value based on screen density
export const scaleSize = (size: number): number => {
  return PixelRatio.roundToNearestPixel(size);
};

// Scale font size based on screen density and size
export const scaleFontSize = (size: number): number => {
  const scale = screenWidth / 375; // Base on iPhone X width
  const newSize = size * scale;
  return Math.max(12, PixelRatio.roundToNearestPixel(newSize)); // Minimum 12px
};

// Get responsive spacing
export const getResponsiveSpacing = (
  baseSize: keyof typeof theme.spacing.base,
  multiplier?: Partial<Record<keyof typeof screenSizes, number>>
): number => {
  const baseValue = theme.spacing.base[baseSize];
  const currentMultiplier = getResponsiveValue(multiplier || {}) || 1;
  return scaleSize(baseValue * currentMultiplier);
};

// Get responsive padding/margin object
export const getResponsivePadding = (
  size: keyof typeof theme.spacing.base,
  direction?: 'horizontal' | 'vertical' | 'top' | 'bottom' | 'left' | 'right'
) => {
  const value = getResponsiveSpacing(size);
  
  switch (direction) {
    case 'horizontal':
      return { paddingHorizontal: value };
    case 'vertical':
      return { paddingVertical: value };
    case 'top':
      return { paddingTop: value };
    case 'bottom':
      return { paddingBottom: value };
    case 'left':
      return { paddingLeft: value };
    case 'right':
      return { paddingRight: value };
    default:
      return { padding: value };
  }
};

export const getResponsiveMargin = (
  size: keyof typeof theme.spacing.base,
  direction?: 'horizontal' | 'vertical' | 'top' | 'bottom' | 'left' | 'right'
) => {
  const value = getResponsiveSpacing(size);
  
  switch (direction) {
    case 'horizontal':
      return { marginHorizontal: value };
    case 'vertical':
      return { marginVertical: value };
    case 'top':
      return { marginTop: value };
    case 'bottom':
      return { marginBottom: value };
    case 'left':
      return { marginLeft: value };
    case 'right':
      return { marginRight: value };
    default:
      return { margin: value };
  }
};

// Device type detection
export const deviceType = {
  isPhone: screenWidth < 768,
  isTablet: screenWidth >= 768 && screenWidth < 1024,
  isDesktop: screenWidth >= 1024,
} as const;

// Orientation detection
export const isLandscape = screenWidth > screenHeight;
export const isPortrait = screenHeight > screenWidth;

// Safe area helpers (for future implementation with react-native-safe-area-context)
export const getSafeAreaPadding = () => {
  // This would integrate with react-native-safe-area-context
  // For now, return default values
  return {
    top: theme.spacing.base.lg,
    bottom: theme.spacing.base.lg,
    left: theme.spacing.base.md,
    right: theme.spacing.base.md,
  };
};

// Grid system helpers
export const getGridColumns = (
  columns: Partial<Record<keyof typeof screenSizes, number>>
): number => {
  return getResponsiveValue(columns) || 1;
};

export const getGridItemWidth = (
  columns: number,
  gap: number = theme.spacing.base.md
): string => {
  const gapTotal = (columns - 1) * gap;
  const availableWidth = screenWidth - gapTotal;
  const itemWidth = availableWidth / columns;
  return `${(itemWidth / screenWidth) * 100}%`;
};

// Responsive typography helpers
export const getResponsiveTypography = (
  variant: keyof typeof theme.typography.variants,
  scaleFactor?: Partial<Record<keyof typeof screenSizes, number>>
) => {
  const baseStyle = theme.typography.variants[variant];
  const scale = getResponsiveValue(scaleFactor || {}) || 1;
  
  return {
    ...baseStyle,
    fontSize: scaleFontSize(baseStyle.fontSize * scale),
    lineHeight: baseStyle.lineHeight * baseStyle.fontSize * scale,
  };
};

// Export screen dimensions for convenience
export const screen = {
  width: screenWidth,
  height: screenHeight,
  scale: PixelRatio.get(),
  fontScale: PixelRatio.getFontScale(),
} as const;

// Responsive utilities object
export const responsive = {
  getCurrentScreenSize,
  isScreenSize,
  isScreenAtLeast,
  getResponsiveValue,
  scaleSize,
  scaleFontSize,
  getResponsiveSpacing,
  getResponsivePadding,
  getResponsiveMargin,
  getSafeAreaPadding,
  getGridColumns,
  getGridItemWidth,
  getResponsiveTypography,
  deviceType,
  isLandscape,
  isPortrait,
  screen,
} as const;
</file>

<file path="src/utils/supabase.ts">
import 'react-native-url-polyfill/auto';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';

// Define a no-op storage adapter for server-side rendering.
const noopStorage = {
  getItem: (_key: string) => Promise.resolve(null),
  setItem: (_key: string, _value: string) => Promise.resolve(),
  removeItem: (_key: string) => Promise.resolve(),
};

// It's recommended to use environment variables for these
const supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl;
const supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey;

if (!supabaseUrl || !supabaseAnonKey) {
  // You can show a message to the user or handle this error appropriately.
  // For now, we'll throw an error during development if the keys are missing.
  throw new Error("Supabase URL and Anon Key are not set. Please add them to your .env file.");
}

// Use the no-op storage on the server, and AsyncStorage elsewhere.
const storage =
  Platform.OS === 'web' && typeof window === 'undefined'
    ? noopStorage
    : AsyncStorage;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: storage, // Use AsyncStorage for session persistence in React Native
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false, // Required for React Native
  },
});
</file>

<file path="src/utils/svgPatterns.ts">
// SVG pattern generation utilities for background decorations

// Helper function to generate hexagonal pattern
/**
 * Generates SVG markup for a hexagonal pattern
 * @param rows - Number of rows in the pattern
 * @param cols - Number of columns in the pattern
 * @param size - Size of each hexagon
 * @returns SVG path string for the hexagonal pattern
 */
export function generateHexagonalPattern(rows: number, cols: number, size: number): string {
  if (rows <= 0 || cols <= 0 || size <= 0) {
    throw new Error('Pattern parameters must be positive numbers');
  }

  let pattern = '';
  const h = size * Math.sqrt(3) / 2;
  
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const offsetX = j * size * 1.5;
      const offsetY = i * h * 2 + (j % 2 === 0 ? 0 : h);
      
      // Hexagon
      pattern += `
        <path d="
          M${offsetX} ${offsetY + h}
          L${offsetX + size/2} ${offsetY}
          L${offsetX + size*1.5} ${offsetY}
          L${offsetX + size*2} ${offsetY + h}
          L${offsetX + size*1.5} ${offsetY + h*2}
          L${offsetX + size/2} ${offsetY + h*2}
          Z
        " stroke="#005e7a" stroke-width="1" fill="none"/>
      `;
      
      // Inner decoration
      pattern += `
        <circle cx="${offsetX + size}" cy="${offsetY + h}" r="${size/4}" stroke="#005e7a" stroke-width="0.5" fill="none"/>
        <path d="
          M${offsetX + size - size/4} ${offsetY + h}
          L${offsetX + size} ${offsetY + h - size/4}
          L${offsetX + size + size/4} ${offsetY + h}
          L${offsetX + size} ${offsetY + h + size/4}
          Z
        " stroke="#005e7a" stroke-width="0.5" fill="none"/>
      `;
    }
  }
  
  return pattern;
}

// Helper function to generate interlaced pattern
/**
 * Generates SVG markup for an interlaced pattern
 * @param rows - Number of rows in the pattern
 * @param cols - Number of columns in the pattern  
 * @param size - Size of each pattern element
 * @returns SVG path string for the interlaced pattern
 */
export function generateInterlacedPattern(rows: number, cols: number, size: number): string {
  if (rows <= 0 || cols <= 0 || size <= 0) {
    throw new Error('Pattern parameters must be positive numbers');
  }

  let pattern = '';
  
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const x = j * size * 2;
      const y = i * size * 2;
      
      // Circles
      pattern += `
        <circle cx="${x + size}" cy="${y + size}" r="${size * 0.8}" stroke="#005e7a" stroke-width="1" fill="none"/>
      `;
      
      // Interlaced lines
      pattern += `
        <path d="
          M${x} ${y}
          C${x + size/2} ${y + size}, ${x + size*1.5} ${y + size}, ${x + size*2} ${y}
        " stroke="#005e7a" stroke-width="1" fill="none"/>
        
        <path d="
          M${x} ${y + size*2}
          C${x + size/2} ${y + size}, ${x + size*1.5} ${y + size}, ${x + size*2} ${y + size*2}
        " stroke="#005e7a" stroke-width="1" fill="none"/>
        
        <path d="
          M${x} ${y + size}
          C${x + size/2} ${y}, ${x + size*1.5} ${y + size*2}, ${x + size*2} ${y + size}
        " stroke="#005e7a" stroke-width="1" fill="none"/>
      `;
    }
  }
  
  return pattern;
}

// Helper function to generate floral pattern
export function generateFloralPattern(rows: number, cols: number, size: number): string {
  let pattern = '';
  
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const x = j * size * 2;
      const y = i * size * 2;
      const centerX = x + size;
      const centerY = y + size;
      
      // Center flower
      pattern += `
        <circle cx="${centerX}" cy="${centerY}" r="${size/10}" fill="#005e7a"/>
      `;
      
      // Petals
      for (let angle = 0; angle < 360; angle += 45) {
        const radians = angle * Math.PI / 180;
        const petalX = centerX + Math.cos(radians) * size/2;
        const petalY = centerY + Math.sin(radians) * size/2;
        
        pattern += `
          <path d="
            M${centerX} ${centerY}
            Q${centerX + Math.cos(radians + Math.PI/4) * size/3} ${centerY + Math.sin(radians + Math.PI/4) * size/3},
             ${petalX} ${petalY}
            Q${centerX + Math.cos(radians - Math.PI/4) * size/3} ${centerY + Math.sin(radians - Math.PI/4) * size/3},
             ${centerX} ${centerY}
          " stroke="#005e7a" stroke-width="0.5" fill="none"/>
        `;
      }
      
      // Connecting lines
      if (j < cols - 1) {
        pattern += `
          <path d="M${centerX + size/2} ${centerY} L${centerX + size*1.5} ${centerY}" stroke="#005e7a" stroke-width="0.5" stroke-dasharray="5,5" fill="none"/>
        `;
      }
      
      if (i < rows - 1) {
        pattern += `
          <path d="M${centerX} ${centerY + size/2} L${centerX} ${centerY + size*1.5}" stroke="#005e7a" stroke-width="0.5" stroke-dasharray="5,5" fill="none"/>
        `;
      }
    }
  }
  
  return pattern;
}

// Generate the complete background pattern SVG
export function generateBackgroundPatternSvg(): string {
  return `
<svg width="100%" height="100%" viewBox="0 0 800 1600" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="800" height="1600" fill="#f5f5f5"/>
  
  <!-- Islamic Geometric Pattern -->
  <!-- Pattern 1: Top section - Hexagonal pattern -->
  <g opacity="0.05">
    <g transform="translate(0, 0)">
      ${generateHexagonalPattern(10, 6, 60)}
    </g>
  </g>
  
  <!-- Pattern 2: Middle section - Interlaced pattern -->
  <g opacity="0.05">
    <g transform="translate(0, 800)">
      ${generateInterlacedPattern(6, 3, 100)}
    </g>
  </g>
  
  <!-- Pattern 3: Bottom section - Floral pattern -->
  <g opacity="0.05">
    <g transform="translate(0, 1200)">
      ${generateFloralPattern(6, 3, 100)}
    </g>
  </g>
</svg>
  `;
}

// Logo SVG
export const logoSvg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="200" height="200" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Background Circle -->
  <circle cx="100" cy="100" r="95" fill="#005e7a" />
  <circle cx="100" cy="100" r="85" fill="#ffffff" />
  
  <!-- Open Book Symbol -->
  <path d="M100 60C100 60 70 50 50 60V140C70 130 100 140 100 140V60Z" fill="#005e7a" />
  <path d="M100 60C100 60 130 50 150 60V140C130 130 100 140 100 140V60Z" fill="#005e7a" />
  <path d="M100 70C100 70 75 62 60 70V130C75 122 100 130 100 130V70Z" fill="#ffffff" />
  <path d="M100 70C100 70 125 62 140 70V130C125 122 100 130 100 130V70Z" fill="#ffffff" />
  
  <!-- Arabic-inspired Decorative Element -->
  <path d="M100 40C100 40 90 45 100 50C110 45 100 40 100 40Z" fill="#f0c75e" />
  <path d="M80 45C80 45 70 50 80 55C90 50 80 45 80 45Z" fill="#f0c75e" />
  <path d="M120 45C120 45 110 50 120 55C130 50 120 45 120 45Z" fill="#f0c75e" />
  
  <!-- Text "ZBT" -->
  <path d="M70 160H130V170H70V160Z" fill="#005e7a" />
  <path d="M70 160L130 160L100 145L70 160Z" fill="#005e7a" />
  <path d="M85 170V180H115V170" stroke="#005e7a" stroke-width="10" stroke-linecap="round" />
</svg>`;
</file>

<file path="app/(auth)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function AuthLayout() {
    return (
        <Stack screenOptions={{ headerShown: false }}>
            <Stack.Screen name="login" />
            <Stack.Screen name="reset-password" />
        </Stack>
    );
}
</file>

<file path="app/(auth)/login.tsx">
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useLocalSearchParams, Stack } from 'expo-router';
import { SvgXml } from 'react-native-svg';
import AuthForm from '../../src/components/organisms/AuthForm';

const logoSvg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="200" height="200" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="100" cy="100" r="95" fill="#005e7a" />
  <circle cx="100" cy="100" r="85" fill="#ffffff" />
  <path d="M100 60C100 60 70 50 50 60V140C70 130 100 140 100 140V60Z" fill="#005e7a" />
  <path d="M100 60C100 60 130 50 150 60V140C130 130 100 140 100 140V60Z" fill="#005e7a" />
  <path d="M100 70C100 70 75 62 60 70V130C75 122 100 130 100 130V70Z" fill="#ffffff" />
  <path d="M100 70C100 70 125 62 140 70V130C125 122 100 130 100 130V70Z" fill="#ffffff" />
  <path d="M100 40C100 40 90 45 100 50C110 45 100 40 100 40Z" fill="#f0c75e" />
  <path d="M80 45C80 45 70 50 80 55C90 50 80 45 80 45Z" fill="#f0c75e" />
  <path d="M120 45C120 45 110 50 120 55C130 50 120 45 120 45Z" fill="#f0c75e" />
  <path d="M70 160H130V170H70V160Z" fill="#005e7a" />
  <path d="M70 160L130 160L100 145L70 160Z" fill="#005e7a" />
  <path d="M85 170V180H115V170" stroke="#005e7a" stroke-width="10" stroke-linecap="round" />
</svg>`;

export default function LoginScreen() {
  const { role } = useLocalSearchParams<{ role: string }>();

  return (
    <View style={styles.container}>
      <Stack.Screen options={{ headerShown: false }} />
      <View style={styles.logoContainer}>
        <SvgXml xml={logoSvg} width={100} height={100} />
        <Text style={styles.appName}>Pondok Pesantren Tahfidz ZAID BIN TSAABIT</Text>
        {role && (
          <View style={styles.roleChip}>
            <Text style={styles.roleText}>
              Login as: {role.charAt(0).toUpperCase() + role.slice(1)}
            </Text>
          </View>
        )}
      </View>

      <AuthForm role={role} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
    padding: 20,
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: 40,
    marginBottom: 40,
  },
  logo: {
    width: 100,
    height: 100,
    marginBottom: 10,
  },
  appName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#005e7a',
    textAlign: 'center',
  },
  roleChip: {
    backgroundColor: '#005e7a',
    paddingVertical: 5,
    paddingHorizontal: 15,
    borderRadius: 20,
    marginTop: 10,
  },
  roleText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  formContainer: {
    paddingHorizontal: 10,
  },
  errorContainer: {
    backgroundColor: '#ffebee',
    padding: 10,
    borderRadius: 5,
    marginBottom: 20,
  },
  errorText: {
    color: '#d32f2f',
    textAlign: 'center',
  },
  inputContainer: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    color: '#555555',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
  },
  forgotPasswordContainer: {
    alignItems: 'flex-end',
    marginBottom: 20,
  },
  forgotPasswordText: {
    color: '#005e7a',
    fontSize: 14,
  },
  loginButton: {
    backgroundColor: '#005e7a',
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#a0a0a0',
  },
  loginButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  registerButton: {
    backgroundColor: '#f0c75e',
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 8,
    alignItems: 'center',
  },
  registerButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
</file>

<file path="app/(auth)/reset-password.tsx">
import { useState, useEffect } from 'react';
import { Alert, View, StyleSheet } from 'react-native';
import { supabase } from '../../src/utils/supabase';
import { Stack, useRouter, useGlobalSearchParams } from 'expo-router';
import { Button } from '../../src/components/atoms/Button';
import { Input } from '../../src/components/atoms/Input';
import { Typography } from '../../src/components/atoms/Typography';

export default function ResetPasswordScreen() {
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const { access_token, refresh_token } = useGlobalSearchParams();

  useEffect(() => {
    if (!access_token || !refresh_token) {
      return;
    }

    if (typeof access_token !== 'string' || typeof refresh_token !== 'string') {
      Alert.alert('Error', 'Invalid password reset link format.');
      router.replace('/(auth)/login');
      return;
    }

    const establishSession = async () => {
      const { error } = await supabase.auth.setSession({
        access_token,
        refresh_token,
      });

      if (error) {
        Alert.alert(
          'Error',
          'Failed to process password reset link. It may have expired. Please try again.'
        );
        console.error('Error setting session:', error.message);
        router.replace('/(auth)/login');
      }
    };

    establishSession();
  }, [access_token, refresh_token, router]);

  const handleResetPassword = async () => {
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

    if (!passwordRegex.test(password)) {
      Alert.alert(
        'Password Not Strong Enough',
        'Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, one number, and one special character.'
      );
      return;
    }

    setLoading(true);
    const { error } = await supabase.auth.updateUser({ password: password });
    setLoading(false);

    if (error) {
      Alert.alert('Error', error.message);
    } else {
      setPassword(''); // Clear password from state
      Alert.alert('Success', 'Your password has been set successfully.', [
        { text: 'OK', onPress: () => router.replace('/') },
      ]);
    }
  };

  return (
    <View style={styles.container}>
      <Stack.Screen options={{ title: 'Set Password' }} />
      <Typography variant="h3" align="center" style={styles.title}>
        Choose a New Password
      </Typography>
      
      <Input
        label="New Password"
        placeholder="Enter new password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        autoCapitalize="none"
        helperText="Must be 8+ characters with uppercase, lowercase, number, and special character"
        leftIcon="lock-closed-outline"
      />
      
      <Button
        variant="primary"
        size="large"
        fullWidth
        onPress={handleResetPassword}
        disabled={loading}
        loading={loading}
        style={styles.button}
      >
        Set New Password
      </Button>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
    gap: 16,
  },
  title: {
    marginBottom: 20,
  },
  button: {
    marginTop: 20,
  },
});
</file>

<file path="app/(management)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function ManagementLayout() {
    return (
        <Stack screenOptions={{ headerShown: false }}>
            <Stack.Screen name="dashboard" />
            <Stack.Screen name="setup" />
            <Stack.Screen name="user-management" />
        </Stack>
    );
}
</file>

<file path="app/(management)/setup.tsx">
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
  ActivityIndicator,
  SafeAreaView
} from 'react-native';
import { useRouter } from 'expo-router';
import { supabase } from '../../src/utils/supabase';
import { saveSchool, School } from '../../src/services/schools';

export default function SchoolSetupScreen() {
  const router = useRouter();

  const [schoolName, setSchoolName] = useState('');
  const [npsn, setNpsn] = useState('');
  const [managerName, setManagerName] = useState('');
  
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<string | null>(null);

  const handleCheckClaims = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('check-auth-claims');
      if (error) throw error;
      
      const claims = JSON.stringify(data.claims, null, 2);
      console.log('User JWT Claims:', claims);
      setDebugInfo(claims);
      Alert.alert('JWT Claims', claims);
    } catch (err: any) {
      console.error('Error checking claims:', err);
      Alert.alert('Error', `Gagal memeriksa claims: ${err.message}`);
    }
  };

  const handleSetup = async () => {
    if (!schoolName || !npsn || !managerName) {
      Alert.alert('Error', 'Nama Sekolah, NPSN, dan Nama Anda wajib diisi.');
      return;
    }

    setIsLoading(true);
    setError(null);

    // In a production app, this logic should be moved to a secure Supabase Edge Function
    // to ensure atomicity (all steps succeed or none do) and to avoid granting broad
    // table permissions to the client.
    try {
      // 1. Create the school using the service
      const schoolData: School = {
        name: schoolName,
        npsn: npsn,
        address: '', // Placeholder as it's not collected in the form yet
        phone: '',   // Placeholder as it's not collected in the form yet
        email: ''    // Placeholder as it's not collected in the form yet
      };
      const { data: savedSchool, error: schoolError } = await saveSchool(schoolData);

      if (schoolError) throw schoolError;
      if (!savedSchool) throw new Error("Gagal membuat data sekolah.");

      // 2. Update the current user's metadata with the new school_id and full_name
      const { error: userError } = await supabase.auth.updateUser({
        data: {
          school_id: savedSchool.id,
          full_name: managerName,
        }
      });
      
      if (userError) throw userError;

      Alert.alert('Sukses!', 'Profil sekolah dan akun Anda telah berhasil dibuat.');
      
      // Force a refresh of the session to get new metadata.
      // The AuthContext listener will pick up the change and the root layout will redirect to the dashboard.
      await supabase.auth.refreshSession();

    } catch (err: any) {
      console.error("Setup error:", err);
      const errorMessage = err.message || 'Terjadi kesalahan saat proses pengaturan.';
      setError(errorMessage);
      Alert.alert('Error', errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
        <Text style={styles.title}>Selamat Datang!</Text>
        <Text style={styles.subtitle}>Lengkapi profil sekolah Anda untuk memulai.</Text>

        <TextInput style={styles.input} placeholder="Nama Lengkap Anda (Manajemen)" value={managerName} onChangeText={setManagerName} placeholderTextColor="#888" />
        <TextInput style={styles.input} placeholder="Nama Sekolah" value={schoolName} onChangeText={setSchoolName} placeholderTextColor="#888" />
        <TextInput style={styles.input} placeholder="NPSN (Nomor Pokok Sekolah Nasional)" value={npsn} onChangeText={setNpsn} placeholderTextColor="#888" keyboardType="numeric" />

        {error && <Text style={styles.errorText}>{error}</Text>}

        <TouchableOpacity style={styles.debugButton} onPress={handleCheckClaims}>
          <Text style={styles.buttonText}>Debug: Check JWT Claims</Text>
        </TouchableOpacity>

        {debugInfo && <Text style={styles.debugText}>{debugInfo}</Text>}

        <TouchableOpacity style={styles.button} onPress={handleSetup} disabled={isLoading}>
          {isLoading ? (
            <ActivityIndicator color="#fff" />
          ) : (
            <Text style={styles.buttonText}>Simpan dan Lanjutkan</Text>
          )}
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  container: {
    flex: 1,
  },
  contentContainer: {
    padding: 24,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 32,
  },
  input: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    fontSize: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  button: {
    backgroundColor: '#005e7a',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 16,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  errorText: {
    color: 'red',
    textAlign: 'center',
    marginBottom: 16,
  },
  debugButton: {
    backgroundColor: '#f39c12',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 16,
  },
  debugText: {
    backgroundColor: '#ecf0f1',
    padding: 10,
    borderRadius: 4,
    fontFamily: 'monospace',
    color: '#2c3e50',
    fontSize: 12,
  },
});
</file>

<file path="app/(management)/user-management.tsx">
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  TextInput,
  Modal
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { useAuth } from '../../src/context/AuthContext';
import { fetchStudents, fetchTeachers } from '../../src/services/users';
import { Student, Teacher } from '../../src/types';

export default function UserManagementScreen() {
  const router = useRouter();
  const { user, profile, loading: authLoading } = useAuth();
  
  const [activeTab, setActiveTab] = useState<'students' | 'teachers'>('students');
  const [students, setStudents] = useState<Student[]>([]);
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);

  // Filter users based on search term
  const filteredStudents = students.filter(student =>
    student.full_name?.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  const filteredTeachers = teachers.filter(teacher =>
    teacher.full_name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Fetch data based on school ID
  const fetchData = async () => {
    if (!user) return;

    // Check both user metadata and profile for school_id
    console.log('User metadata:', user.user_metadata);
    console.log('Profile:', profile);
    const rawSchoolId = user.user_metadata?.school_id || profile?.school_id;
    console.log('Raw school ID found:', rawSchoolId);
    
    if (!rawSchoolId) {
      setError('School ID not found for this user.');
      return;
    }

    const schoolId = typeof rawSchoolId === 'string' ? parseInt(rawSchoolId, 10) : rawSchoolId;
    if (isNaN(schoolId) || schoolId < 0) {
      setError('Invalid School ID for this user.');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      // Fetch students and teachers
      console.log('Fetching data for school ID:', schoolId);
      const [studentsResponse, teachersResponse] = await Promise.all([
        fetchStudents(schoolId),
        fetchTeachers(schoolId)
      ]);

      console.log('Students response:', studentsResponse);
      console.log('Teachers response:', teachersResponse);

      if (studentsResponse.error) {
        throw new Error(`Failed to fetch students: ${studentsResponse.error.message}`);
      }
      if (teachersResponse.error) {
        throw new Error(`Failed to fetch teachers: ${teachersResponse.error.message}`);
      }

      console.log('Students data:', studentsResponse.data);
      console.log('Teachers data:', teachersResponse.data);
      setStudents(studentsResponse.data || []);
      setTeachers(teachersResponse.data || []);

    } catch (err: any) {
      console.error('Error fetching user data:', err);
      setError(err.message || 'Gagal memuat data pengguna.');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle user selection
  const handleUserSelect = (userId: string, userType: 'student' | 'teacher') => {
    // TODO: Navigate to user detail screen
    Alert.alert('Info', `Detail ${userType} ${userId} akan segera tersedia.`);
  };

  // Handle add user
  const handleAddUser = () => {
    setShowAddModal(true);
  };

  useEffect(() => {
    if (!authLoading && user) {
      fetchData();
    }
  }, [authLoading, user, profile]);

  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#ffffff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Manajemen Pengguna</Text>
        <TouchableOpacity onPress={handleAddUser}>
          <Ionicons name="add" size={24} color="#ffffff" />
        </TouchableOpacity>
      </View>

      {/* Search Bar */}
      <View style={styles.searchContainer}>
        <Ionicons name="search" size={20} color="#666" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Cari pengguna..."
          value={searchTerm}
          onChangeText={setSearchTerm}
          placeholderTextColor="#888"
        />
      </View>

      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'students' && styles.activeTab]}
          onPress={() => setActiveTab('students')}
        >
          <Text style={[styles.tabText, activeTab === 'students' && styles.activeTabText]}>
            Siswa ({filteredStudents.length})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'teachers' && styles.activeTab]}
          onPress={() => setActiveTab('teachers')}
        >
          <Text style={[styles.tabText, activeTab === 'teachers' && styles.activeTabText]}>
            Guru ({filteredTeachers.length})
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <ScrollView style={styles.scrollView}>
        {isLoading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#005e7a" />
            <Text style={styles.loadingText}>Memuat data pengguna...</Text>
          </View>
        ) : error ? (
          <View style={styles.errorContainer}>
            <Ionicons name="alert-circle" size={40} color="#e74c3c" />
            <Text style={styles.errorText}>{error}</Text>
            <TouchableOpacity style={styles.retryButton} onPress={fetchData}>
              <Text style={styles.retryButtonText}>Coba Lagi</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.userList}>
            {activeTab === 'students' ? (
              filteredStudents.length === 0 ? (
                <View style={styles.emptyContainer}>
                  <Ionicons name="people-outline" size={40} color="#cccccc" />
                  <Text style={styles.emptyText}>
                    {searchTerm ? 'Tidak ada siswa yang sesuai pencarian' : 'Belum ada siswa terdaftar'}
                  </Text>
                </View>
              ) : (
                filteredStudents.map((student) => (
                  <TouchableOpacity
                    key={student.id}
                    style={styles.userItem}
                    onPress={() => handleUserSelect(student.id, 'student')}
                  >
                    <View style={styles.userAvatar}>
                      <Ionicons name="person" size={24} color="#005e7a" />
                    </View>
                    <View style={styles.userInfo}>
                      <Text style={styles.userName}>{student.full_name || 'Nama tidak tersedia'}</Text>
                      <Text style={styles.userDetail}>
                        NIS: {student.details?.nis || 'Tidak tersedia'} • Kelas: {student.class_name || 'Tidak tersedia'}
                      </Text>
                      <Text style={styles.userDetail}>
                        Jenis Kelamin: {student.details?.gender === 'M' ? 'Laki-laki' : student.details?.gender === 'F' ? 'Perempuan' : 'Tidak tersedia'}
                      </Text>
                    </View>
                    <Ionicons name="chevron-forward" size={20} color="#cccccc" />
                  </TouchableOpacity>
                ))
              )
            ) : (
              filteredTeachers.length === 0 ? (
                <View style={styles.emptyContainer}>
                  <Ionicons name="people-outline" size={40} color="#cccccc" />
                  <Text style={styles.emptyText}>
                    {searchTerm ? 'Tidak ada guru yang sesuai pencarian' : 'Belum ada guru terdaftar'}
                  </Text>
                </View>
              ) : (
                filteredTeachers.map((teacher) => (
                  <TouchableOpacity
                    key={teacher.id}
                    style={styles.userItem}
                    onPress={() => handleUserSelect(teacher.id, 'teacher')}
                  >
                    <View style={styles.userAvatar}>
                      <Ionicons name="person" size={24} color="#005e7a" />
                    </View>
                    <View style={styles.userInfo}>
                      <Text style={styles.userName}>{teacher.full_name || 'Nama tidak tersedia'}</Text>
                      <Text style={styles.userDetail}>
                        ID Karyawan: {teacher.details?.employee_id || 'Tidak tersedia'}
                      </Text>
                      <Text style={styles.userDetail}>
                        Spesialisasi: {teacher.details?.specialty || 'Tidak tersedia'}
                      </Text>
                    </View>
                    <Ionicons name="chevron-forward" size={20} color="#cccccc" />
                  </TouchableOpacity>
                ))
              )
            )}
          </View>
        )}
      </ScrollView>

      {/* Add User Modal */}
      <Modal
        visible={showAddModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowAddModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Tambah Pengguna</Text>
            <Text style={styles.modalText}>
              Fitur penambahan pengguna akan segera tersedia. Saat ini, pengguna dapat didaftarkan melalui sistem autentikasi.
            </Text>
            <TouchableOpacity
              style={styles.modalButton}
              onPress={() => setShowAddModal(false)}
            >
              <Text style={styles.modalButtonText}>Tutup</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#005e7a',
    paddingVertical: 16,
    paddingHorizontal: 16,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#ffffff',
    flex: 1,
    textAlign: 'center',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    margin: 16,
    paddingHorizontal: 16,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    marginHorizontal: 16,
    borderRadius: 8,
    padding: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 6,
  },
  activeTab: {
    backgroundColor: '#005e7a',
  },
  tabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#666',
  },
  activeTabText: {
    color: '#ffffff',
  },
  scrollView: {
    flex: 1,
    marginTop: 16,
  },
  userList: {
    paddingHorizontal: 16,
  },
  userItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    padding: 16,
    marginBottom: 8,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  userAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#f0f8ff',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  userDetail: {
    fontSize: 12,
    color: '#666',
    marginBottom: 2,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#666',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  errorText: {
    fontSize: 16,
    color: '#e74c3c',
    textAlign: 'center',
    marginTop: 12,
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  emptyContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  emptyText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginTop: 12,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#ffffff',
    padding: 24,
    margin: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  modalText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 20,
  },
  modalButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  modalButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
</file>

<file path="app/(parent)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function ParentLayout() {
    return (
        <Stack screenOptions={{ headerShown: false }}>
            <Stack.Screen name="dashboard" />
            <Stack.Screen name="incident-report" />
            <Stack.Screen name="anti-bullying" />
            <Stack.Screen name="cctv-request" />
        </Stack>
    );
}
</file>

<file path="app/(student)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function StudentLayout() {
    return (
        <Stack screenOptions={{ headerShown: false }}>
            <Stack.Screen name="dashboard" />
            <Stack.Screen name="index" />
            <Stack.Screen name="quran-progress" />
            <Stack.Screen name="schedule" />
            <Stack.Screen name="boarding-info" />
            <Stack.Screen name="incident-report" />
            <Stack.Screen name="anti-bullying" />
        </Stack>
    );
}
</file>

<file path="app/(student)/boarding-info.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function BoardingInfoScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Informasi Asrama" 
      }} />
      <SafeAreaView style={styles.container}>
        <Text style={styles.text}>Halaman Informasi Asrama akan segera tersedia</Text>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  text: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
    padding: 20,
  }
});
</file>

<file path="app/(student)/quran-progress.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function QuranProgressScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Progress Hafalan Quran" 
      }} />
      <SafeAreaView style={styles.container}>
        <Text style={styles.text}>Halaman Progress Hafalan Quran akan segera tersedia</Text>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  text: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
    padding: 20,
  }
});
</file>

<file path="app/(student)/schedule.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function ScheduleScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Jadwal Kegiatan" 
      }} />
      <SafeAreaView style={styles.container}>
        <Text style={styles.text}>Halaman Jadwal Kegiatan akan segera tersedia</Text>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  text: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
    padding: 20,
  }
});
</file>

<file path="app/(teacher)/index.tsx">
import { Redirect } from 'expo-router';

export default function TeacherIndex() {
  return <Redirect href="/(teacher)/dashboard" />;
}
</file>

<file path="app/(teacher)/students/[id].tsx">
import React from 'react';
import { Stack } from 'expo-router';
import StudentDetail from '../../../src/components/templates/StudentDetailTemplate';

export default function StudentDetailPage() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Detail Siswa" 
      }} />
      <StudentDetail />
    </>
  );
}
</file>

<file path="app/(teacher)/students/add.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import AddStudent from '../../../src/components/templates/AddStudentTemplate';

export default function AddStudentPage() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Tambah Siswa" 
      }} />
      <AddStudent />
    </>
  );
}
</file>

<file path="app/(teacher)/students/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import StudentsList from '../../../src/components/templates/StudentsListTemplate';

export default function StudentsListPage() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Daftar Siswa" 
      }} />
      <StudentsList />
    </>
  );
}
</file>

<file path="src/components/atoms/BackgroundPattern/index.ts">
/**
 * BackgroundPattern Component Export
 * Exports the BackgroundPattern component and its related types
 */

export { BackgroundPattern } from './BackgroundPattern';
export type { 
  BackgroundPatternProps, 
  PatternVariant, 
  PatternIntensity 
} from './BackgroundPattern';
export { default } from './BackgroundPattern';
</file>

<file path="src/components/atoms/Button/Button.test.tsx">
/**
 * Button Component Tests
 * Comprehensive test suite for all button variants, sizes, and states
 */

import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react-native';
import { ThemeProvider, useComponentTheme } from '../../../context/ThemeContext';
import { theme } from '../../../styles/theme';
import { Button } from './Button';

// Test wrapper with ThemeProvider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

describe('Button Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with text content', () => {
      render(
        <TestWrapper>
          <Button>Test Button</Button>
        </TestWrapper>
      );
      
      expect(screen.getByText('Test Button')).toBeTruthy();
    });

    it('renders with accessibility label', () => {
      render(
        <TestWrapper>
          <Button accessibilityLabel="Custom Label">Test Button</Button>
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Custom Label')).toBeTruthy();
    });

    it('has correct accessibility role', () => {
      render(
        <TestWrapper>
          <Button>Test Button</Button>
        </TestWrapper>
      );
      
      expect(screen.getByRole('button')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    const variants = ['primary', 'secondary', 'outline', 'ghost', 'danger'] as const;

    variants.forEach(variant => {
      it(`renders ${variant} variant correctly`, () => {
        render(
          <TestWrapper>
            <Button variant={variant} testID={`button-${variant}`}>
              {variant} Button
            </Button>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`button-${variant}`)).toBeTruthy();
        expect(screen.getByText(`${variant} Button`)).toBeTruthy();
      });
    });
  });

  // Size tests
  describe('Sizes', () => {
    const sizes = ['small', 'medium', 'large'] as const;

    sizes.forEach(size => {
      it(`renders ${size} size correctly`, () => {
        render(
          <TestWrapper>
            <Button size={size} testID={`button-${size}`}>
              {size} Button
            </Button>
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`button-${size}`)).toBeTruthy();
        expect(screen.getByText(`${size} Button`)).toBeTruthy();
      });
    });
  });

  // State tests
  describe('States', () => {
    it('renders disabled state correctly', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Button disabled onPress={onPress} testID="disabled-button">
            Disabled Button
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('disabled-button');
      expect(button).toBeTruthy();
      
      fireEvent.press(button);
      expect(onPress).not.toHaveBeenCalled();
    });

    it('renders loading state correctly', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Button loading onPress={onPress} testID="loading-button">
            Loading Button
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('loading-button');
      expect(button).toBeTruthy();
      
      fireEvent.press(button);
      expect(onPress).not.toHaveBeenCalled();
    });

    it('shows loading indicator when loading', () => {
      render(
        <TestWrapper>
          <Button loading testID="loading-button">
            Loading Button
          </Button>
        </TestWrapper>
      );
      
      // ActivityIndicator should be present
      expect(screen.getByTestId('loading-button')).toBeTruthy();
    });
  });

  // Icon tests
  describe('Icons', () => {
    it('renders with left icon', () => {
      render(
        <TestWrapper>
          <Button icon="home" iconPosition="left" testID="icon-left-button">
            Icon Left
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('icon-left-button')).toBeTruthy();
      expect(screen.getByText('Icon Left')).toBeTruthy();
    });

    it('renders with right icon', () => {
      render(
        <TestWrapper>
          <Button icon="arrow-forward" iconPosition="right" testID="icon-right-button">
            Icon Right
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('icon-right-button')).toBeTruthy();
      expect(screen.getByText('Icon Right')).toBeTruthy();
    });

    it('renders icon-only button', () => {
      render(
        <TestWrapper>
          <Button icon="close" iconOnly testID="icon-only-button">
            Hidden Text
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('icon-only-button')).toBeTruthy();
      // Text should not be rendered in icon-only mode
      expect(screen.queryByText('Hidden Text')).toBeFalsy();
    });
  });

  // Layout tests
  describe('Layout', () => {
    it('renders full width button', () => {
      render(
        <TestWrapper>
          <Button fullWidth testID="full-width-button">
            Full Width
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('full-width-button')).toBeTruthy();
      expect(screen.getByText('Full Width')).toBeTruthy();
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('calls onPress when pressed', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Button onPress={onPress} testID="interactive-button">
            Press Me
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('interactive-button');
      fireEvent.press(button);
      
      expect(onPress).toHaveBeenCalledTimes(1);
    });

    it('does not call onPress when disabled', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Button disabled onPress={onPress} testID="disabled-button">
            Disabled
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('disabled-button');
      fireEvent.press(button);
      
      expect(onPress).not.toHaveBeenCalled();
    });

    it('does not call onPress when loading', () => {
      const onPress = jest.fn();
      
      render(
        <TestWrapper>
          <Button loading onPress={onPress} testID="loading-button">
            Loading
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('loading-button');
      fireEvent.press(button);
      
      expect(onPress).not.toHaveBeenCalled();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility state when disabled', () => {
      render(
        <TestWrapper>
          <Button disabled testID="disabled-button">
            Disabled
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('disabled-button');
      expect(button.props.accessibilityState.disabled).toBe(true);
    });

    it('has correct accessibility state when loading', () => {
      render(
        <TestWrapper>
          <Button loading testID="loading-button">
            Loading
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('loading-button');
      expect(button.props.accessibilityState.busy).toBe(true);
    });

    it('uses custom accessibility label', () => {
      render(
        <TestWrapper>
          <Button accessibilityLabel="Custom Label" testID="custom-label-button">
            Button Text
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Custom Label')).toBeTruthy();
    });

    it('uses custom accessibility hint', () => {
      render(
        <TestWrapper>
          <Button accessibilityHint="Custom Hint" testID="custom-hint-button">
            Button Text
          </Button>
        </TestWrapper>
      );
      
      const button = screen.getByTestId('custom-hint-button');
      expect(button.props.accessibilityHint).toBe('Custom Hint');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom button style', () => {
      const customStyle = { backgroundColor: 'red' };
      
      render(
        <TestWrapper>
          <Button style={customStyle} testID="custom-style-button">
            Custom Style
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-style-button')).toBeTruthy();
    });

    it('applies custom text style', () => {
      const customTextStyle = { fontSize: 20 };
      
      render(
        <TestWrapper>
          <Button textStyle={customTextStyle} testID="custom-text-style-button">
            Custom Text Style
          </Button>
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-text-style-button')).toBeTruthy();
      expect(screen.getByText('Custom Text Style')).toBeTruthy();
    });
  });

  // Theme integration tests
  describe('Theme Integration', () => {
    it('retrieves correct theme from useComponentTheme hook', () => {
      let buttonTheme;

      const TestComponent = () => {
        buttonTheme = useComponentTheme('button');
        return null;
      };

      render(
        <TestWrapper>
          <TestComponent />
        </TestWrapper>
      );

      expect(buttonTheme).toBeDefined();
      expect(buttonTheme).toEqual(theme.componentThemes.button);
    });
  });
});
</file>

<file path="src/components/atoms/Button/Button.tsx">
/**
 * Button Component
 * Consistent button implementation with all variants, sizes, and states
 */

import React from 'react';
import {
  TouchableOpacity,
  Text,
  ActivityIndicator,
  View,
  StyleSheet,
  ViewStyle,
  TextStyle,
  TouchableOpacityProps,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors, useComponentTheme } from '../../../context/ThemeContext';

// Button Props Interface
export interface ButtonProps extends Omit<TouchableOpacityProps, 'style'> {
  // Content
  children?: React.ReactNode;
  
  // Variants
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  size?: 'small' | 'medium' | 'large';
  
  // States
  loading?: boolean;
  disabled?: boolean;
  
  // Icon support
  icon?: keyof typeof Ionicons.glyphMap;
  iconPosition?: 'left' | 'right';
  iconOnly?: boolean;
  
  // Layout
  fullWidth?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  textStyle?: TextStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  accessibilityHint?: string;
}

// Button Component
export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'medium',
  loading = false,
  disabled = false,
  icon,
  iconPosition = 'left',
  iconOnly = false,
  fullWidth = false,
  style,
  textStyle,
  accessibilityLabel,
  accessibilityHint,
  onPress,
  ...props
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  
  // Get button styles based on variant, size, and state
  const getButtonStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      borderRadius: theme.borderRadius.md,
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'row',
      minHeight: 44, // Minimum touch target
    };

    // Size-specific styles
    const sizeStyles = {
      small: {
        minHeight: 32,
        paddingHorizontal: 12,
        paddingVertical: 6,
      },
      medium: {
        minHeight: 40,
        paddingHorizontal: 16,
        paddingVertical: 8,
      },
      large: {
        minHeight: 48,
        paddingHorizontal: 20,
        paddingVertical: 12,
      },
    };

    // Variant-specific styles
    const variantStyles = {
      primary: {
        backgroundColor: disabled ? colors.interactive.disabled : colors.primary.main,
        ...theme.shadows.button,
      },
      secondary: {
        backgroundColor: disabled ? colors.interactive.disabled : colors.secondary.main,
        ...theme.shadows.button,
      },
      outline: {
        backgroundColor: 'transparent',
        borderWidth: 1,
        borderColor: disabled ? colors.interactive.disabled : colors.primary.main,
      },
      ghost: {
        backgroundColor: 'transparent',
      },
      danger: {
        backgroundColor: disabled ? colors.interactive.disabled : colors.error.main,
        ...theme.shadows.button,
      },
    };

    return {
      ...baseStyle,
      ...sizeStyles[size],
      ...variantStyles[variant],
      ...(fullWidth && { width: '100%' }),
      ...(iconOnly && {
        paddingHorizontal: sizeStyles[size].paddingVertical,
        aspectRatio: 1,
      }),
      opacity: disabled ? 0.6 : 1,
    };
  };

  // Get text styles based on variant, size, and state
  const getTextStyles = (): TextStyle => {
    const baseTextStyle: TextStyle = {
      fontWeight: '600',
      textAlign: 'center',
    };

    // Size-specific text styles
    const sizeTextStyles = {
      small: {
        fontSize: theme.typography.fontSize.sm,
        lineHeight: theme.typography.fontSize.sm * theme.typography.lineHeight.tight,
      },
      medium: {
        fontSize: theme.typography.fontSize.base,
        lineHeight: theme.typography.fontSize.base * theme.typography.lineHeight.tight,
      },
      large: {
        fontSize: theme.typography.fontSize.lg,
        lineHeight: theme.typography.fontSize.lg * theme.typography.lineHeight.tight,
      },
    };

    // Variant-specific text colors
    const variantTextColors = {
      primary: disabled ? colors.text.disabled : colors.primary.contrast,
      secondary: disabled ? colors.text.disabled : colors.secondary.contrast,
      outline: disabled ? colors.text.disabled : colors.primary.main,
      ghost: disabled ? colors.text.disabled : colors.primary.main,
      danger: disabled ? colors.text.disabled : colors.error.contrast,
    };

    return {
      ...baseTextStyle,
      ...sizeTextStyles[size],
      color: variantTextColors[variant],
    };
  };

  // Get icon size based on button size
  const getIconSize = (): number => {
    const iconSizes = {
      small: 16,
      medium: 20,
      large: 24,
    };
    return iconSizes[size];
  };

  // Get icon color based on variant and state
  const getIconColor = (): string => {
    const variantIconColors = {
      primary: disabled ? colors.text.disabled : colors.primary.contrast,
      secondary: disabled ? colors.text.disabled : colors.secondary.contrast,
      outline: disabled ? colors.text.disabled : colors.primary.main,
      ghost: disabled ? colors.text.disabled : colors.primary.main,
      danger: disabled ? colors.text.disabled : colors.error.contrast,
    };
    return variantIconColors[variant];
  };

  // Render icon if provided
  const renderIcon = () => {
    if (!icon) return null;

    return (
      <Ionicons
        name={icon}
        size={getIconSize()}
        color={getIconColor()}
        style={[
          !iconOnly && iconPosition === 'left' && { marginRight: 8 },
          !iconOnly && iconPosition === 'right' && { marginLeft: 8 },
        ]}
      />
    );
  };

  // Render loading indicator
  const renderLoadingIndicator = () => {
    if (!loading) return null;

    return (
      <ActivityIndicator
        size="small"
        color={getIconColor()}
        style={[
          !iconOnly && { marginRight: 8 },
        ]}
      />
    );
  };

  // Render button content
  const renderContent = () => {
    if (loading) {
      return (
        <View style={styles.contentContainer}>
          {renderLoadingIndicator()}
          {!iconOnly && (
            <Text style={[getTextStyles(), textStyle]}>
              {typeof children === 'string' ? children : 'Loading...'}
            </Text>
          )}
        </View>
      );
    }

    if (iconOnly) {
      return renderIcon();
    }

    return (
      <View style={styles.contentContainer}>
        {iconPosition === 'left' && renderIcon()}
        <Text style={[getTextStyles(), textStyle]}>
          {children}
        </Text>
        {iconPosition === 'right' && renderIcon()}
      </View>
    );
  };

  return (
    <TouchableOpacity
      style={[getButtonStyles(), style]}
      onPress={disabled || loading ? undefined : onPress}
      disabled={disabled || loading}
      accessibilityRole="button"
      accessibilityLabel={accessibilityLabel || (typeof children === 'string' ? children : undefined)}
      accessibilityHint={accessibilityHint}
      accessibilityState={{
        disabled: disabled || loading,
        busy: loading,
      }}
      {...props}
    >
      {renderContent()}
    </TouchableOpacity>
  );
};

// Internal styles
const styles = StyleSheet.create({
  contentContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

// Export default
export default Button;
</file>

<file path="src/components/atoms/Icon/Icon.stories.tsx">
/**
 * Icon Component Stories
 * Storybook stories showcasing all Icon variants and use cases
 */

import type { Meta, StoryObj } from '@storybook/react-native';
import { View, StyleSheet } from 'react-native';
import { Icon } from './Icon';
import { ThemeProvider } from '../../../context/ThemeContext';

const meta: Meta<typeof Icon> = {
  title: 'Atoms/Icon',
  component: Icon,
  decorators: [
    (Story) => (
      <ThemeProvider>
        <View style={styles.container}>
          <Story />
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        component: 'A consistent icon wrapper with sizing, colors, and accessibility features.',
      },
    },
  },
  argTypes: {
    name: {
      control: 'select',
      options: [
        'home', 'settings', 'person', 'notifications', 'search', 'add', 'close',
        'checkmark', 'heart', 'star', 'bookmark', 'share', 'download', 'upload',
        'pencil', 'trash', 'camera', 'image', 'mail', 'call', 'location'
      ],
      description: 'Ionicon name to display',
    },
    size: {
      control: 'select',
      options: ['xs', 'sm', 'md', 'lg', 'xl', '2xl'],
      description: 'Icon size',
    },
    color: {
      control: 'select',
      options: [
        'primary', 'secondary', 'tertiary', 'disabled', 'inverse',
        'success', 'warning', 'error'
      ],
      description: 'Icon color from theme',
    },
    background: {
      control: 'boolean',
      description: 'Show background circle',
    },
    disabled: {
      control: 'boolean',
      description: 'Disabled state',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Icon>;

// Basic icon
export const Default: Story = {
  args: {
    name: 'home',
  },
};

// All sizes
export const Sizes: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="home" size="xs" />
      <Icon name="home" size="sm" />
      <Icon name="home" size="md" />
      <Icon name="home" size="lg" />
      <Icon name="home" size="xl" />
      <Icon name="home" size="2xl" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Icons in different sizes: xs, sm, md, lg, xl, 2xl',
      },
    },
  },
};

// All colors
export const Colors: Story = {
  render: () => (
    <View style={styles.grid}>
      <Icon name="heart" color="primary" />
      <Icon name="heart" color="secondary" />
      <Icon name="heart" color="tertiary" />
      <Icon name="heart" color="success" />
      <Icon name="heart" color="warning" />
      <Icon name="heart" color="error" />
      <Icon name="heart" color="disabled" />
      <Icon name="heart" color="inverse" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Icons with different semantic colors from the theme',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="star" color="#ff6b6b" />
      <Icon name="star" color="#4ecdc4" />
      <Icon name="star" color="#45b7d1" />
      <Icon name="star" color="#96ceb4" />
      <Icon name="star" color="#feca57" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Icons with custom hex colors',
      },
    },
  },
};

// With background
export const WithBackground: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="settings" background />
      <Icon name="settings" background size="lg" />
      <Icon name="settings" background size="xl" color="primary" />
      <Icon name="settings" background backgroundColor="#e3f2fd" color="primary" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Icons with background circles in different sizes and colors',
      },
    },
  },
};

// Interactive icons
export const Interactive: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon 
        name="heart" 
        onPress={() => console.log('Heart pressed')} 
        accessibilityLabel="Like button"
      />
      <Icon 
        name="bookmark" 
        onPress={() => console.log('Bookmark pressed')} 
        background
        accessibilityLabel="Bookmark button"
      />
      <Icon 
        name="share" 
        onPress={() => console.log('Share pressed')} 
        size="lg"
        color="primary"
        accessibilityLabel="Share button"
      />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Interactive icons that respond to press events',
      },
    },
  },
};

// Disabled state
export const Disabled: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="settings" disabled />
      <Icon name="settings" onPress={() => {}} disabled />
      <Icon name="settings" background disabled />
      <Icon name="settings" background onPress={() => {}} disabled />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Icons in disabled state with reduced opacity',
      },
    },
  },
};

// Common use cases
export const CommonUseCases: Story = {
  render: () => (
    <View style={styles.grid}>
      <Icon name="home" accessibilityLabel="Home" />
      <Icon name="search" accessibilityLabel="Search" />
      <Icon name="notifications" accessibilityLabel="Notifications" />
      <Icon name="person" accessibilityLabel="Profile" />
      <Icon name="settings" accessibilityLabel="Settings" />
      <Icon name="add" background color="primary" accessibilityLabel="Add new" />
      <Icon name="close" onPress={() => {}} accessibilityLabel="Close" />
      <Icon name="checkmark" color="success" accessibilityLabel="Success" />
      <Icon name="heart" color="error" accessibilityLabel="Favorite" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Common icon use cases with proper accessibility labels',
      },
    },
  },
};

// Navigation icons
export const NavigationIcons: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="arrow-back" onPress={() => {}} accessibilityLabel="Go back" />
      <Icon name="arrow-forward" onPress={() => {}} accessibilityLabel="Go forward" />
      <Icon name="arrow-up" onPress={() => {}} accessibilityLabel="Go up" />
      <Icon name="arrow-down" onPress={() => {}} accessibilityLabel="Go down" />
      <Icon name="menu" onPress={() => {}} accessibilityLabel="Open menu" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Navigation icons commonly used in app interfaces',
      },
    },
  },
};

// Action icons
export const ActionIcons: Story = {
  render: () => (
    <View style={styles.grid}>
      <Icon name="pencil" onPress={() => {}} accessibilityLabel="Edit" />
      <Icon name="trash" onPress={() => {}} color="error" accessibilityLabel="Delete" />
      <Icon name="download" onPress={() => {}} accessibilityLabel="Download" />
      <Icon name="share" onPress={() => {}} accessibilityLabel="Share" />
      <Icon name="copy" onPress={() => {}} accessibilityLabel="Copy" />
      <Icon name="save" onPress={() => {}} color="success" accessibilityLabel="Save" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Action icons for common user interactions',
      },
    },
  },
};

// Status icons
export const StatusIcons: Story = {
  render: () => (
    <View style={styles.row}>
      <Icon name="checkmark-circle" color="success" accessibilityLabel="Success" />
      <Icon name="warning" color="warning" accessibilityLabel="Warning" />
      <Icon name="close-circle" color="error" accessibilityLabel="Error" />
      <Icon name="information-circle" color="primary" accessibilityLabel="Information" />
      <Icon name="help-circle" color="secondary" accessibilityLabel="Help" />
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Status icons with appropriate semantic colors',
      },
    },
  },
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#ffffff',
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    flexWrap: 'wrap',
  },
  grid: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    flexWrap: 'wrap',
    maxWidth: 200,
  },
});
</file>

<file path="src/components/atoms/index.ts">
/**
 * Barrel exports for atomic components
 * 
 * These are the foundational building blocks of the design system.
 * Each component follows consistent design patterns and accessibility standards.
 */

export { Avatar } from './Avatar';
export { BackgroundPattern } from './BackgroundPattern';
export { Button } from './Button';
export { Icon } from './Icon';
export { Input } from './Input';
export { Typography } from './Typography';
</file>

<file path="src/components/atoms/Input/Input.test.tsx">
/**
 * Input Component Tests
 * Comprehensive test suite for all input variants, states, and functionality
 */

import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { Input } from './Input';

// Test wrapper with ThemeProvider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>{children}</ThemeProvider>
);

describe('Input Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders basic input', () => {
      render(
        <TestWrapper>
          <Input testID="basic-input" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('basic-input')).toBeTruthy();
    });

    it('renders with placeholder', () => {
      render(
        <TestWrapper>
          <Input placeholder="Enter text" testID="placeholder-input" />
        </TestWrapper>
      );
      
      expect(screen.getByPlaceholderText('Enter text')).toBeTruthy();
    });

    it('renders with initial value', () => {
      render(
        <TestWrapper>
          <Input value="Initial value" testID="value-input" />
        </TestWrapper>
      );
      
      expect(screen.getByDisplayValue('Initial value')).toBeTruthy();
    });
  });

  // Label tests
  describe('Labels', () => {
    it('renders with label', () => {
      render(
        <TestWrapper>
          <Input label="Email Address" testID="labeled-input" />
        </TestWrapper>
      );
      
      expect(screen.getByText('Email Address')).toBeTruthy();
    });

    it('renders required indicator', () => {
      render(
        <TestWrapper>
          <Input label="Required Field" required testID="required-input" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('required-input')).toBeTruthy();
      // Check that the label contains both the text and the required indicator
      expect(screen.getByText(/Required Field/)).toBeTruthy();
      expect(screen.getByText(/\*/)).toBeTruthy();
    });

    it('uses label as accessibility label', () => {
      render(
        <TestWrapper>
          <Input label="Email Address" testID="accessible-input" />
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Email Address')).toBeTruthy();
    });

    it('uses custom accessibility label', () => {
      render(
        <TestWrapper>
          <Input 
            label="Email" 
            accessibilityLabel="Email Address Input"
            testID="custom-accessible-input" 
          />
        </TestWrapper>
      );
      
      expect(screen.getByLabelText('Email Address Input')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    const variants = ['outlined', 'filled'] as const;

    variants.forEach(variant => {
      it(`renders ${variant} variant correctly`, () => {
        render(
          <TestWrapper>
            <Input variant={variant} testID={`input-${variant}`} />
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`input-${variant}`)).toBeTruthy();
      });
    });
  });

  // Size tests
  describe('Sizes', () => {
    const sizes = ['small', 'medium', 'large'] as const;

    sizes.forEach(size => {
      it(`renders ${size} size correctly`, () => {
        render(
          <TestWrapper>
            <Input size={size} testID={`input-${size}`} />
          </TestWrapper>
        );
        
        expect(screen.getByTestId(`input-${size}`)).toBeTruthy();
      });
    });
  });

  // State tests
  describe('States', () => {
    it('renders disabled state correctly', () => {
      const onChangeText = jest.fn();
      
      render(
        <TestWrapper>
          <Input disabled onChangeText={onChangeText} testID="disabled-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('disabled-input');
      expect(input.props.editable).toBe(false);
      expect(input.props.accessibilityState.disabled).toBe(true);
    });

    it('renders error state correctly', () => {
      render(
        <TestWrapper>
          <Input error errorText="This field is required" testID="error-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('error-input');
      expect(input.props.accessibilityState.disabled).toBe(false);
      expect(screen.getByText('This field is required')).toBeTruthy();
    });

    it('shows error text instead of helper text', () => {
      render(
        <TestWrapper>
          <Input 
            helperText="Helper text"
            error
            errorText="Error text"
            testID="error-priority-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByText('Error text')).toBeTruthy();
      expect(screen.queryByText('Helper text')).toBeFalsy();
    });
  });

  // Helper text tests
  describe('Helper Text', () => {
    it('renders helper text', () => {
      render(
        <TestWrapper>
          <Input helperText="This is helper text" testID="helper-input" />
        </TestWrapper>
      );
      
      expect(screen.getByText('This is helper text')).toBeTruthy();
    });

    it('renders error text', () => {
      render(
        <TestWrapper>
          <Input error errorText="This is error text" testID="error-text-input" />
        </TestWrapper>
      );
      
      expect(screen.getByText('This is error text')).toBeTruthy();
    });
  });

  // Character count tests
  describe('Character Count', () => {
    it('shows character count when enabled', () => {
      render(
        <TestWrapper>
          <Input 
            showCharacterCount
            maxLength={100}
            value="Test text"
            testID="character-count-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByText('9/100')).toBeTruthy();
    });

    it('updates character count on text change', () => {
      const TestComponent = () => {
        const [value, setValue] = React.useState('');
        return (
          <Input 
            showCharacterCount
            maxLength={50}
            value={value}
            onChangeText={setValue}
            testID="dynamic-count-input"
          />
        );
      };

      render(
        <TestWrapper>
          <TestComponent />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('dynamic-count-input');
      fireEvent.changeText(input, 'Hello World');
      
      expect(screen.getByText('11/50')).toBeTruthy();
    });

    it('shows error color when over limit', () => {
      render(
        <TestWrapper>
          <Input 
            showCharacterCount
            maxLength={5}
            value="This is too long"
            testID="over-limit-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByText('16/5')).toBeTruthy();
    });
  });

  // Icon tests
  describe('Icons', () => {
    it('renders with left icon', () => {
      render(
        <TestWrapper>
          <Input leftIcon="mail" testID="left-icon-input" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('left-icon-input')).toBeTruthy();
    });

    it('renders with right icon', () => {
      render(
        <TestWrapper>
          <Input rightIcon="eye" testID="right-icon-input" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('right-icon-input')).toBeTruthy();
    });

    it('calls onRightIconPress when right icon is pressed', () => {
      const onRightIconPress = jest.fn();
      
      render(
        <TestWrapper>
          <Input 
            rightIcon="eye"
            onRightIconPress={onRightIconPress}
            testID="pressable-icon-input"
          />
        </TestWrapper>
      );
      
      // The right icon should be wrapped in a TouchableOpacity
      // We need to find the icon and simulate press on its parent
      const input = screen.getByTestId('pressable-icon-input');
      expect(input).toBeTruthy();
      
      // Note: In a real test environment, you would need to find the TouchableOpacity
      // and fire a press event. This is a simplified test structure.
    });

    it('renders both left and right icons', () => {
      render(
        <TestWrapper>
          <Input 
            leftIcon="mail"
            rightIcon="eye"
            testID="both-icons-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('both-icons-input')).toBeTruthy();
    });
  });

  // Focus and blur tests
  describe('Focus and Blur', () => {
    it('calls onFocus when input is focused', () => {
      const onFocus = jest.fn();
      
      render(
        <TestWrapper>
          <Input onFocus={onFocus} testID="focus-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('focus-input');
      fireEvent(input, 'focus');
      
      expect(onFocus).toHaveBeenCalledTimes(1);
    });

    it('calls onBlur when input loses focus', () => {
      const onBlur = jest.fn();
      
      render(
        <TestWrapper>
          <Input onBlur={onBlur} testID="blur-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('blur-input');
      fireEvent(input, 'blur');
      
      expect(onBlur).toHaveBeenCalledTimes(1);
    });
  });

  // Text input tests
  describe('Text Input', () => {
    it('calls onChangeText when text changes', () => {
      const onChangeText = jest.fn();
      
      render(
        <TestWrapper>
          <Input onChangeText={onChangeText} testID="change-text-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('change-text-input');
      fireEvent.changeText(input, 'New text');
      
      expect(onChangeText).toHaveBeenCalledWith('New text');
    });

    it('respects maxLength prop', () => {
      render(
        <TestWrapper>
          <Input maxLength={10} testID="max-length-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('max-length-input');
      expect(input.props.maxLength).toBe(10);
    });

    it('supports multiline input', () => {
      render(
        <TestWrapper>
          <Input multiline testID="multiline-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('multiline-input');
      expect(input.props.multiline).toBe(true);
    });

    it('supports secure text entry', () => {
      render(
        <TestWrapper>
          <Input secureTextEntry testID="secure-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('secure-input');
      expect(input.props.secureTextEntry).toBe(true);
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility state when disabled', () => {
      render(
        <TestWrapper>
          <Input disabled testID="disabled-accessibility-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('disabled-accessibility-input');
      expect(input.props.accessibilityState.disabled).toBe(true);
    });

    it('has correct accessibility state when error', () => {
      render(
        <TestWrapper>
          <Input error testID="error-accessibility-input" />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('error-accessibility-input');
      expect(input.props.accessibilityState.disabled).toBe(false);
    });

    it('uses custom accessibility hint', () => {
      render(
        <TestWrapper>
          <Input 
            accessibilityHint="Enter your email address"
            testID="hint-input"
          />
        </TestWrapper>
      );
      
      const input = screen.getByTestId('hint-input');
      expect(input.props.accessibilityHint).toBe('Enter your email address');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom container style', () => {
      const customStyle = { marginBottom: 20 };
      
      render(
        <TestWrapper>
          <Input containerStyle={customStyle} testID="custom-container-input" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-container-input')).toBeTruthy();
    });

    it('applies custom input style', () => {
      const customStyle = { fontSize: 18 };
      
      render(
        <TestWrapper>
          <Input inputStyle={customStyle} testID="custom-input-style" />
        </TestWrapper>
      );
      
      expect(screen.getByTestId('custom-input-style')).toBeTruthy();
    });

    it('applies custom label style', () => {
      const customStyle = { color: 'blue' };
      
      render(
        <TestWrapper>
          <Input 
            label="Custom Label"
            labelStyle={customStyle}
            testID="custom-label-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByText('Custom Label')).toBeTruthy();
    });
  });

  // Complex combinations
  describe('Complex Combinations', () => {
    it('renders with all features combined', () => {
      const onChangeText = jest.fn();
      const onRightIconPress = jest.fn();
      
      render(
        <TestWrapper>
          <Input
            label="Email Address"
            placeholder="Enter your email"
            helperText="We'll never share your email"
            leftIcon="mail"
            rightIcon="eye"
            onRightIconPress={onRightIconPress}
            onChangeText={onChangeText}
            required
            showCharacterCount
            maxLength={50}
            variant="outlined"
            size="medium"
            testID="complex-input"
          />
        </TestWrapper>
      );
      
      expect(screen.getByText(/Email Address/)).toBeTruthy();
      expect(screen.getByText(/\*/)).toBeTruthy();
      expect(screen.getByPlaceholderText('Enter your email')).toBeTruthy();
      expect(screen.getByText("We'll never share your email")).toBeTruthy();
      expect(screen.getByText('0/50')).toBeTruthy();
      expect(screen.getByTestId('complex-input')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/atoms/LoadingSpinner/index.ts">
/**
 * LoadingSpinner Component Exports
 */

export { 
  LoadingSpinner,
  type LoadingSpinnerProps 
} from './LoadingSpinner';
export { default } from './LoadingSpinner';
</file>

<file path="src/components/index.ts">
/**
 * Main component barrel exports
 * 
 * This file provides a single entry point for importing all components
 * following the atomic design methodology: Atoms → Molecules → Organisms → Templates
 */

// Standalone components
export { LogoIcon } from './LogoIcon';

// Re-export from atomic design layers
export * from './atoms';
export * from './molecules';
export * from './organisms';
export * from './templates';
</file>

<file path="src/components/molecules/EmptyState/EmptyState.tsx">
/**
 * EmptyState Component
 * Consistent empty state display for all user roles
 */

import React from 'react';
import { View, ViewStyle, StyleSheet } from 'react-native';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';

// EmptyState Props Interface
export interface EmptyStateProps {
  // Content
  title?: string;
  message: string;
  icon?: string;
  
  // Actions
  actionLabel?: string;
  onAction?: () => void;
  
  // Variants
  variant?: 'default' | 'search' | 'notification' | 'data';
  
  // Layout
  fullScreen?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// EmptyState Component
export const EmptyState: React.FC<EmptyStateProps> = ({
  title,
  message,
  icon,
  actionLabel,
  onAction,
  variant = 'default',
  fullScreen = false,
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get icon name based on variant
  const getIconName = (): string => {
    if (icon) return icon;
    
    switch (variant) {
      case 'search':
        return 'search';
      case 'notification':
        return 'notifications-off';
      case 'data':
        return 'file-tray';
      default:
        return 'inbox';
    }
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      alignItems: 'center',
      justifyContent: 'center',
      padding: theme.spacing.base.xl,
    };

    if (fullScreen) {
      return {
        ...baseStyle,
        flex: 1,
      };
    }

    return {
      ...baseStyle,
      minHeight: 200,
    };
  };

  // Get text styles
  const getTextStyles = (): ViewStyle => ({
    alignItems: 'center',
  });

  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="text"
      accessibilityLabel={accessibilityLabel || `${title || 'Empty'}: ${message}`}
      testID={testID}
    >
      <View style={getTextStyles()} testID={testID ? `${testID}-content` : 'empty-state-content'}>
        <View style={{ marginBottom: theme.spacing.base.md }}>
          <Icon
            name={getIconName() as any}
            size="xl"
            color={colors.text.tertiary}
          />
        </View>
        
        {title && (
          <Typography
            variant="h4"
            color="secondary"
            weight="semibold"
            style={{ marginBottom: theme.spacing.base.sm }}
          >
            {title}
          </Typography>
        )}
        
        <Typography
          variant="body2"
          color="tertiary"
          align="center"
          style={{ 
            lineHeight: 20,
            maxWidth: 280,
            marginBottom: actionLabel ? theme.spacing.base.md : 0,
          }}
        >
          {message}
        </Typography>
        
        {actionLabel && onAction && (
          <Button
            variant="outline"
            size="medium"
            onPress={onAction}
            style={{ marginTop: theme.spacing.base.sm }}
          >
            {actionLabel}
          </Button>
        )}
      </View>
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Export default
export default EmptyState;
</file>

<file path="src/components/molecules/index.ts">
/**
 * Barrel exports for molecular components
 * 
 * These components combine atoms to create more complex UI elements
 * with specific functionality and consistent behavior patterns.
 */

export { Card } from './Card';
export { ListItem } from './ListItem';
export { NotificationItem } from './NotificationItem';
export { ProgressBar } from './ProgressBar';
export { QuickAction } from './QuickAction';
</file>

<file path="src/components/molecules/SkeletonCard/SkeletonCard.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { SkeletonCard } from './SkeletonCard';

// Mock the theme context
jest.mock('../../../context/ThemeContext', () => ({
  useTheme: () => ({
    theme: {
      spacing: {
        base: { xs: 4, sm: 8, md: 12, lg: 16 }
      },
      borderRadius: { sm: 4, md: 8 }
    }
  }),
  useColors: () => ({
    surface: { primary: '#ffffff', secondary: '#f8f9fa' },
    border: { primary: '#e9ecef' }
  }),
  ThemeProvider: ({ children }: { children: React.ReactNode }) => children,
}));

describe('SkeletonCard', () => {
  it('renders correctly with default props', () => {
    render(
      <ThemeProvider>
        <SkeletonCard />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('renders with small variant', () => {
    render(
      <ThemeProvider>
        <SkeletonCard variant="small" />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('renders with horizontal layout', () => {
    render(
      <ThemeProvider>
        <SkeletonCard horizontal={true} />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('renders with custom lines count', () => {
    render(
      <ThemeProvider>
        <SkeletonCard lines={5} />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-content')).toBeTruthy();
  });

  it('renders with avatar', () => {
    render(
      <ThemeProvider>
        <SkeletonCard showAvatar={true} />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('renders with compact variant', () => {
    render(
      <ThemeProvider>
        <SkeletonCard variant="compact" />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('renders with large variant', () => {
    render(
      <ThemeProvider>
        <SkeletonCard variant="large" />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });

  it('applies custom testID', () => {
    render(
      <ThemeProvider>
        <SkeletonCard testID="custom-skeleton-card" />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('custom-skeleton-card')).toBeTruthy();
    expect(screen.getByTestId('custom-skeleton-card-content')).toBeTruthy();
  });

  it('applies custom style', () => {
    render(
      <ThemeProvider>
        <SkeletonCard style={{ margin: 10 }} />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('skeleton-card')).toBeTruthy();
  });
});
</file>

<file path="src/components/organisms/AnimatedSplashScreen.tsx">
import React, { useEffect, useRef } from 'react';
import { Animated, StyleSheet, View, ActivityIndicator } from 'react-native';

interface AnimatedSplashScreenProps {
  onAnimationFinish?: () => void;
}

const AnimatedSplashScreen: React.FC<AnimatedSplashScreenProps> = ({ onAnimationFinish }) => {
  const scale = useRef(new Animated.Value(1)).current;

  useEffect(() => {
    const animation = Animated.timing(scale, {
      toValue: 0.8,
      duration: 1000,
      useNativeDriver: true,
    });

    animation.start(() => {
      // Call the callback function instead of navigating directly
      onAnimationFinish?.();
    });

    return () => {
      animation.stop();
    };
  }, [scale]); // Removed onAnimationFinish to prevent infinite restart

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.animationContainer, { transform: [{ scale }] }]}>
        <ActivityIndicator size="large" color="#ffffff" />
      </Animated.View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000000', // Or your app's background color
  },
  animationContainer: {
    width: 200,
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default AnimatedSplashScreen;
</file>

<file path="src/components/organisms/AuthForm.tsx">
import React, { useState } from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import { supabase } from '@/src/utils/supabase';
import { Button } from '@/src/components/atoms/Button';
import { Input } from '@/src/components/atoms/Input';
import { Typography } from '@/src/components/atoms/Typography';
import { useColors } from '@/src/context/ThemeContext';
import { baseColors } from '@/src/styles/colors';

interface AuthFormProps {
  role?: string | null;
  isManagementScreen?: boolean;
}

export default function AuthForm({ role, isManagementScreen = false }: AuthFormProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [otpCode, setOtpCode] = useState('');
  const [mode, setMode] = useState<'login' | 'reset' | 'otp' | 'otp-verify'>('login');
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const colors = useColors();

  async function handleLogin() {
    if (!email || !password) {
      setErrorMessage('Please enter both email and password.');
      return;
    }
    setIsLoading(true);
    setErrorMessage('');

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      setErrorMessage(error.message);
    }
    setIsLoading(false);
  }

  async function handleSendOTP() {
    if (!email) {
      setErrorMessage('Please enter your email address.');
      return;
    }
    setIsLoading(true);
    setErrorMessage('');

    const { error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        shouldCreateUser: false, // B2B: Only existing users
      }
    });

    if (error) {
      setErrorMessage(error.message);
    } else {
      Alert.alert('Check your email', 'We\'ve sent you a 6-digit code.');
      setMode('otp-verify');
    }
    setIsLoading(false);
  }

  async function handleVerifyOTP() {
    if (!email || !otpCode) {
      setErrorMessage('Please enter both email and verification code.');
      return;
    }
    
    if (otpCode.length !== 6) {
      setErrorMessage('Please enter a valid 6-digit code.');
      return;
    }

    setIsLoading(true);
    setErrorMessage('');

    const { error } = await supabase.auth.verifyOtp({
      email,
      token: otpCode,
      type: 'email',
    });

    if (error) {
      setErrorMessage(error.message);
    }
    setIsLoading(false);
  }

  async function handleSendReset() {
    if (!email) {
      setErrorMessage('Please enter your email address.');
      return;
    }
    setIsLoading(true);
    setErrorMessage('');

    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: 'madraxis://reset-password',
    });

    if (error) {
      setErrorMessage(error.message);
    } else {
      Alert.alert('Check your email', 'We\'ve sent you a link to set your password.');
      setMode('login');
    }
    setIsLoading(false);
  }

  return (
    <View style={styles.formContainer}>
      {errorMessage ? (
        <View style={[styles.errorContainer, { backgroundColor: baseColors.error[100] }]}>
          <Typography color="error" align="center">{errorMessage}</Typography>
        </View>
      ) : null}
      
      <Input
        label="Email"
        placeholder="Enter your email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
        autoCapitalize="none"
        editable={!isLoading && mode !== 'otp-verify'}
        leftIcon="mail-outline"
      />

      {mode === 'login' && (
        <Input
          label="Password"
          placeholder="Enter your password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          autoCapitalize="none"
          editable={!isLoading}
          leftIcon="lock-closed-outline"
        />
      )}

      {mode === 'otp-verify' && (
        <Input
          label="Verification Code"
          placeholder="000000"
          value={otpCode}
          onChangeText={(text) => setOtpCode(text.replace(/[^0-9]/g, '').slice(0, 6))}
          keyboardType="number-pad"
          maxLength={6}
          editable={!isLoading}
          textAlign="center"
          helperText="Enter the 6-digit code sent to your email"
        />
      )}

      {/* Main Action Buttons */}
      {mode === 'login' ? (
        <Button
          variant="primary"
          size="large"
          fullWidth
          onPress={handleLogin}
          disabled={isLoading}
          loading={isLoading}
          icon="log-in-outline"
          iconPosition="left"
        >
          Login with Password
        </Button>
      ) : mode === 'otp' ? (
        <Button
          variant="primary"
          size="large"
          fullWidth
          onPress={handleSendOTP}
          disabled={isLoading}
          loading={isLoading}
          icon="mail-outline"
          iconPosition="left"
        >
          Send Code
        </Button>
      ) : mode === 'otp-verify' ? (
        <Button
          variant="primary"
          size="large"
          fullWidth
          onPress={handleVerifyOTP}
          disabled={isLoading}
          loading={isLoading}
          icon="checkmark-outline"
          iconPosition="left"
        >
          Verify Code
        </Button>
      ) : (
        <Button
          variant="primary"
          size="large"
          fullWidth
          onPress={handleSendReset}
          disabled={isLoading}
          loading={isLoading}
          icon="mail-outline"
          iconPosition="left"
        >
          Send Reset Link
        </Button>
      )}

      {/* Mode Toggle Links */}
      {mode === 'login' && (
        <>
          <Button
            variant="ghost"
            size="medium"
            onPress={() => setMode('otp')}
            style={styles.toggleButton}
          >
            Or login with code instead
          </Button>
          <Button
            variant="ghost"
            size="medium"
            onPress={() => setMode('reset')}
            style={styles.toggleButton}
          >
            Forgot password? Set/Reset Password
          </Button>
        </>
      )}

      {mode === 'otp' && (
        <Button
          variant="ghost"
          size="medium"
          onPress={() => setMode('login')}
          style={styles.toggleButton}
        >
          Back to password login
        </Button>
      )}

      {mode === 'otp-verify' && (
        <>
          <Button
            variant="ghost"
            size="medium"
            onPress={handleSendOTP}
            disabled={isLoading}
            style={styles.toggleButton}
          >
            Resend code
          </Button>
          <Button
            variant="ghost"
            size="medium"
            onPress={() => setMode('login')}
            style={styles.toggleButton}
          >
            Back to login
          </Button>
        </>
      )}

      {mode === 'reset' && (
        <Button
          variant="ghost"
          size="medium"
          onPress={() => setMode('login')}
          style={styles.toggleButton}
        >
          Back to Login
        </Button>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  formContainer: {
    paddingHorizontal: 16,
    gap: 16,
  },
  errorContainer: {
    padding: 12,
    borderRadius: 8,
  },
  toggleButton: {
    marginTop: 8,
  },
});
</file>

<file path="src/components/organisms/DashboardContent/DashboardContent.tsx">
/**
 * DashboardContent Component
 * Reusable dashboard content container with progress tracking and quick actions
 */

import React from 'react';
import { ScrollView, View, StyleSheet } from 'react-native';
import { useTheme } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Card } from '../../molecules/Card';
import { QuickAction } from '../../molecules/QuickAction';
import { ProgressBar } from '../../molecules/ProgressBar';
import type { QuickActionConfig, ProgressConfig } from '../../../types/dashboard';

// DashboardContent Props Interface
export interface DashboardContentProps {
  // Quick actions configuration
  quickActions: QuickActionConfig[];
  
  // Progress data
  progressData: ProgressConfig[];
  
  // Loading state
  loading?: boolean;
  
  // Custom content
  children?: React.ReactNode;
  
  // Test ID
  testID?: string;
}

// DashboardContent Component
export const DashboardContent: React.FC<DashboardContentProps> = React.memo(({
  quickActions,
  progressData,
  loading = false,
  children,
  testID,
}) => {
  const { theme } = useTheme();

  // Create styles
  const styles = createStyles(theme);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Typography variant="body1" color="secondary">
          Loading dashboard...
        </Typography>
      </View>
    );
  }

  return (
    <ScrollView
      style={styles.container}
      contentContainerStyle={styles.contentContainer}
      showsVerticalScrollIndicator={false}
      testID={testID}
    >
      {/* Quick Actions Section */}
      <Card style={styles.section}>
        <Typography 
          variant="h4" 
          style={styles.sectionTitle}
          accessibilityRole="header"
        >
          Quick Actions
        </Typography>
        <View style={styles.quickActionsGrid}>
          {quickActions.map((action, index) => (
            <QuickAction
              key={`${action.title}-${index}`}
              style={styles.quickActionItem}
              {...action}
              accessibilityRole="button"
            />
          ))}
        </View>
      </Card>

      {/* Progress Section */}
      <Card style={styles.section}>
        <Typography 
          variant="h4" 
          style={styles.sectionTitle}
          accessibilityRole="header"
        >
          Academic Progress
        </Typography>
        <View style={styles.progressContainer}>
          {progressData.map((progress, index) => (
            <ProgressBar
              key={`${progress.label}-${index}`}
              style={styles.progressItem}
              showLabel
              showPercentage
              {...progress}
            />
          ))}
        </View>
      </Card>

      {/* Custom Content */}
      {children && (
        <View style={styles.contentContainer}>
          {children}
        </View>
      )}
    </ScrollView>
  );
});

// Create styles function
const createStyles = (theme: any) => StyleSheet.create({
  container: {
    flex: 1,
  },
  contentContainer: {
    padding: theme.spacing.md,
    paddingBottom: theme.spacing.lg,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  section: {
    padding: theme.spacing.md,
    marginBottom: theme.spacing.lg,
  },
  sectionTitle: {
    color: theme.colors.text.primary,
    marginBottom: theme.spacing.md,
  },
  quickActionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    gap: theme.spacing.sm,
  },
  quickActionItem: {
    flex: 1,
    minWidth: 150,
    maxWidth: '48%',
  },
  progressContainer: {
    gap: theme.spacing.sm,
  },
  progressItem: {
    marginBottom: theme.spacing.sm,
  },
});

// Set display name
DashboardContent.displayName = 'DashboardContent';

// Export default
export default DashboardContent;
</file>

<file path="src/components/organisms/ErrorBoundary/ErrorBoundary.tsx">
/**
 * ErrorBoundary Component
 * Consistent error boundary for handling React errors across all user roles
 */

import React, { Component, ErrorInfo, ReactNode } from 'react';
import { View, ViewStyle, StyleSheet } from 'react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { ErrorMessage } from '../../molecules/ErrorMessage/ErrorMessage';

// ErrorBoundary Props Interface
export interface ErrorBoundaryProps {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
  resetOnRetry?: boolean;
}

// ErrorBoundary State Interface
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

// ErrorBoundary Component
export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
    };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return {
      hasError: true,
      error,
      errorInfo: null,
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    
    this.setState({
      error,
      errorInfo,
    });

    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  handleRetry = (): void => {
    if (this.props.resetOnRetry) {
      this.setState({
        hasError: false,
        error: null,
        errorInfo: null,
      });
    } else {
      // Reload the app
      if (typeof window !== 'undefined' && window.location) {
        window.location.reload();
      }
    }
  };

  render(): ReactNode {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <ThemeProvider>
          <View style={styles.container}>
            <ErrorMessage
              title="Something went wrong"
              message={this.state.error?.message || 'An unexpected error occurred. Please try again.'}
              onRetry={this.handleRetry}
              retryLabel="Reload App"
              variant="error"
              fullScreen={true}
              testID="error-boundary-message"
            />
          </View>
        </ThemeProvider>
      );
    }

    return this.props.children;
  }
}

// Internal styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

// Export default
export default ErrorBoundary;
</file>

<file path="src/components/organisms/Header/Header.test.tsx">
/**
 * Header Component Tests
 * Unit tests for the Header component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Header } from './Header';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('Header Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders title correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <Header title="Test Header" />
        </TestWrapper>
      );

      expect(getByText('Test Header')).toBeTruthy();
    });

    it('renders title and subtitle correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <Header title="Test Header" subtitle="Test Subtitle" />
        </TestWrapper>
      );

      expect(getByText('Test Header')).toBeTruthy();
      expect(getByText('Test Subtitle')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Test Header" testID="test-header" />
        </TestWrapper>
      );

      const header = getByTestId('test-header');
      expect(header).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Default Header" variant="default" testID="default-header" />
        </TestWrapper>
      );

      const header = getByTestId('default-header');
      expect(header).toBeTruthy();
    });

    it('renders transparent variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Transparent Header" variant="transparent" testID="transparent-header" />
        </TestWrapper>
      );

      const header = getByTestId('transparent-header');
      expect(header).toBeTruthy();
    });

    it('renders elevated variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Elevated Header" variant="elevated" testID="elevated-header" />
        </TestWrapper>
      );

      const header = getByTestId('elevated-header');
      expect(header).toBeTruthy();
    });
  });

  // Left action tests
  describe('Left Action', () => {
    it('renders left action button', () => {
      const mockOnPress = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Header with Back"
            leftAction={{
              icon: 'arrow-back',
              onPress: mockOnPress,
              accessibilityLabel: 'Go back',
            }}
          />
        </TestWrapper>
      );

      const backButton = getByLabelText('Go back');
      expect(backButton).toBeTruthy();
    });

    it('handles left action press', () => {
      const mockOnPress = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Header with Back"
            leftAction={{
              icon: 'arrow-back',
              onPress: mockOnPress,
              accessibilityLabel: 'Go back',
            }}
          />
        </TestWrapper>
      );

      const backButton = getByLabelText('Go back');
      fireEvent.press(backButton);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('does not render left action when not provided', () => {
      const { queryByLabelText } = render(
        <TestWrapper>
          <Header title="Header without Back" />
        </TestWrapper>
      );

      const backButton = queryByLabelText('Go back');
      expect(backButton).toBeNull();
    });
  });

  // Right actions tests
  describe('Right Actions', () => {
    it('renders single right action', () => {
      const mockOnPress = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Header with Action"
            rightActions={[
              {
                icon: 'settings',
                onPress: mockOnPress,
                accessibilityLabel: 'Settings',
              },
            ]}
          />
        </TestWrapper>
      );

      const settingsButton = getByLabelText('Settings');
      expect(settingsButton).toBeTruthy();
    });

    it('renders multiple right actions', () => {
      const mockOnPress1 = jest.fn();
      const mockOnPress2 = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Header with Actions"
            rightActions={[
              {
                icon: 'search',
                onPress: mockOnPress1,
                accessibilityLabel: 'Search',
              },
              {
                icon: 'settings',
                onPress: mockOnPress2,
                accessibilityLabel: 'Settings',
              },
            ]}
          />
        </TestWrapper>
      );

      const searchButton = getByLabelText('Search');
      const settingsButton = getByLabelText('Settings');
      expect(searchButton).toBeTruthy();
      expect(settingsButton).toBeTruthy();
    });

    it('handles right action press', () => {
      const mockOnPress = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Header with Action"
            rightActions={[
              {
                icon: 'settings',
                onPress: mockOnPress,
                accessibilityLabel: 'Settings',
              },
            ]}
          />
        </TestWrapper>
      );

      const settingsButton = getByLabelText('Settings');
      fireEvent.press(settingsButton);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('does not render right actions when not provided', () => {
      const { queryByLabelText } = render(
        <TestWrapper>
          <Header title="Header without Actions" />
        </TestWrapper>
      );

      const settingsButton = queryByLabelText('Settings');
      expect(settingsButton).toBeNull();
    });
  });

  // Badge tests
  describe('Badges', () => {
    it('renders badge on action button', () => {
      const { getByText } = render(
        <TestWrapper>
          <Header
            title="Header with Badge"
            rightActions={[
              {
                icon: 'notifications',
                onPress: () => {},
                badge: 5,
                accessibilityLabel: 'Notifications',
              },
            ]}
          />
        </TestWrapper>
      );

      expect(getByText('5')).toBeTruthy();
    });

    it('shows 99+ for badges over 99', () => {
      const { getByText } = render(
        <TestWrapper>
          <Header
            title="Header with Large Badge"
            rightActions={[
              {
                icon: 'notifications',
                onPress: () => {},
                badge: 150,
                accessibilityLabel: 'Notifications',
              },
            ]}
          />
        </TestWrapper>
      );

      expect(getByText('99+')).toBeTruthy();
    });

    it('does not show badge when badge is 0', () => {
      const { queryByText } = render(
        <TestWrapper>
          <Header
            title="Header with Zero Badge"
            rightActions={[
              {
                icon: 'notifications',
                onPress: () => {},
                badge: 0,
                accessibilityLabel: 'Notifications',
              },
            ]}
          />
        </TestWrapper>
      );

      expect(queryByText('0')).toBeNull();
    });

    it('does not show badge when not provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Header without Badge"
            rightActions={[
              {
                icon: 'notifications',
                onPress: () => {},
                accessibilityLabel: 'Notifications',
              },
            ]}
            testID="no-badge-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('no-badge-header');
      expect(header).toBeTruthy();
      // Badge should not be present
    });
  });

  // Title alignment tests
  describe('Title Alignment', () => {
    it('centers title by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Centered Title" testID="centered-header" />
        </TestWrapper>
      );

      const header = getByTestId('centered-header');
      expect(header).toBeTruthy();
    });

    it('centers title when centerTitle is true', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Centered Title" centerTitle={true} testID="centered-header" />
        </TestWrapper>
      );

      const header = getByTestId('centered-header');
      expect(header).toBeTruthy();
    });

    it('left-aligns title when centerTitle is false', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Left Title" centerTitle={false} testID="left-header" />
        </TestWrapper>
      );

      const header = getByTestId('left-header');
      expect(header).toBeTruthy();
    });
  });

  // Custom colors tests
  describe('Custom Colors', () => {
    it('accepts custom background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Custom Background"
            backgroundColor="#ff0000"
            testID="custom-bg-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('custom-bg-header');
      expect(header).toBeTruthy();
    });

    it('accepts custom text color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Custom Text Color"
            textColor="#00ff00"
            testID="custom-text-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('custom-text-header');
      expect(header).toBeTruthy();
    });

    it('accepts both custom colors', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Custom Colors"
            backgroundColor="#000000"
            textColor="#ffffff"
            testID="custom-colors-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('custom-colors-header');
      expect(header).toBeTruthy();
    });
  });

  // Status bar tests
  describe('Status Bar', () => {
    it('shows status bar by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="With Status Bar" testID="status-bar-header" />
        </TestWrapper>
      );

      const header = getByTestId('status-bar-header');
      expect(header).toBeTruthy();
    });

    it('hides status bar when showStatusBar is false', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Without Status Bar" showStatusBar={false} testID="no-status-bar-header" />
        </TestWrapper>
      );

      const header = getByTestId('no-status-bar-header');
      expect(header).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility role', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Accessible Header" testID="accessible-header" />
        </TestWrapper>
      );

      const header = getByTestId('accessible-header');
      expect(header.props.accessibilityRole).toBe('header');
    });

    it('generates accessibility label from title', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header title="Test Header" testID="auto-label-header" />
        </TestWrapper>
      );

      const header = getByTestId('auto-label-header');
      expect(header.props.accessibilityLabel).toBe('Header: Test Header');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Custom Label Header"
            accessibilityLabel="Custom header label"
            testID="custom-label-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('custom-label-header');
      expect(header.props.accessibilityLabel).toBe('Custom header label');
    });

    it('provides proper accessibility for action buttons', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Accessible Actions"
            rightActions={[
              {
                icon: 'settings',
                onPress: () => {},
                accessibilityLabel: 'Settings',
                accessibilityHint: 'Open settings menu',
              },
            ]}
          />
        </TestWrapper>
      );

      const settingsButton = getByLabelText('Settings');
      expect(settingsButton.props.accessibilityRole).toBe('button');
      expect(settingsButton.props.accessibilityHint).toBe('Open settings menu');
    });

    it('provides default accessibility labels for actions', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <Header
            title="Default Action Labels"
            rightActions={[
              {
                icon: 'settings',
                onPress: () => {},
              },
            ]}
          />
        </TestWrapper>
      );

      const actionButton = getByLabelText('Action 1');
      expect(actionButton).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2 };
      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Custom Styled Header"
            style={customStyle}
            testID="custom-styled-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('custom-styled-header');
      expect(header).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles long titles gracefully', () => {
      const longTitle = 'This is a very long header title that should be truncated properly when it exceeds the available space';
      const { getByText } = render(
        <TestWrapper>
          <Header title={longTitle} />
        </TestWrapper>
      );

      expect(getByText(longTitle)).toBeTruthy();
    });

    it('handles long subtitles gracefully', () => {
      const longSubtitle = 'This is a very long subtitle that should also be truncated when needed';
      const { getByText } = render(
        <TestWrapper>
          <Header title="Short Title" subtitle={longSubtitle} />
        </TestWrapper>
      );

      expect(getByText(longSubtitle)).toBeTruthy();
    });

    it('handles many right actions', () => {
      const manyActions = Array.from({ length: 5 }, (_, i) => ({
        icon: 'star' as const,
        onPress: () => {},
        accessibilityLabel: `Action ${i + 1}`,
      }));

      const { getByTestId } = render(
        <TestWrapper>
          <Header
            title="Many Actions"
            rightActions={manyActions}
            testID="many-actions-header"
          />
        </TestWrapper>
      );

      const header = getByTestId('many-actions-header');
      expect(header).toBeTruthy();
    });

    it('handles negative badge values', () => {
      const { queryByText } = render(
        <TestWrapper>
          <Header
            title="Negative Badge"
            rightActions={[
              {
                icon: 'notifications',
                onPress: () => {},
                badge: -5,
                accessibilityLabel: 'Notifications',
              },
            ]}
          />
        </TestWrapper>
      );

      // Negative badges should not be shown
      expect(queryByText('-5')).toBeNull();
    });
  });
});
</file>

<file path="src/components/organisms/Header/Header.tsx">
/**
 * Header Component
 * Consistent page header with title positioning, action buttons, and notification icons
 */

import React from 'react';
import {
  View,
  TouchableOpacity,
  ViewStyle,
  StyleSheet,
  StatusBar,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';

// Header action interface
export interface HeaderAction {
  icon: keyof typeof Ionicons.glyphMap;
  onPress: () => void;
  badge?: number;
  badgeColor?: string;
  accessibilityLabel?: string;
  accessibilityHint?: string;
  testID?: string;
}

// Header Props Interface
export interface HeaderProps {
  // Content
  title: string;
  subtitle?: string;
  
  // Left action (typically back button)
  leftAction?: HeaderAction;
  
  // Right actions (notifications, settings, etc.)
  rightActions?: HeaderAction[];
  
  // Visual options
  variant?: 'default' | 'transparent' | 'elevated';
  
  // Colors
  backgroundColor?: string;
  textColor?: string;
  
  // Layout options
  centerTitle?: boolean;
  showStatusBar?: boolean;
  statusBarStyle?: 'default' | 'light-content' | 'dark-content';
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// Header Component
export const Header: React.FC<HeaderProps> = ({
  title,
  subtitle,
  leftAction,
  rightActions = [],
  variant = 'default',
  backgroundColor,
  textColor,
  centerTitle = true,
  showStatusBar = true,
  statusBarStyle = 'dark-content',
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get header background color
  const getBackgroundColor = (): string => {
    if (backgroundColor) return backgroundColor;
    
    const variantBackgrounds = {
      default: colors.surface.primary,
      transparent: 'transparent',
      elevated: colors.surface.primary,
    };
    
    return variantBackgrounds[variant];
  };

  // Get text color
  const getTextColor = (): string => {
    if (textColor) return textColor;
    return colors.text.primary;
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: getBackgroundColor(),
      paddingHorizontal: theme.spacing.base.md,
      paddingTop: showStatusBar ? (StatusBar.currentHeight || 0) + theme.spacing.base.sm : theme.spacing.base.sm,
      paddingBottom: theme.spacing.base.sm,
      minHeight: 56 + (showStatusBar ? (StatusBar.currentHeight || 0) : 0),
    };

    // Add shadow for elevated variant
    if (variant === 'elevated') {
      return {
        ...baseStyle,
        ...theme.shadows.header,
      };
    }

    return baseStyle;
  };

  // Get content container styles
  const getContentStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      minHeight: 44, // Minimum touch target
    };
  };

  // Get title container styles
  const getTitleContainerStyles = (): ViewStyle => {
    const hasLeftAction = !!leftAction;
    const hasRightActions = rightActions.length > 0;
    
    if (centerTitle) {
      return {
        flex: 1,
        alignItems: 'center',
        marginHorizontal: theme.spacing.base.sm,
      };
    }
    
    return {
      flex: 1,
      alignItems: 'flex-start',
      marginLeft: hasLeftAction ? theme.spacing.base.sm : 0,
      marginRight: hasRightActions ? theme.spacing.base.sm : 0,
    };
  };

  // Get actions container styles
  const getActionsContainerStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      alignItems: 'center',
      gap: theme.spacing.base.xs,
    };
  };

  // Get badge styles
  const getBadgeStyles = (badgeColor?: string): ViewStyle => {
    const badgeSize = 16;
    
    return {
      position: 'absolute',
      top: -4,
      right: -4,
      minWidth: badgeSize,
      height: badgeSize,
      borderRadius: badgeSize / 2,
      backgroundColor: badgeColor || colors.error.main,
      alignItems: 'center',
      justifyContent: 'center',
      paddingHorizontal: 4,
    };
  };

  // Render action button
  const renderActionButton = (action: HeaderAction, index: number) => {
    return (
      <TouchableOpacity
        key={index}
        style={styles.actionButton}
        onPress={action.onPress}
        accessibilityRole="button"
        accessibilityLabel={action.accessibilityLabel || `Action ${index + 1}`}
        accessibilityHint={action.accessibilityHint}
        testID={action.testID}
        activeOpacity={0.7}
      >
        <View style={{ position: 'relative' }}>
          <Icon
            name={action.icon}
            size="md"
            color={getTextColor()}
          />
          
          {action.badge && action.badge > 0 && (
            <View style={getBadgeStyles(action.badgeColor)}>
              <Typography
                variant="caption"
                color={colors.error.contrast}
                style={{
                  fontSize: 10,
                  fontWeight: 'bold',
                  lineHeight: 10,
                }}
              >
                {action.badge > 99 ? '99+' : action.badge.toString()}
              </Typography>
            </View>
          )}
        </View>
      </TouchableOpacity>
    );
  };

  // Render left section
  const renderLeftSection = () => {
    if (!leftAction) {
      return <View style={{ width: 44 }} />; // Spacer for centering
    }
    
    return renderActionButton(leftAction, -1);
  };

  // Render title section
  const renderTitleSection = () => {
    return (
      <View style={getTitleContainerStyles()}>
        <Typography
          variant="h4"
          color={getTextColor()}
          align={centerTitle ? 'center' : 'left'}
          numberOfLines={1}
          ellipsizeMode="tail"
          weight="semibold"
        >
          {title}
        </Typography>
        
        {subtitle && (
          <Typography
            variant="caption"
            color={colors.text.secondary}
            align={centerTitle ? 'center' : 'left'}
            numberOfLines={1}
            ellipsizeMode="tail"
            style={{ marginTop: 2 }}
          >
            {subtitle}
          </Typography>
        )}
      </View>
    );
  };

  // Render right section
  const renderRightSection = () => {
    if (rightActions.length === 0) {
      return <View style={{ width: 44 }} />; // Spacer for centering
    }
    
    return (
      <View style={getActionsContainerStyles()}>
        {rightActions.map((action, index) => renderActionButton(action, index))}
      </View>
    );
  };

  return (
    <>
      {showStatusBar && (
        <StatusBar
          barStyle={statusBarStyle}
          backgroundColor={getBackgroundColor()}
          translucent={Platform.OS === 'android'}
        />
      )}
      
      <View
        style={[getContainerStyles(), style]}
        accessibilityRole="header"
        accessibilityLabel={accessibilityLabel || `Header: ${title}`}
        testID={testID}
      >
        <View style={getContentStyles()}>
          {renderLeftSection()}
          {renderTitleSection()}
          {renderRightSection()}
        </View>
      </View>
    </>
  );
};

// Internal styles
const styles = StyleSheet.create({
  actionButton: {
    width: 44,
    height: 44,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 22,
  },
});

// Export default
export default Header;
</file>

<file path="src/components/organisms/Header/index.ts">
/**
 * Header Component Exports
 */

export { Header, type HeaderProps, type HeaderAction } from './Header';
export { default } from './Header';
</file>

<file path="src/components/organisms/index.ts">
/**
 * Barrel exports for organism components
 * 
 * These are complex components that combine molecules and atoms
 * to create distinct sections of interface with specific purposes.
 */

export { Header } from './Header';
export { Modal } from './Modal';
export { NavigationPanel } from './NavigationPanel';
export { TabBar } from './TabBar';
</file>

<file path="src/components/organisms/Modal/index.ts">
/**
 * Modal Component Exports
 */

export { Modal, type ModalProps, type ModalAction, type ModalSize } from './Modal';
export { default } from './Modal';
</file>

<file path="src/components/organisms/Modal/Modal.stories.tsx">
/**
 * Modal Component Stories
 * Storybook stories demonstrating all Modal component variants and use cases
 */

import React from 'react';
import { View, ScrollView } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { Modal } from './Modal';
import { Typography } from '../../atoms/Typography';
import { Button } from '../../atoms/Button';
import { Input } from '../../atoms/Input';
import { ListItem } from '../../molecules/ListItem';
import { Card } from '../../molecules/Card';

const meta: Meta<typeof Modal> = {
  title: 'Organisms/Modal',
  component: Modal,
  parameters: {
    docs: {
      description: {
        component: 'A consistent overlay component with header structure, close buttons, and content layouts.',
      },
    },
  },
  argTypes: {
    visible: {
      control: { type: 'boolean' },
      description: 'Whether the modal is visible',
    },
    title: {
      control: { type: 'text' },
      description: 'Modal title',
    },
    subtitle: {
      control: { type: 'text' },
      description: 'Optional subtitle',
    },
    size: {
      control: { type: 'select' },
      options: ['small', 'medium', 'large', 'fullscreen'],
      description: 'Modal size',
    },
    animationType: {
      control: { type: 'select' },
      options: ['slide', 'fade', 'none'],
      description: 'Animation type',
    },
    closeOnBackdrop: {
      control: { type: 'boolean' },
      description: 'Whether to close on backdrop press',
    },
    showCloseButton: {
      control: { type: 'boolean' },
      description: 'Whether to show close button',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Modal>;

// Basic modal
export const Default: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Open Modal
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Default Modal"
          subtitle="This is a basic modal example"
        >
          <Typography variant="body1">
            This is the modal content. You can put any content here including text, forms, lists, or other components.
          </Typography>
          
          <Typography variant="body2" color="secondary" style={{ marginTop: 16 }}>
            The modal will close when you tap the close button, press the back button, or tap outside the modal area.
          </Typography>
        </Modal>
      </View>
    );
  },
};

// Modal with actions
export const WithActions: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    
    const actions = [
      {
        label: 'Cancel',
        onPress: () => setVisible(false),
        variant: 'outline' as const,
      },
      {
        label: 'Save',
        onPress: () => {
          alert('Saved!');
          setVisible(false);
        },
        variant: 'primary' as const,
      },
    ];
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Open Modal with Actions
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Modal with Actions"
          subtitle="This modal has action buttons"
          actions={actions}
        >
          <Typography variant="body1">
            This modal includes action buttons at the bottom. You can customize the buttons with different variants and behaviors.
          </Typography>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with action buttons at the bottom.',
      },
    },
  },
};

// Different sizes
export const DifferentSizes: Story = {
  render: () => {
    const [smallVisible, setSmallVisible] = React.useState(false);
    const [mediumVisible, setMediumVisible] = React.useState(false);
    const [largeVisible, setLargeVisible] = React.useState(false);
    const [fullscreenVisible, setFullscreenVisible] = React.useState(false);
    
    return (
      <View style={{ gap: 12 }}>
        <Button onPress={() => setSmallVisible(true)}>
          Small Modal
        </Button>
        
        <Button onPress={() => setMediumVisible(true)}>
          Medium Modal
        </Button>
        
        <Button onPress={() => setLargeVisible(true)}>
          Large Modal
        </Button>
        
        <Button onPress={() => setFullscreenVisible(true)}>
          Fullscreen Modal
        </Button>
        
        <Modal
          visible={smallVisible}
          onClose={() => setSmallVisible(false)}
          title="Small Modal"
          size="small"
        >
          <Typography variant="body1">
            This is a small modal, perfect for simple confirmations or brief messages.
          </Typography>
        </Modal>
        
        <Modal
          visible={mediumVisible}
          onClose={() => setMediumVisible(false)}
          title="Medium Modal"
          size="medium"
        >
          <Typography variant="body1">
            This is a medium modal, good for forms and detailed content.
          </Typography>
        </Modal>
        
        <Modal
          visible={largeVisible}
          onClose={() => setLargeVisible(false)}
          title="Large Modal"
          size="large"
        >
          <Typography variant="body1">
            This is a large modal, suitable for complex forms or detailed information displays.
          </Typography>
        </Modal>
        
        <Modal
          visible={fullscreenVisible}
          onClose={() => setFullscreenVisible(false)}
          title="Fullscreen Modal"
          size="fullscreen"
        >
          <Typography variant="body1">
            This is a fullscreen modal that takes up the entire screen. Perfect for immersive experiences or complex workflows.
          </Typography>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Different modal sizes for various use cases.',
      },
    },
  },
};

// Form modal example
export const FormModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    const [name, setName] = React.useState('');
    const [email, setEmail] = React.useState('');
    const [message, setMessage] = React.useState('');
    
    const handleSubmit = () => {
      alert(`Form submitted!\nName: ${name}\nEmail: ${email}\nMessage: ${message}`);
      setVisible(false);
      // Reset form
      setName('');
      setEmail('');
      setMessage('');
    };
    
    const actions = [
      {
        label: 'Cancel',
        onPress: () => setVisible(false),
        variant: 'outline' as const,
      },
      {
        label: 'Submit',
        onPress: handleSubmit,
        variant: 'primary' as const,
        disabled: !name || !email,
      },
    ];
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Open Contact Form
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Contact Form"
          subtitle="Send us a message"
          actions={actions}
          size="medium"
        >
          <View style={{ gap: 16 }}>
            <Input
              label="Name"
              placeholder="Enter your name"
              value={name}
              onChangeText={setName}
            />
            
            <Input
              label="Email"
              placeholder="Enter your email"
              value={email}
              onChangeText={setEmail}
            />
            
            <Input
              label="Message"
              placeholder="Enter your message"
              value={message}
              onChangeText={setMessage}
              multiline
            />
          </View>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with a form and validation.',
      },
    },
  },
};

// Confirmation modal
export const ConfirmationModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    
    const actions = [
      {
        label: 'Cancel',
        onPress: () => setVisible(false),
        variant: 'outline' as const,
      },
      {
        label: 'Delete',
        onPress: () => {
          alert('Item deleted!');
          setVisible(false);
        },
        variant: 'danger' as const,
      },
    ];
    
    return (
      <View>
        <Button variant="danger" onPress={() => setVisible(true)}>
          Delete Item
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Confirm Deletion"
          actions={actions}
          size="small"
        >
          <Typography variant="body1">
            Are you sure you want to delete this item? This action cannot be undone.
          </Typography>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Confirmation modal for destructive actions.',
      },
    },
  },
};

// List modal
export const ListModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    const [selectedItem, setSelectedItem] = React.useState<string | null>(null);
    
    const items = [
      { id: '1', title: 'Mathematics', subtitle: 'Grade 10A - Room 201' },
      { id: '2', title: 'Science', subtitle: 'Grade 10A - Room 105' },
      { id: '3', title: 'English', subtitle: 'Grade 10A - Room 301' },
      { id: '4', title: 'History', subtitle: 'Grade 10A - Room 205' },
      { id: '5', title: 'Islamic Studies', subtitle: 'Grade 10A - Room 101' },
    ];
    
    const handleSelect = (itemId: string) => {
      setSelectedItem(itemId);
      const item = items.find(i => i.id === itemId);
      alert(`Selected: ${item?.title}`);
      setVisible(false);
    };
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Select Subject
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Select Subject"
          subtitle="Choose a subject from the list"
          size="medium"
        >
          <View>
            {items.map((item, index) => (
              <ListItem
                key={item.id}
                title={item.title}
                subtitle={item.subtitle}
                rightIcon="chevron-forward"
                onPress={() => handleSelect(item.id)}
                showDivider={index < items.length - 1}
              />
            ))}
          </View>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with a list of selectable items.',
      },
    },
  },
};

// Animation types
export const AnimationTypes: Story = {
  render: () => {
    const [slideVisible, setSlideVisible] = React.useState(false);
    const [fadeVisible, setFadeVisible] = React.useState(false);
    const [noneVisible, setNoneVisible] = React.useState(false);
    
    return (
      <View style={{ gap: 12 }}>
        <Button onPress={() => setSlideVisible(true)}>
          Slide Animation
        </Button>
        
        <Button onPress={() => setFadeVisible(true)}>
          Fade Animation
        </Button>
        
        <Button onPress={() => setNoneVisible(true)}>
          No Animation
        </Button>
        
        <Modal
          visible={slideVisible}
          onClose={() => setSlideVisible(false)}
          title="Slide Animation"
          animationType="slide"
        >
          <Typography variant="body1">
            This modal slides up from the bottom with a smooth animation.
          </Typography>
        </Modal>
        
        <Modal
          visible={fadeVisible}
          onClose={() => setFadeVisible(false)}
          title="Fade Animation"
          animationType="fade"
        >
          <Typography variant="body1">
            This modal fades in and out with opacity animation.
          </Typography>
        </Modal>
        
        <Modal
          visible={noneVisible}
          onClose={() => setNoneVisible(false)}
          title="No Animation"
          animationType="none"
        >
          <Typography variant="body1">
            This modal appears instantly without any animation.
          </Typography>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Different animation types for modal appearance.',
      },
    },
  },
};

// Student assignment modal
export const StudentAssignmentModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    
    const actions = [
      {
        label: 'Save Draft',
        onPress: () => {
          alert('Draft saved!');
          setVisible(false);
        },
        variant: 'outline' as const,
      },
      {
        label: 'Submit',
        onPress: () => {
          alert('Assignment submitted!');
          setVisible(false);
        },
        variant: 'primary' as const,
      },
    ];
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          View Assignment
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Mathematics Assignment"
          subtitle="Chapter 5: Quadratic Equations"
          actions={actions}
          size="large"
        >
          <ScrollView style={{ flex: 1 }}>
            <Card style={{ marginBottom: 16 }}>
              <Typography variant="h4" style={{ marginBottom: 8 }}>
                Assignment Details
              </Typography>
              <Typography variant="body2" color="secondary" style={{ marginBottom: 4 }}>
                Due Date: Tomorrow, 11:59 PM
              </Typography>
              <Typography variant="body2" color="secondary">
                Points: 100
              </Typography>
            </Card>
            
            <Typography variant="body1" style={{ marginBottom: 16 }}>
              Complete the following problems from Chapter 5 of your textbook:
            </Typography>
            
            <Typography variant="body1" style={{ marginBottom: 8 }}>
              1. Solve the quadratic equation: x² + 5x + 6 = 0
            </Typography>
            <Typography variant="body1" style={{ marginBottom: 8 }}>
              2. Find the roots of: 2x² - 7x + 3 = 0
            </Typography>
            <Typography variant="body1" style={{ marginBottom: 16 }}>
              3. Graph the function: f(x) = x² - 4x + 3
            </Typography>
            
            <Input
              label="Your Answer"
              placeholder="Type your answers here..."
              multiline
              value=""
              onChangeText={() => {}}
            />
          </ScrollView>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Student assignment modal with scrollable content.',
      },
    },
  },
};

// Teacher grade modal
export const TeacherGradeModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    const [grade, setGrade] = React.useState('');
    const [feedback, setFeedback] = React.useState('');
    
    const actions = [
      {
        label: 'Cancel',
        onPress: () => setVisible(false),
        variant: 'outline' as const,
      },
      {
        label: 'Save Grade',
        onPress: () => {
          alert(`Grade saved: ${grade}\nFeedback: ${feedback}`);
          setVisible(false);
        },
        variant: 'primary' as const,
        disabled: !grade,
      },
    ];
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Grade Assignment
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Grade Assignment"
          subtitle="Ahmed Al-Rashid - Mathematics"
          actions={actions}
          size="medium"
        >
          <View style={{ gap: 16 }}>
            <Card>
              <Typography variant="body2" color="secondary" style={{ marginBottom: 4 }}>
                Student Answer:
              </Typography>
              <Typography variant="body1">
                "The solutions to x² + 5x + 6 = 0 are x = -2 and x = -3, found using the quadratic formula."
              </Typography>
            </Card>
            
            <Input
              label="Grade (0-100)"
              placeholder="Enter grade"
              value={grade}
              onChangeText={setGrade}
            />
            
            <Input
              label="Feedback"
              placeholder="Enter feedback for the student"
              value={feedback}
              onChangeText={setFeedback}
              multiline
            />
          </View>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Teacher grading modal with form inputs.',
      },
    },
  },
};

// Parent meeting modal
export const ParentMeetingModal: Story = {
  render: () => {
    const [visible, setVisible] = React.useState(false);
    
    const actions = [
      {
        label: 'Decline',
        onPress: () => {
          alert('Meeting declined');
          setVisible(false);
        },
        variant: 'outline' as const,
      },
      {
        label: 'Accept',
        onPress: () => {
          alert('Meeting accepted!');
          setVisible(false);
        },
        variant: 'primary' as const,
      },
    ];
    
    return (
      <View>
        <Button onPress={() => setVisible(true)}>
          Meeting Invitation
        </Button>
        
        <Modal
          visible={visible}
          onClose={() => setVisible(false)}
          title="Parent-Teacher Meeting"
          subtitle="Meeting Request from Ms. Sarah"
          actions={actions}
          size="medium"
        >
          <View style={{ gap: 16 }}>
            <Card>
              <Typography variant="h4" style={{ marginBottom: 8 }}>
                Meeting Details
              </Typography>
              <Typography variant="body2" color="secondary" style={{ marginBottom: 4 }}>
                Date: Friday, March 15, 2024
              </Typography>
              <Typography variant="body2" color="secondary" style={{ marginBottom: 4 }}>
                Time: 3:00 PM - 3:30 PM
              </Typography>
              <Typography variant="body2" color="secondary">
                Location: Classroom 10A
              </Typography>
            </Card>
            
            <Typography variant="body1">
              I would like to discuss Ahmed's progress in Mathematics and his recent improvement in problem-solving skills. 
              We can also talk about upcoming projects and how to support his learning at home.
            </Typography>
            
            <Typography variant="body2" color="secondary">
              Please confirm your attendance by responding to this invitation.
            </Typography>
          </View>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Parent meeting invitation modal.',
      },
    },
  },
};

// Custom styling
export const CustomStyling: Story = {
  render: () => {
    const [visible1, setVisible1] = React.useState(false);
    const [visible2, setVisible2] = React.useState(false);
    
    return (
      <View style={{ gap: 12 }}>
        <Button onPress={() => setVisible1(true)}>
          Dark Theme Modal
        </Button>
        
        <Button onPress={() => setVisible2(true)}>
          Custom Colors Modal
        </Button>
        
        <Modal
          visible={visible1}
          onClose={() => setVisible1(false)}
          title="Dark Theme Modal"
          subtitle="Custom dark styling"
          backgroundColor="#1a1a1a"
          backdropColor="rgba(0, 0, 0, 0.8)"
        >
          <Typography variant="body1" color="#ffffff">
            This modal uses a dark theme with custom background and backdrop colors.
          </Typography>
        </Modal>
        
        <Modal
          visible={visible2}
          onClose={() => setVisible2(false)}
          title="Custom Colors"
          subtitle="Brand colors"
          backgroundColor="#e3f2fd"
          backdropColor="rgba(25, 118, 210, 0.3)"
        >
          <Typography variant="body1">
            This modal uses custom brand colors for a unique appearance.
          </Typography>
        </Modal>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Modals with custom colors and theming.',
      },
    },
  },
};
</file>

<file path="src/components/organisms/Modal/Modal.test.tsx">
/**
 * Modal Component Tests
 * Unit tests for the Modal component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent, act } from '@testing-library/react-native';
import { Text } from 'react-native';
import { Modal } from './Modal';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('Modal Component', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  // Helper function to run timers
  const runTimers = () => {
    act(() => {
      jest.runAllTimers();
    });
  };

  // Basic rendering tests
  describe('Rendering', () => {
    it('renders when visible is true', () => {
      const { getByText } = render(
        <TestWrapper>
          <Modal visible={true} onClose={() => {}}>
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(getByText('Modal Content')).toBeTruthy();
    });

    it('does not render when visible is false', () => {
      const { queryByText } = render(
        <TestWrapper>
          <Modal visible={false} onClose={() => {}}>
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(queryByText('Modal Content')).toBeNull();
    });

    it('renders with title and subtitle', () => {
      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            subtitle="Test Subtitle"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(getByText('Test Modal')).toBeTruthy();
      expect(getByText('Test Subtitle')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            testID="test-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('test-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Size tests
  describe('Sizes', () => {
    it('renders small size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            size="small"
            testID="small-modal"
          >
            <Text>Small Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('small-modal');
      expect(modal).toBeTruthy();
    });

    it('renders medium size (default)', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            size="medium"
            testID="medium-modal"
          >
            <Text>Medium Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('medium-modal');
      expect(modal).toBeTruthy();
    });

    it('renders large size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            size="large"
            testID="large-modal"
          >
            <Text>Large Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('large-modal');
      expect(modal).toBeTruthy();
    });

    it('renders fullscreen size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            size="fullscreen"
            testID="fullscreen-modal"
          >
            <Text>Fullscreen Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('fullscreen-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Close button tests
  describe('Close Button', () => {
    it('shows close button by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal visible={true} onClose={() => {}} title="Test Modal">
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const closeButton = getByTestId('modal-close-button');
      expect(closeButton).toBeTruthy();
    });

    it('hides close button when showCloseButton is false', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            showCloseButton={false}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const closeButton = queryByTestId('modal-close-button');
      expect(closeButton).toBeNull();
    });

    it('handles close button press', () => {
      const mockOnClose = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Modal visible={true} onClose={mockOnClose} title="Test Modal">
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const closeButton = getByTestId('modal-close-button');
      fireEvent.press(closeButton);
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
  });

  // Actions tests
  describe('Actions', () => {
    it('renders action buttons', () => {
      const actions = [
        { label: 'Cancel', onPress: () => {} },
        { label: 'Save', onPress: () => {} },
      ];

      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            actions={actions}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(getByText('Cancel')).toBeTruthy();
      expect(getByText('Save')).toBeTruthy();
    });

    it('handles action button press', () => {
      const mockAction = jest.fn();
      const actions = [
        { label: 'Test Action', onPress: mockAction },
      ];

      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            actions={actions}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const actionButton = getByText('Test Action');
      fireEvent.press(actionButton);
      expect(mockAction).toHaveBeenCalledTimes(1);
    });

    it('does not render actions container when no actions provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            testID="no-actions-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('no-actions-modal');
      expect(modal).toBeTruthy();
      // Actions container should not be present
    });

    it('renders disabled action buttons', () => {
      const actions = [
        { label: 'Disabled Action', onPress: () => {}, disabled: true },
      ];

      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
            actions={actions}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const actionButton = getByText('Disabled Action');
      expect(actionButton).toBeTruthy();
    });
  });

  // Animation tests
  describe('Animation', () => {
    it('handles slide animation', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            animationType="slide"
            testID="slide-modal"
          >
            <Text>Slide Modal</Text>
          </Modal>
        </TestWrapper>
      );
      runTimers();

      const modal = getByTestId('slide-modal');
      expect(modal).toBeTruthy();
    });

    it('handles fade animation', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            animationType="fade"
            testID="fade-modal"
          >
            <Text>Fade Modal</Text>
          </Modal>
        </TestWrapper>
      );
      runTimers();

      const modal = getByTestId('fade-modal');
      expect(modal).toBeTruthy();
    });

    it('handles no animation', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            animationType="none"
            testID="no-animation-modal"
          >
            <Text>No Animation Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('no-animation-modal');
      expect(modal).toBeTruthy();
    });

    it('accepts custom animation duration', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            animationType="slide"
            animationDuration={500}
            testID="custom-duration-modal"
          >
            <Text>Custom Duration Modal</Text>
          </Modal>
        </TestWrapper>
      );
      runTimers();

      const modal = getByTestId('custom-duration-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Backdrop tests
  describe('Backdrop', () => {
    it('closes on backdrop press by default', () => {
      const mockOnClose = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={mockOnClose}
            testID="backdrop-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      // Note: Testing backdrop press is complex in React Native Testing Library
      // This test verifies the modal renders with backdrop functionality
      const modal = getByTestId('backdrop-modal');
      expect(modal).toBeTruthy();
    });

    it('does not close on backdrop press when closeOnBackdrop is false', () => {
      const mockOnClose = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={mockOnClose}
            closeOnBackdrop={false}
            testID="no-backdrop-close-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('no-backdrop-close-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Custom colors tests
  describe('Custom Colors', () => {
    it('accepts custom background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            backgroundColor="#ff0000"
            testID="custom-bg-modal"
          >
            <Text>Custom Background Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-bg-modal');
      expect(modal).toBeTruthy();
    });

    it('accepts custom backdrop color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            backdropColor="rgba(255, 0, 0, 0.5)"
            testID="custom-backdrop-modal"
          >
            <Text>Custom Backdrop Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-backdrop-modal');
      expect(modal).toBeTruthy();
    });

    it('accepts custom backdrop opacity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            backdropOpacity={0.8}
            testID="custom-opacity-modal"
          >
            <Text>Custom Opacity Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-opacity-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Scrollable content tests
  describe('Scrollable Content', () => {
    it('renders scrollable content by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            scrollable={true}
            testID="scrollable-modal"
          >
            <Text>Scrollable Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('scrollable-modal');
      expect(modal).toBeTruthy();
    });

    it('renders non-scrollable content', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            scrollable={false}
            testID="non-scrollable-modal"
          >
            <Text>Non-scrollable Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('non-scrollable-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility properties', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Accessible Modal"
            testID="accessible-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('accessible-modal');
      expect(modal).toBeTruthy();
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            accessibilityLabel="Custom modal label"
            testID="custom-label-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-label-modal');
      expect(modal).toBeTruthy();
    });

    it('uses title as default accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal Title"
            testID="title-label-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('title-label-modal');
      expect(modal).toBeTruthy();
    });

    it('provides proper accessibility for close button', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Test Modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      const closeButton = getByTestId('modal-close-button');
      expect(closeButton.props.accessibilityRole).toBe('button');
      expect(closeButton.props.accessibilityLabel).toBe('Close modal');
      expect(closeButton.props.accessibilityHint).toBe('Closes the modal dialog');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom modal styles', () => {
      const customStyle = { borderWidth: 2 };
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            style={customStyle}
            testID="custom-styled-modal"
          >
            <Text>Custom Styled Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-styled-modal');
      expect(modal).toBeTruthy();
    });

    it('applies custom content styles', () => {
      const customContentStyle = { padding: 20 };
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            contentStyle={customContentStyle}
            testID="custom-content-modal"
          >
            <Text>Custom Content Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-content-modal');
      expect(modal).toBeTruthy();
    });

    it('applies custom header styles', () => {
      const customHeaderStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Custom Header"
            headerStyle={customHeaderStyle}
            testID="custom-header-modal"
          >
            <Text>Custom Header Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('custom-header-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Keyboard avoidance tests
  describe('Keyboard Avoidance', () => {
    it('handles keyboard avoidance behavior', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            keyboardAvoidingBehavior="padding"
            testID="keyboard-modal"
          >
            <Text>Keyboard Avoiding Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('keyboard-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles modal without title or close button', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            showCloseButton={false}
            testID="no-header-modal"
          >
            <Text>No Header Modal</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('no-header-modal');
      expect(modal).toBeTruthy();
    });

    it('handles long titles gracefully', () => {
      const longTitle = 'This is a very long modal title that should be truncated properly when it exceeds the available space';
      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title={longTitle}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(getByText(longTitle)).toBeTruthy();
    });

    it('handles long subtitles gracefully', () => {
      const longSubtitle = 'This is a very long subtitle that should also be truncated when needed';
      const { getByText } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Short Title"
            subtitle={longSubtitle}
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      expect(getByText(longSubtitle)).toBeTruthy();
    });

    it('handles many action buttons', () => {
      const manyActions = Array.from({ length: 5 }, (_, i) => ({
        label: `Action ${i + 1}`,
        onPress: () => {},
      }));

      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Many Actions"
            actions={manyActions}
            testID="many-actions-modal"
          >
            <Text>Modal with many actions</Text>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('many-actions-modal');
      expect(modal).toBeTruthy();
    });

    it('handles empty content', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            title="Empty Modal"
            testID="empty-modal"
          >
            <></>
          </Modal>
        </TestWrapper>
      );

      const modal = getByTestId('empty-modal');
      expect(modal).toBeTruthy();
    });
  });

  // Visibility change tests
  describe('Visibility Changes', () => {
    it('handles visibility changes with animation', () => {
      const { rerender, getByTestId } = render(
        <TestWrapper>
          <Modal
            visible={false}
            onClose={() => {}}
            testID="visibility-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );

      // Modal should not be visible initially
      expect(() => getByTestId('visibility-modal')).toThrow();

      // Show modal
      rerender(
        <TestWrapper>
          <Modal
            visible={true}
            onClose={() => {}}
            testID="visibility-modal"
          >
            <Text>Modal Content</Text>
          </Modal>
        </TestWrapper>
      );
      runTimers();

      // Modal should now be visible
      const modal = getByTestId('visibility-modal');
      expect(modal).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/organisms/NavigationPanel/NavigationPanel.stories.tsx">
/**
 * NavigationPanel Component Stories
 * Storybook stories demonstrating all NavigationPanel component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { NavigationPanel } from './NavigationPanel';
import { Typography } from '../../atoms/Typography';
import { Button } from '../../atoms/Button';

const meta: Meta<typeof NavigationPanel> = {
  title: 'Organisms/NavigationPanel',
  component: NavigationPanel,
  parameters: {
    docs: {
      description: {
        component: 'A consistent navigation panel component with styling and interactions for different notification types and navigation items.',
      },
    },
  },
  argTypes: {
    type: {
      control: { type: 'select' },
      options: ['notifications', 'navigation', 'mixed'],
      description: 'Panel type',
    },
    title: {
      control: { type: 'text' },
      description: 'Panel title',
    },
    subtitle: {
      control: { type: 'text' },
      description: 'Optional subtitle',
    },
    variant: {
      control: { type: 'select' },
      options: ['default', 'elevated', 'transparent'],
      description: 'Visual variant',
    },
    showHeader: {
      control: { type: 'boolean' },
      description: 'Whether to show header',
    },
    showActions: {
      control: { type: 'boolean' },
      description: 'Whether to show action buttons',
    },
    loading: {
      control: { type: 'boolean' },
      description: 'Loading state',
    },
  },
};

export default meta;
type Story = StoryObj<typeof NavigationPanel>;

// Mock notifications
const mockNotifications = [
  {
    id: '1',
    title: 'New Assignment Posted',
    message: 'Math Chapter 5 exercises are now available',
    type: 'info' as const,
    timestamp: '2 hours ago',
    read: false,
    onPress: () => alert('View assignment'),
    onDismiss: () => alert('Dismissed'),
  },
  {
    id: '2',
    title: 'Grade Updated',
    message: 'Your Science test has been graded',
    type: 'success' as const,
    timestamp: '1 day ago',
    read: true,
    onPress: () => alert('View grade'),
    onDismiss: () => alert('Dismissed'),
  },
  {
    id: '3',
    title: 'Assignment Due Soon',
    message: 'Math homework is due tomorrow',
    type: 'warning' as const,
    timestamp: '3 hours ago',
    read: false,
    onPress: () => alert('View assignment'),
    onAction: () => alert('Submit now'),
    actionLabel: 'Submit',
    onDismiss: () => alert('Dismissed'),
  },
];

// Mock navigation items
const mockNavigationItems = [
  {
    id: '1',
    title: 'Dashboard',
    subtitle: 'Overview and quick actions',
    icon: 'home' as const,
    onPress: () => alert('Navigate to Dashboard'),
  },
  {
    id: '2',
    title: 'Messages',
    subtitle: 'View your messages',
    icon: 'mail' as const,
    badge: 3,
    onPress: () => alert('Navigate to Messages'),
  },
  {
    id: '3',
    title: 'Settings',
    subtitle: 'App preferences',
    icon: 'settings' as const,
    onPress: () => alert('Navigate to Settings'),
  },
  {
    id: '4',
    title: 'Help & Support',
    subtitle: 'Get help and support',
    icon: 'help-circle' as const,
    onPress: () => alert('Navigate to Help'),
  },
];

// Basic notifications panel
export const NotificationsPanel: Story = {
  render: () => (
    <NavigationPanel
      type="notifications"
      title="Notifications"
      notifications={mockNotifications}
      onMarkAllRead={() => alert('Mark all as read')}
      onClearAll={() => alert('Clear all')}
      onRefresh={() => alert('Refresh')}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Basic notifications panel with various notification types.',
      },
    },
  },
};

// Navigation panel
export const NavigationOnly: Story = {
  render: () => (
    <NavigationPanel
      type="navigation"
      title="Quick Navigation"
      navigationItems={mockNavigationItems}
      onRefresh={() => alert('Refresh')}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Navigation panel with menu items and badges.',
      },
    },
  },
};

// Mixed panel
export const MixedPanel: Story = {
  render: () => (
    <NavigationPanel
      type="mixed"
      title="Dashboard Panel"
      navigationItems={mockNavigationItems.slice(0, 2)}
      notifications={mockNotifications.slice(0, 2)}
      onMarkAllRead={() => alert('Mark all as read')}
      onClearAll={() => alert('Clear all')}
      onRefresh={() => alert('Refresh')}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Mixed panel with both navigation items and notifications.',
      },
    },
  },
};

// Different variants
export const Variants: Story = {
  render: () => (
    <View style={{ gap: 20 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Default Variant
        </Typography>
        <NavigationPanel
          type="notifications"
          title="Default Panel"
          notifications={mockNotifications.slice(0, 2)}
          variant="default"
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Elevated Variant
        </Typography>
        <NavigationPanel
          type="notifications"
          title="Elevated Panel"
          notifications={mockNotifications.slice(0, 2)}
          variant="elevated"
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Transparent Variant
        </Typography>
        <NavigationPanel
          type="notifications"
          title="Transparent Panel"
          notifications={mockNotifications.slice(0, 2)}
          variant="transparent"
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different panel variants for various contexts.',
      },
    },
  },
};

// Empty states
export const EmptyStates: Story = {
  render: () => (
    <View style={{ gap: 20 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Empty Notifications
        </Typography>
        <NavigationPanel
          type="notifications"
          title="Notifications"
          notifications={[]}
          emptyTitle="No notifications"
          emptyMessage="You're all caught up!"
          emptyIcon="checkmark-circle"
          onRefresh={() => alert('Refresh')}
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Empty Navigation
        </Typography>
        <NavigationPanel
          type="navigation"
          title="Navigation"
          navigationItems={[]}
          emptyTitle="No menu items"
          emptyMessage="No navigation items available"
          emptyIcon="menu"
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Empty states for different panel types.',
      },
    },
  },
};

// Loading state
export const LoadingState: Story = {
  render: () => (
    <NavigationPanel
      type="notifications"
      title="Loading Notifications"
      notifications={[]}
      loading={true}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Loading state with animated indicator.',
      },
    },
  },
};

// Student notifications panel
export const StudentNotifications: Story = {
  render: () => {
    const studentNotifications = [
      {
        id: '1',
        title: 'New Assignment Posted',
        message: 'Math Chapter 5 exercises are now available in your assignments',
        type: 'info' as const,
        timestamp: '30 minutes ago',
        read: false,
        onPress: () => alert('View assignment'),
        onAction: () => alert('Start assignment'),
        actionLabel: 'Start Now',
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '2',
        title: 'Quiz Results Available',
        message: 'Your Science quiz results have been published. Great job!',
        type: 'success' as const,
        timestamp: '2 hours ago',
        read: false,
        onPress: () => alert('View results'),
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '3',
        title: 'Library Book Due',
        message: 'Introduction to Physics is due for return tomorrow',
        type: 'warning' as const,
        timestamp: '1 day ago',
        read: true,
        onPress: () => alert('View library'),
        onAction: () => alert('Renew book'),
        actionLabel: 'Renew',
        onDismiss: () => alert('Dismissed'),
      },
    ];
    
    return (
      <NavigationPanel
        type="notifications"
        title="Student Notifications"
        subtitle="Stay updated with your academic progress"
        notifications={studentNotifications}
        onMarkAllRead={() => alert('Mark all as read')}
        onClearAll={() => alert('Clear all')}
        onRefresh={() => alert('Refresh')}
        variant="elevated"
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Student-specific notifications panel.',
      },
    },
  },
};

// Teacher notifications panel
export const TeacherNotifications: Story = {
  render: () => {
    const teacherNotifications = [
      {
        id: '1',
        title: 'New Student Enrollment',
        message: 'Sarah Ahmed has been enrolled in your Grade 10A class',
        type: 'info' as const,
        timestamp: '1 hour ago',
        read: false,
        onPress: () => alert('View student profile'),
        onAction: () => alert('Send welcome message'),
        actionLabel: 'Welcome',
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '2',
        title: 'Assignment Deadline Approaching',
        message: 'Math homework deadline is tomorrow. 5 students haven\'t submitted yet',
        type: 'warning' as const,
        timestamp: '3 hours ago',
        read: false,
        onPress: () => alert('View submissions'),
        onAction: () => alert('Send reminder'),
        actionLabel: 'Remind Students',
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '3',
        title: 'Parent Meeting Confirmed',
        message: 'Ahmed\'s parent has confirmed attendance for tomorrow\'s meeting',
        type: 'success' as const,
        timestamp: '1 day ago',
        read: true,
        onPress: () => alert('View meeting details'),
        onDismiss: () => alert('Dismissed'),
      },
    ];
    
    return (
      <NavigationPanel
        type="notifications"
        title="Teacher Notifications"
        subtitle="Classroom updates and reminders"
        notifications={teacherNotifications}
        onMarkAllRead={() => alert('Mark all as read')}
        onClearAll={() => alert('Clear all')}
        onRefresh={() => alert('Refresh')}
        variant="elevated"
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Teacher-specific notifications panel.',
      },
    },
  },
};

// Parent notifications panel
export const ParentNotifications: Story = {
  render: () => {
    const parentNotifications = [
      {
        id: '1',
        title: 'Excellent Performance',
        message: 'Ahmed scored 95% in the Mathematics test. Congratulations!',
        type: 'success' as const,
        timestamp: '2 hours ago',
        read: false,
        onPress: () => alert('View detailed results'),
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '2',
        title: 'Attendance Notice',
        message: 'Ahmed was absent from school today. Please confirm if this was planned',
        type: 'warning' as const,
        timestamp: '4 hours ago',
        read: false,
        onPress: () => alert('View attendance'),
        onAction: () => alert('Confirm absence'),
        actionLabel: 'Confirm',
        onDismiss: () => alert('Dismissed'),
      },
      {
        id: '3',
        title: 'Parent-Teacher Meeting',
        message: 'Scheduled meeting with Ahmed\'s class teacher for next Friday at 3 PM',
        type: 'info' as const,
        timestamp: '1 day ago',
        read: true,
        onPress: () => alert('View meeting details'),
        onAction: () => alert('Confirm attendance'),
        actionLabel: 'Confirm',
        onDismiss: () => alert('Dismissed'),
      },
    ];
    
    return (
      <NavigationPanel
        type="notifications"
        title="Parent Notifications"
        subtitle="Updates about Ahmed's progress"
        notifications={parentNotifications}
        onMarkAllRead={() => alert('Mark all as read')}
        onClearAll={() => alert('Clear all')}
        onRefresh={() => alert('Refresh')}
        variant="elevated"
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Parent-specific notifications panel.',
      },
    },
  },
};

// Management navigation panel
export const ManagementNavigation: Story = {
  render: () => {
    const managementItems = [
      {
        id: '1',
        title: 'School Analytics',
        subtitle: 'View performance metrics',
        icon: 'analytics' as const,
        onPress: () => alert('Navigate to Analytics'),
      },
      {
        id: '2',
        title: 'Incident Reports',
        subtitle: 'Review pending incidents',
        icon: 'warning' as const,
        badge: 3,
        badgeColor: '#ff9800',
        onPress: () => alert('Navigate to Incidents'),
      },
      {
        id: '3',
        title: 'Staff Management',
        subtitle: 'Manage teachers and staff',
        icon: 'people' as const,
        onPress: () => alert('Navigate to Staff'),
      },
      {
        id: '4',
        title: 'System Settings',
        subtitle: 'Configure school settings',
        icon: 'settings' as const,
        onPress: () => alert('Navigate to Settings'),
      },
      {
        id: '5',
        title: 'Reports & Export',
        subtitle: 'Generate and export reports',
        icon: 'document-text' as const,
        onPress: () => alert('Navigate to Reports'),
      },
    ];
    
    return (
      <NavigationPanel
        type="navigation"
        title="Management Tools"
        subtitle="Administrative functions"
        navigationItems={managementItems}
        onRefresh={() => alert('Refresh')}
        variant="elevated"
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Management navigation panel with administrative tools.',
      },
    },
  },
};

// Quick actions panel
export const QuickActionsPanel: Story = {
  render: () => {
    const quickActions = [
      {
        id: '1',
        title: 'Create Assignment',
        subtitle: 'Add a new assignment',
        icon: 'add-circle' as const,
        onPress: () => alert('Create assignment'),
      },
      {
        id: '2',
        title: 'Mark Attendance',
        subtitle: 'Take class attendance',
        icon: 'checkmark-circle' as const,
        onPress: () => alert('Mark attendance'),
      },
      {
        id: '3',
        title: 'Send Announcement',
        subtitle: 'Notify students and parents',
        icon: 'megaphone' as const,
        onPress: () => alert('Send announcement'),
      },
      {
        id: '4',
        title: 'Grade Assignments',
        subtitle: 'Review submitted work',
        icon: 'school' as const,
        badge: 8,
        onPress: () => alert('Grade assignments'),
      },
    ];
    
    return (
      <NavigationPanel
        type="navigation"
        title="Quick Actions"
        subtitle="Common tasks and shortcuts"
        navigationItems={quickActions}
        showActions={false}
        variant="elevated"
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Quick actions panel for common tasks.',
      },
    },
  },
};

// Compact panel
export const CompactPanel: Story = {
  render: () => (
    <NavigationPanel
      type="notifications"
      title="Recent Updates"
      notifications={mockNotifications.slice(0, 3).map(n => ({ ...n, compact: true }))}
      showHeader={false}
      maxHeight={200}
      variant="transparent"
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Compact panel without header for embedded use.',
      },
    },
  },
};

// Interactive example
export const InteractiveExample: Story = {
  render: () => {
    const [notifications, setNotifications] = React.useState(mockNotifications);
    const [refreshing, setRefreshing] = React.useState(false);
    
    const handleMarkAllRead = () => {
      setNotifications(prev => prev.map(n => ({ ...n, read: true })));
    };
    
    const handleClearAll = () => {
      setNotifications([]);
    };
    
    const handleRefresh = () => {
      setRefreshing(true);
      setTimeout(() => {
        setNotifications(mockNotifications);
        setRefreshing(false);
      }, 1000);
    };
    
    const handleDismiss = (id: string) => {
      setNotifications(prev => prev.filter(n => n.id !== id));
    };
    
    return (
      <View>
        <Typography variant="h3" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Interactive Notifications Panel
        </Typography>
        
        <NavigationPanel
          type="notifications"
          title="Notifications"
          notifications={notifications.map(n => ({
            ...n,
            onDismiss: () => handleDismiss(n.id),
          }))}
          onMarkAllRead={handleMarkAllRead}
          onClearAll={handleClearAll}
          onRefresh={handleRefresh}
          refreshing={refreshing}
          variant="elevated"
        />
        
        <View style={{ marginTop: 16, paddingHorizontal: 16 }}>
          <Button
            variant="outline"
            onPress={() => setNotifications(mockNotifications)}
            style={{ marginBottom: 8 }}
          >
            Reset Notifications
          </Button>
        </View>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Interactive example with working actions and state management.',
      },
    },
  },
};
</file>

<file path="src/components/organisms/StudentBoardingInfoModal.tsx">
import React from 'react';
import { View } from 'react-native';
import { Card } from '../../../src/components/molecules/Card';
import { ListItem } from '../../../src/components/molecules/ListItem';
import { Typography } from '../../../src/components/atoms/Typography';

export default function BoardingInfoModal() {
  return (
    <View>
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Informasi Asrama
        </Typography>
        <Card variant="default" padding="none">
          <ListItem
            title="Gedung"
            subtitle="Al-Farabi"
            leftIcon="business"
            testID="info-gedung"
          />
          <ListItem
            title="Kamar"
            subtitle="203"
            leftIcon="bed"
            showDivider={true}
            testID="info-kamar"
          />
          <ListItem
            title="Pembimbing Asrama"
            subtitle="Ustadz Hasan"
            leftIcon="person"
            showDivider={true}
            testID="info-pembimbing"
          />
        </Card>
      </View>

      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Jadwal Makan
        </Typography>
        <Card variant="default" padding="medium" style={{ marginBottom: 10 }}>
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
            <Typography variant="body1" color="primary" weight="bold">
              Sarapan
            </Typography>
            <Typography variant="body1" color="secondary">
              06:00 - 07:00
            </Typography>
          </View>
          <Typography variant="body2" color="tertiary" style={{ fontStyle: 'italic' }}>
            Menu: Nasi, telur dadar, sayur sop
          </Typography>
        </Card>
        <Card variant="default" padding="medium" style={{ marginBottom: 10 }}>
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
            <Typography variant="body1" color="primary" weight="bold">
              Makan Siang
            </Typography>
            <Typography variant="body1" color="secondary">
              12:30 - 13:30
            </Typography>
          </View>
          <Typography variant="body2" color="tertiary" style={{ fontStyle: 'italic' }}>
            Menu: Nasi, ayam goreng, sayur asem
          </Typography>
        </Card>
        <Card variant="default" padding="medium">
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
            <Typography variant="body1" color="primary" weight="bold">
              Makan Malam
            </Typography>
            <Typography variant="body1" color="secondary">
              18:30 - 19:30
            </Typography>
          </View>
          <Typography variant="body2" color="tertiary" style={{ fontStyle: 'italic' }}>
            Menu: Nasi, ikan bakar, sayur capcay
          </Typography>
        </Card>
      </View>

      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Aktivitas Asrama
        </Typography>
        <Card variant="default" padding="none">
          <ListItem
            title="05:00 - 05:30"
            subtitle="Sholat Subuh Berjamaah"
            leftIcon="time"
            testID="activity-subuh"
          />
          <ListItem
            title="19:30 - 21:00"
            subtitle="Belajar Mandiri"
            leftIcon="book"
            showDivider={true}
            testID="activity-belajar"
          />
          <ListItem
            title="21:00 - 21:30"
            subtitle="Persiapan Tidur"
            leftIcon="moon"
            showDivider={true}
            testID="activity-tidur"
          />
        </Card>
      </View>
    </View>
  );
}
</file>

<file path="src/components/organisms/TabBar/index.ts">
/**
 * TabBar Component Exports
 */

export { TabBar, type TabBarProps, type TabConfig } from './TabBar';
export { default } from './TabBar';
</file>

<file path="src/components/organisms/TabBar/TabBar.stories.tsx">
/**
 * TabBar Component Stories
 * Storybook stories demonstrating all TabBar component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { TabBar } from './TabBar';
import { Typography } from '../../atoms/Typography';

const meta: Meta<typeof TabBar> = {
  title: 'Organisms/TabBar',
  component: TabBar,
  parameters: {
    docs: {
      description: {
        component: 'A consistent bottom navigation component with tab styling, active states, and transitions.',
      },
    },
  },
  argTypes: {
    activeTab: {
      control: { type: 'text' },
      description: 'Currently active tab ID',
    },
    variant: {
      control: { type: 'select' },
      options: ['default', 'elevated', 'transparent'],
      description: 'Visual variant',
    },
    showLabels: {
      control: { type: 'boolean' },
      description: 'Whether to show tab labels',
    },
    animated: {
      control: { type: 'boolean' },
      description: 'Whether to animate tab transitions',
    },
  },
};

export default meta;
type Story = StoryObj<typeof TabBar>;

// Basic tab bar
export const Default: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <TabBar
        tabs={tabs}
        activeTab={activeTab}
        onTabPress={setActiveTab}
      />
    );
  },
};

// Tab bar with badges
export const WithBadges: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'messages', label: 'Messages', icon: 'mail' as const, badge: 3 },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 12 },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <TabBar
        tabs={tabs}
        activeTab={activeTab}
        onTabPress={setActiveTab}
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar with notification badges on some tabs.',
      },
    },
  },
};

// Different variants
export const Variants: Story = {
  render: () => {
    const [activeTab1, setActiveTab1] = React.useState('home');
    const [activeTab2, setActiveTab2] = React.useState('home');
    const [activeTab3, setActiveTab3] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 2 },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <View style={{ gap: 20 }}>
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Default Variant
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab1}
            onTabPress={setActiveTab1}
            variant="default"
          />
        </View>
        
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Elevated Variant
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab2}
            onTabPress={setActiveTab2}
            variant="elevated"
          />
        </View>
        
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Transparent Variant
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab3}
            onTabPress={setActiveTab3}
            variant="transparent"
          />
        </View>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Different tab bar variants for various contexts.',
      },
    },
  },
};

// Without labels
export const WithoutLabels: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 5 },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <TabBar
        tabs={tabs}
        activeTab={activeTab}
        onTabPress={setActiveTab}
        showLabels={false}
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar without labels, showing only icons.',
      },
    },
  },
};

// Student dashboard tabs
export const StudentDashboard: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('dashboard');
    
    const tabs = [
      { 
        id: 'dashboard', 
        label: 'Dashboard', 
        icon: 'home' as const,
        accessibilityLabel: 'Dashboard',
        accessibilityHint: 'View your dashboard and overview'
      },
      { 
        id: 'assignments', 
        label: 'Assignments', 
        icon: 'document-text' as const, 
        badge: 3,
        accessibilityLabel: 'Assignments',
        accessibilityHint: '3 pending assignments'
      },
      { 
        id: 'grades', 
        label: 'Grades', 
        icon: 'school' as const,
        accessibilityLabel: 'Grades',
        accessibilityHint: 'View your grades and progress'
      },
      { 
        id: 'schedule', 
        label: 'Schedule', 
        icon: 'calendar' as const,
        accessibilityLabel: 'Schedule',
        accessibilityHint: 'View your class schedule'
      },
      { 
        id: 'profile', 
        label: 'Profile', 
        icon: 'person' as const,
        accessibilityLabel: 'Profile',
        accessibilityHint: 'View and edit your profile'
      },
    ];
    
    return (
      <View>
        <Typography variant="h3" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Student Dashboard Navigation
        </Typography>
        <TabBar
          tabs={tabs}
          activeTab={activeTab}
          onTabPress={setActiveTab}
          variant="elevated"
        />
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar example for student dashboard navigation.',
      },
    },
  },
};

// Teacher dashboard tabs
export const TeacherDashboard: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('dashboard');
    
    const tabs = [
      { 
        id: 'dashboard', 
        label: 'Dashboard', 
        icon: 'home' as const,
        accessibilityLabel: 'Dashboard',
        accessibilityHint: 'View your teaching dashboard'
      },
      { 
        id: 'classes', 
        label: 'Classes', 
        icon: 'people' as const,
        accessibilityLabel: 'Classes',
        accessibilityHint: 'Manage your classes'
      },
      { 
        id: 'assignments', 
        label: 'Assignments', 
        icon: 'document-text' as const, 
        badge: 8,
        accessibilityLabel: 'Assignments',
        accessibilityHint: '8 assignments to review'
      },
      { 
        id: 'reports', 
        label: 'Reports', 
        icon: 'bar-chart' as const,
        accessibilityLabel: 'Reports',
        accessibilityHint: 'View student reports and analytics'
      },
      { 
        id: 'profile', 
        label: 'Profile', 
        icon: 'person' as const,
        accessibilityLabel: 'Profile',
        accessibilityHint: 'View and edit your profile'
      },
    ];
    
    return (
      <View>
        <Typography variant="h3" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Teacher Dashboard Navigation
        </Typography>
        <TabBar
          tabs={tabs}
          activeTab={activeTab}
          onTabPress={setActiveTab}
          variant="elevated"
        />
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar example for teacher dashboard navigation.',
      },
    },
  },
};

// Parent dashboard tabs
export const ParentDashboard: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('dashboard');
    
    const tabs = [
      { 
        id: 'dashboard', 
        label: 'Dashboard', 
        icon: 'home' as const,
        accessibilityLabel: 'Dashboard',
        accessibilityHint: 'View your child\'s overview'
      },
      { 
        id: 'progress', 
        label: 'Progress', 
        icon: 'trending-up' as const,
        accessibilityLabel: 'Progress',
        accessibilityHint: 'View your child\'s academic progress'
      },
      { 
        id: 'attendance', 
        label: 'Attendance', 
        icon: 'calendar-outline' as const,
        accessibilityLabel: 'Attendance',
        accessibilityHint: 'View attendance records'
      },
      { 
        id: 'messages', 
        label: 'Messages', 
        icon: 'mail' as const, 
        badge: 2,
        accessibilityLabel: 'Messages',
        accessibilityHint: '2 unread messages from teachers'
      },
      { 
        id: 'profile', 
        label: 'Profile', 
        icon: 'person' as const,
        accessibilityLabel: 'Profile',
        accessibilityHint: 'View and edit family profile'
      },
    ];
    
    return (
      <View>
        <Typography variant="h3" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Parent Dashboard Navigation
        </Typography>
        <TabBar
          tabs={tabs}
          activeTab={activeTab}
          onTabPress={setActiveTab}
          variant="elevated"
        />
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar example for parent dashboard navigation.',
      },
    },
  },
};

// Management dashboard tabs
export const ManagementDashboard: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('dashboard');
    
    const tabs = [
      { 
        id: 'dashboard', 
        label: 'Dashboard', 
        icon: 'home' as const,
        accessibilityLabel: 'Dashboard',
        accessibilityHint: 'View school management dashboard'
      },
      { 
        id: 'students', 
        label: 'Students', 
        icon: 'school' as const,
        accessibilityLabel: 'Students',
        accessibilityHint: 'Manage student records'
      },
      { 
        id: 'teachers', 
        label: 'Teachers', 
        icon: 'people' as const,
        accessibilityLabel: 'Teachers',
        accessibilityHint: 'Manage teaching staff'
      },
      { 
        id: 'incidents', 
        label: 'Incidents', 
        icon: 'warning' as const, 
        badge: 3,
        badgeColor: '#ff9800',
        accessibilityLabel: 'Incidents',
        accessibilityHint: '3 pending incidents to review'
      },
      { 
        id: 'reports', 
        label: 'Reports', 
        icon: 'analytics' as const,
        accessibilityLabel: 'Reports',
        accessibilityHint: 'View school analytics and reports'
      },
    ];
    
    return (
      <View>
        <Typography variant="h3" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Management Dashboard Navigation
        </Typography>
        <TabBar
          tabs={tabs}
          activeTab={activeTab}
          onTabPress={setActiveTab}
          variant="elevated"
        />
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar example for management dashboard navigation.',
      },
    },
  },
};

// Disabled tabs
export const DisabledTabs: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const, disabled: true },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 5 },
      { id: 'profile', label: 'Profile', icon: 'person' as const, disabled: true },
    ];
    
    return (
      <TabBar
        tabs={tabs}
        activeTab={activeTab}
        onTabPress={setActiveTab}
      />
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bar with some disabled tabs.',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => {
    const [activeTab1, setActiveTab1] = React.useState('home');
    const [activeTab2, setActiveTab2] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 3 },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <View style={{ gap: 20 }}>
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Custom Blue Theme
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab1}
            onTabPress={setActiveTab1}
            backgroundColor="#e3f2fd"
            activeColor="#1976d2"
            inactiveColor="#90a4ae"
          />
        </View>
        
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Dark Theme
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab2}
            onTabPress={setActiveTab2}
            backgroundColor="#1a1a1a"
            activeColor="#bb86fc"
            inactiveColor="#666666"
          />
        </View>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Tab bars with custom colors and theming.',
      },
    },
  },
};

// Badge overflow
export const BadgeOverflow: Story = {
  render: () => {
    const [activeTab, setActiveTab] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'messages', label: 'Messages', icon: 'mail' as const, badge: 1 },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 25 },
      { id: 'alerts', label: 'Alerts', icon: 'warning' as const, badge: 150, badgeColor: '#ff5722' },
    ];
    
    return (
      <View>
        <Typography variant="h4" style={{ marginBottom: 16, paddingHorizontal: 16 }}>
          Badge Overflow Examples
        </Typography>
        <TabBar
          tabs={tabs}
          activeTab={activeTab}
          onTabPress={setActiveTab}
        />
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Examples of badge overflow handling (99+ for large numbers).',
      },
    },
  },
};

// Animation comparison
export const AnimationComparison: Story = {
  render: () => {
    const [activeTab1, setActiveTab1] = React.useState('home');
    const [activeTab2, setActiveTab2] = React.useState('home');
    
    const tabs = [
      { id: 'home', label: 'Home', icon: 'home' as const },
      { id: 'search', label: 'Search', icon: 'search' as const },
      { id: 'notifications', label: 'Notifications', icon: 'notifications' as const },
      { id: 'profile', label: 'Profile', icon: 'person' as const },
    ];
    
    return (
      <View style={{ gap: 20 }}>
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            With Animation (Default)
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab1}
            onTabPress={setActiveTab1}
            animated={true}
          />
        </View>
        
        <View>
          <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
            Without Animation
          </Typography>
          <TabBar
            tabs={tabs}
            activeTab={activeTab2}
            onTabPress={setActiveTab2}
            animated={false}
          />
        </View>
      </View>
    );
  },
  parameters: {
    docs: {
      description: {
        story: 'Comparison between animated and non-animated tab transitions.',
      },
    },
  },
};
</file>

<file path="src/components/organisms/TabBar/TabBar.test.tsx">
/**
 * TabBar Component Tests
 * Unit tests for the TabBar component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent, act } from '@testing-library/react-native';
import { TabBar } from './TabBar';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

// Mock tabs for testing
const mockTabs = [
  { id: 'home', label: 'Home', icon: 'home' as const },
  { id: 'search', label: 'Search', icon: 'search' as const },
  { id: 'notifications', label: 'Notifications', icon: 'notifications' as const },
  { id: 'profile', label: 'Profile', icon: 'person' as const },
];

describe('TabBar Component', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  // Helper function to run timers
  const runTimers = () => {
    act(() => {
      jest.runAllTimers();
    });
  };

  // Basic rendering tests
  describe('Rendering', () => {
    it('renders all tabs correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('Home')).toBeTruthy();
      expect(getByText('Search')).toBeTruthy();
      expect(getByText('Notifications')).toBeTruthy();
      expect(getByText('Profile')).toBeTruthy();
    });

    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="test-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('test-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('renders without labels when showLabels is false', () => {
      const { queryByText } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            showLabels={false}
          />
        </TestWrapper>
      );

      expect(queryByText('Home')).toBeNull();
      expect(queryByText('Search')).toBeNull();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            variant="default"
            testID="default-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('default-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('renders elevated variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            variant="elevated"
            testID="elevated-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('elevated-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('renders transparent variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            variant="transparent"
            testID="transparent-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('transparent-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });

  // Tab interaction tests
  describe('Tab Interactions', () => {
    it('handles tab press events', () => {
      const mockOnTabPress = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={mockOnTabPress}
          />
        </TestWrapper>
      );

      const searchTab = getByTestId('tab-search');
      fireEvent.press(searchTab);
      expect(mockOnTabPress).toHaveBeenCalledWith('search');
    });

    it('does not handle press events for disabled tabs', () => {
      const mockOnTabPress = jest.fn();
      const disabledTabs = [
        ...mockTabs,
        { id: 'disabled', label: 'Disabled', icon: 'ban' as const, disabled: true },
      ];

      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={disabledTabs}
            activeTab="home"
            onTabPress={mockOnTabPress}
          />
        </TestWrapper>
      );

      const disabledTab = getByTestId('tab-disabled');
      fireEvent.press(disabledTab);
      expect(mockOnTabPress).not.toHaveBeenCalledWith('disabled');
    });

    it('shows active state correctly', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="search"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      const searchTab = getByTestId('tab-search');
      expect(searchTab.props.accessibilityState.selected).toBe(true);

      const homeTab = getByTestId('tab-home');
      expect(homeTab.props.accessibilityState.selected).toBe(false);
    });
  });

  // Badge tests
  describe('Badges', () => {
    it('renders badges on tabs', () => {
      const tabsWithBadges = [
        { id: 'home', label: 'Home', icon: 'home' as const },
        { id: 'messages', label: 'Messages', icon: 'mail' as const, badge: 5 },
        { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 12 },
      ];

      const { getByText } = render(
        <TestWrapper>
          <TabBar
            tabs={tabsWithBadges}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('5')).toBeTruthy();
      expect(getByText('12')).toBeTruthy();
    });

    it('shows 99+ for badges over 99', () => {
      const tabsWithLargeBadge = [
        { id: 'home', label: 'Home', icon: 'home' as const },
        { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 150 },
      ];

      const { getByText } = render(
        <TestWrapper>
          <TabBar
            tabs={tabsWithLargeBadge}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('99+')).toBeTruthy();
    });

    it('does not show badge when badge is 0', () => {
      const tabsWithZeroBadge = [
        { id: 'home', label: 'Home', icon: 'home' as const },
        { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: 0 },
      ];

      const { queryByText } = render(
        <TestWrapper>
          <TabBar
            tabs={tabsWithZeroBadge}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(queryByText('0')).toBeNull();
    });

    it('does not show badge when not provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="no-badge-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('no-badge-tab-bar');
      expect(tabBar).toBeTruthy();
      // Badges should not be present
    });
  });

  // Animation tests
  describe('Animation', () => {
    it('enables animation by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="animated-tab-bar"
          />
        </TestWrapper>
      );
      runTimers();

      const tabBar = getByTestId('animated-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('disables animation when animated is false', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            animated={false}
            testID="static-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('static-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('accepts custom animation duration', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            animationDuration={500}
            testID="custom-duration-tab-bar"
          />
        </TestWrapper>
      );
      runTimers();

      const tabBar = getByTestId('custom-duration-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });

  // Custom colors tests
  describe('Custom Colors', () => {
    it('accepts custom background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            backgroundColor="#ff0000"
            testID="custom-bg-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('custom-bg-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('accepts custom active color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            activeColor="#00ff00"
            testID="custom-active-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('custom-active-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('accepts custom inactive color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            inactiveColor="#cccccc"
            testID="custom-inactive-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('custom-inactive-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('accepts all custom colors', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            backgroundColor="#000000"
            activeColor="#ffffff"
            inactiveColor="#666666"
            testID="all-custom-colors-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('all-custom-colors-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility role', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="accessible-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('accessible-tab-bar');
      expect(tabBar.props.accessibilityRole).toBe('tablist');
    });

    it('generates accessibility label from tab count', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="auto-label-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('auto-label-tab-bar');
      expect(tabBar.props.accessibilityLabel).toBe('Tab bar with 4 tabs');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            accessibilityLabel="Custom tab bar label"
            testID="custom-label-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('custom-label-tab-bar');
      expect(tabBar.props.accessibilityLabel).toBe('Custom tab bar label');
    });

    it('provides proper accessibility for tab buttons', () => {
      const tabsWithAccessibility = [
        {
          id: 'home',
          label: 'Home',
          icon: 'home' as const,
          accessibilityLabel: 'Home tab',
          accessibilityHint: 'Navigate to home screen',
        },
      ];

      const { getByLabelText } = render(
        <TestWrapper>
          <TabBar
            tabs={tabsWithAccessibility}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      const homeTab = getByLabelText('Home tab');
      expect(homeTab.props.accessibilityRole).toBe('tab');
      expect(homeTab.props.accessibilityHint).toBe('Navigate to home screen');
    });

    it('uses label as default accessibility label', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      const homeTab = getByLabelText('Home');
      expect(homeTab).toBeTruthy();
    });

    it('sets correct accessibility state for active/inactive tabs', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="search"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      const activeTab = getByTestId('tab-search');
      const inactiveTab = getByTestId('tab-home');

      expect(activeTab.props.accessibilityState.selected).toBe(true);
      expect(inactiveTab.props.accessibilityState.selected).toBe(false);
    });

    it('sets correct accessibility state for disabled tabs', () => {
      const disabledTabs = [
        { id: 'home', label: 'Home', icon: 'home' as const },
        { id: 'disabled', label: 'Disabled', icon: 'ban' as const, disabled: true },
      ];

      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={disabledTabs}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      const disabledTab = getByTestId('tab-disabled');
      expect(disabledTab.props.accessibilityState.disabled).toBe(true);
    });
  });

  // Safe area insets tests
  describe('Safe Area Insets', () => {
    it('applies safe area insets', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            safeAreaInsets={{ bottom: 20 }}
            testID="safe-area-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('safe-area-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('works without safe area insets', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            testID="no-safe-area-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('no-safe-area-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2 };
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="home"
            onTabPress={() => {}}
            style={customStyle}
            testID="custom-styled-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('custom-styled-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles empty tabs array', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={[]}
            activeTab=""
            onTabPress={() => {}}
            testID="empty-tabs-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('empty-tabs-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('handles single tab', () => {
      const singleTab = [{ id: 'home', label: 'Home', icon: 'home' as const }];
      const { getByText } = render(
        <TestWrapper>
          <TabBar
            tabs={singleTab}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('Home')).toBeTruthy();
    });

    it('handles many tabs', () => {
      const manyTabs = Array.from({ length: 8 }, (_, i) => ({
        id: `tab${i}`,
        label: `Tab ${i + 1}`,
        icon: 'star' as const,
      }));

      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={manyTabs}
            activeTab="tab0"
            onTabPress={() => {}}
            testID="many-tabs-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('many-tabs-tab-bar');
      expect(tabBar).toBeTruthy();
    });

    it('handles long tab labels', () => {
      const longLabelTabs = [
        { id: 'home', label: 'Very Long Home Label That Should Truncate', icon: 'home' as const },
        { id: 'search', label: 'Another Very Long Search Label', icon: 'search' as const },
      ];

      const { getByText } = render(
        <TestWrapper>
          <TabBar
            tabs={longLabelTabs}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      expect(getByText('Very Long Home Label That Should Truncate')).toBeTruthy();
    });

    it('handles negative badge values', () => {
      const negativeBadgeTabs = [
        { id: 'home', label: 'Home', icon: 'home' as const },
        { id: 'notifications', label: 'Notifications', icon: 'notifications' as const, badge: -5 },
      ];

      const { queryByText } = render(
        <TestWrapper>
          <TabBar
            tabs={negativeBadgeTabs}
            activeTab="home"
            onTabPress={() => {}}
          />
        </TestWrapper>
      );

      // Negative badges should not be shown
      expect(queryByText('-5')).toBeNull();
    });

    it('handles invalid active tab', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <TabBar
            tabs={mockTabs}
            activeTab="nonexistent"
            onTabPress={() => {}}
            testID="invalid-active-tab-bar"
          />
        </TestWrapper>
      );

      const tabBar = getByTestId('invalid-active-tab-bar');
      expect(tabBar).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/organisms/TabBar/TabBar.tsx">
/**
 * TabBar Component
 * Consistent bottom navigation with tab styling, active states, and transitions
 */

import React from 'react';
import {
  View,
  TouchableOpacity,
  ViewStyle,
  StyleSheet,
  Animated,
  Dimensions,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';

// Tab configuration interface
export interface TabConfig {
  id: string;
  label: string;
  icon: keyof typeof Ionicons.glyphMap;
  badge?: number;
  badgeColor?: string;
  disabled?: boolean;
  accessibilityLabel?: string;
  accessibilityHint?: string;
  testID?: string;
}

// TabBar Props Interface
export interface TabBarProps {
  // Tabs configuration
  tabs: TabConfig[];
  activeTab: string;
  onTabPress: (tabId: string) => void;
  
  // Visual options
  variant?: 'default' | 'elevated' | 'transparent';
  showLabels?: boolean;
  
  // Colors
  backgroundColor?: string;
  activeColor?: string;
  inactiveColor?: string;
  
  // Animation
  animated?: boolean;
  animationDuration?: number;
  
  // Layout
  safeAreaInsets?: {
    bottom?: number;
  };
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// TabBar Component
export const TabBar: React.FC<TabBarProps> = ({
  tabs,
  activeTab,
  onTabPress,
  variant = 'default',
  showLabels = true,
  backgroundColor,
  activeColor,
  inactiveColor,
  animated = true,
  animationDuration = 200,
  safeAreaInsets,
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const screenWidth = Dimensions.get('window').width;
  
  // Animation values for active indicator
  const indicatorPosition = React.useRef(new Animated.Value(0)).current;
  const indicatorWidth = screenWidth / tabs.length;

  // Update indicator position when active tab changes
  React.useEffect(() => {
    const activeIndex = tabs.findIndex(tab => tab.id === activeTab);
    if (activeIndex !== -1 && animated) {
      Animated.timing(indicatorPosition, {
        toValue: activeIndex * indicatorWidth,
        duration: animationDuration,
        useNativeDriver: false,
      }).start();
    } else if (activeIndex !== -1) {
      indicatorPosition.setValue(activeIndex * indicatorWidth);
    }
  }, [activeTab, tabs, indicatorWidth, animated, animationDuration, indicatorPosition]);

  // Get background color
  const getBackgroundColor = (): string => {
    if (backgroundColor) return backgroundColor;
    
    const variantBackgrounds = {
      default: colors.surface.primary,
      elevated: colors.surface.primary,
      transparent: 'transparent',
    };
    
    return variantBackgrounds[variant];
  };

  // Get active color
  const getActiveColor = (): string => {
    if (activeColor) return activeColor;
    return colors.primary.main;
  };

  // Get inactive color
  const getInactiveColor = (): string => {
    if (inactiveColor) return inactiveColor;
    return colors.text.tertiary;
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: getBackgroundColor(),
      paddingBottom: safeAreaInsets?.bottom || 0,
      borderTopWidth: variant === 'transparent' ? 0 : 1,
      borderTopColor: colors.border.primary,
    };

    // Add shadow for elevated variant
    if (variant === 'elevated') {
      return {
        ...baseStyle,
        ...theme.shadows.tabBar,
      };
    }

    return baseStyle;
  };

  // Get tab container styles
  const getTabContainerStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      height: showLabels ? 64 : 56,
      position: 'relative',
    };
  };

  // Get active indicator styles
  const getActiveIndicatorStyles = (): ViewStyle => {
    return {
      position: 'absolute',
      top: 0,
      height: 3,
      width: indicatorWidth,
      backgroundColor: getActiveColor(),
      borderRadius: 1.5,
    };
  };

  // Get tab button styles
  const getTabButtonStyles = (isActive: boolean, disabled: boolean): ViewStyle => {
    return {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: theme.spacing.base.xs,
      paddingHorizontal: theme.spacing.base.xs,
      opacity: disabled ? 0.5 : 1,
    };
  };

  // Get badge styles
  const getBadgeStyles = (badgeColor?: string): ViewStyle => {
    const badgeSize = 16;
    
    return {
      position: 'absolute',
      top: showLabels ? 8 : 12,
      right: '50%',
      marginRight: -20,
      minWidth: badgeSize,
      height: badgeSize,
      borderRadius: badgeSize / 2,
      backgroundColor: badgeColor || colors.error.main,
      alignItems: 'center',
      justifyContent: 'center',
      paddingHorizontal: 4,
    };
  };

  // Render tab badge
  const renderTabBadge = (tab: TabConfig) => {
    if (!tab.badge || tab.badge <= 0) return null;
    
    return (
      <View style={getBadgeStyles(tab.badgeColor)}>
        <Typography
          variant="caption"
          color={colors.error.contrast}
          style={{
            fontSize: 10,
            fontWeight: 'bold',
            lineHeight: 10,
          }}
        >
          {tab.badge > 99 ? '99+' : tab.badge.toString()}
        </Typography>
      </View>
    );
  };

  // Render individual tab
  const renderTab = (tab: TabConfig, index: number) => {
    const isActive = tab.id === activeTab;
    const iconColor = isActive ? getActiveColor() : getInactiveColor();
    const textColor = isActive ? getActiveColor() : getInactiveColor();

    return (
      <TouchableOpacity
        key={tab.id}
        style={getTabButtonStyles(isActive, tab.disabled || false)}
        onPress={() => !tab.disabled && onTabPress(tab.id)}
        disabled={tab.disabled}
        accessibilityRole="tab"
        accessibilityState={{ selected: isActive, disabled: tab.disabled }}
        accessibilityLabel={tab.accessibilityLabel || tab.label}
        accessibilityHint={tab.accessibilityHint}
        testID={tab.testID || `tab-${tab.id}`}
        activeOpacity={0.7}
      >
        <View style={{ position: 'relative' }}>
          <Icon
            name={tab.icon}
            size="md"
            color={iconColor}
          />
          {renderTabBadge(tab)}
        </View>
        
        {showLabels && (
          <Typography
            variant="caption"
            color={textColor}
            align="center"
            numberOfLines={1}
            ellipsizeMode="tail"
            weight={isActive ? 'medium' : 'normal'}
            style={{ 
              marginTop: 4,
              fontSize: 11,
              lineHeight: 12,
            }}
          >
            {tab.label}
          </Typography>
        )}
      </TouchableOpacity>
    );
  };

  // Get accessibility label
  const getAccessibilityLabel = (): string => {
    if (accessibilityLabel) return accessibilityLabel;
    return `Tab bar with ${tabs.length} tabs`;
  };

  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="tablist"
      accessibilityLabel={getAccessibilityLabel()}
      testID={testID}
    >
      <View style={getTabContainerStyles()}>
        {/* Active indicator */}
        {animated && (
          <Animated.View
            style={[
              getActiveIndicatorStyles(),
              {
                left: indicatorPosition,
              },
            ]}
          />
        )}
        
        {/* Static indicator for non-animated version */}
        {!animated && (
          <View
            style={[
              getActiveIndicatorStyles(),
              {
                left: tabs.findIndex(tab => tab.id === activeTab) * indicatorWidth,
              },
            ]}
          />
        )}
        
        {/* Tab buttons */}
        {tabs.map((tab, index) => renderTab(tab, index))}
      </View>
    </View>
  );
};

// Export default
export default TabBar;
</file>

<file path="src/components/organisms/TeacherBoardingInfoModal.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

export default function BoardingInfoModal() {
  return (
    <View>
      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Informasi Asrama</Text>
        <Text style={styles.modalDescription}>
          Berikut adalah informasi asrama yang Anda kelola sebagai pembimbing asrama.
        </Text>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Gedung & Kamar</Text>
        <View style={styles.infoCard}>
          <Text style={styles.infoLabel}>Gedung:</Text>
          <Text style={styles.infoValue}>Al-Farabi</Text>
        </View>
        <View style={styles.infoCard}>
          <Text style={styles.infoLabel}>Jumlah Kamar:</Text>
          <Text style={styles.infoValue}>10</Text>
        </View>
        <View style={styles.infoCard}>
          <Text style={styles.infoLabel}>Jumlah Siswa:</Text>
          <Text style={styles.infoValue}>40</Text>
        </View>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Jadwal Piket Asrama</Text>
        <View style={styles.scheduleCard}>
          <View style={styles.scheduleHeader}>
            <View style={styles.scheduleDay}>
              <Text style={styles.scheduleDayText}>Sen</Text>
            </View>
            <View style={styles.scheduleInfo}>
              <Text style={styles.scheduleTime}>19:00 - 22:00</Text>
              <Text style={styles.scheduleActivity}>Pengawasan Belajar Malam</Text>
            </View>
          </View>
        </View>
        <View style={styles.scheduleCard}>
          <View style={styles.scheduleHeader}>
            <View style={styles.scheduleDay}>
              <Text style={styles.scheduleDayText}>Rab</Text>
            </View>
            <View style={styles.scheduleInfo}>
              <Text style={styles.scheduleTime}>19:00 - 22:00</Text>
              <Text style={styles.scheduleActivity}>Pengawasan Belajar Malam</Text>
            </View>
          </View>
        </View>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Aktivitas Asrama Hari Ini</Text>
        <View style={styles.activityCard}>
          <Text style={styles.activityTime}>05:00 - 05:30</Text>
          <Text style={styles.activityName}>Sholat Subuh Berjamaah</Text>
        </View>
        <View style={styles.activityCard}>
          <Text style={styles.activityTime}>19:30 - 21:00</Text>
          <Text style={styles.activityName}>Belajar Mandiri</Text>
        </View>
        <View style={styles.activityCard}>
          <Text style={styles.activityTime}>21:00 - 21:30</Text>
          <Text style={styles.activityName}>Persiapan Tidur</Text>
        </View>
      </View>

      <TouchableOpacity style={styles.actionButton}>
        <Text style={styles.actionButtonText}>Kelola Asrama</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  modalSection: {
    marginBottom: 20,
  },
  modalSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 10,
  },
  modalDescription: {
    fontSize: 14,
    color: '#555555',
    marginBottom: 15,
    lineHeight: 20,
  },
  infoCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  infoLabel: {
    fontSize: 14,
    color: '#555555',
  },
  infoValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
  },
  scheduleCard: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  scheduleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  scheduleDay: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#f0c75e',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  scheduleDayText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  scheduleInfo: {
    flex: 1,
  },
  scheduleTime: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 5,
  },
  scheduleActivity: {
    fontSize: 14,
    color: '#555555',
  },
  activityCard: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  activityTime: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 5,
  },
  activityName: {
    fontSize: 14,
    color: '#555555',
  },
  actionButton: {
    backgroundColor: '#005e7a',
    paddingVertical: 12,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 10,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ffffff',
  },
});
</file>

<file path="src/components/organisms/TeacherCommunicationModal.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

export default function CommunicationModal() {
  return (
    <View>
      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Komunikasi</Text>
        <Text style={styles.modalDescription}>
          Komunikasi dengan siswa dan orang tua untuk memantau perkembangan siswa.
        </Text>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Siswa</Text>
        <TouchableOpacity style={styles.contactCard}>
          <View style={[styles.contactIcon, { backgroundColor: '#005e7a' }]}>
            <Ionicons name="person" size={24} color="#ffffff" />
          </View>
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Ahmad Fauzi</Text>
            <Text style={styles.contactRole}>Kelas 8A</Text>
          </View>
          <Ionicons name="chatbubble-outline" size={24} color="#005e7a" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.contactCard}>
          <View style={[styles.contactIcon, { backgroundColor: '#005e7a' }]}>
            <Ionicons name="person" size={24} color="#ffffff" />
          </View>
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Muhammad Rizki</Text>
            <Text style={styles.contactRole}>Kelas 8A</Text>
          </View>
          <Ionicons name="chatbubble-outline" size={24} color="#005e7a" />
        </TouchableOpacity>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Orang Tua</Text>
        <TouchableOpacity style={styles.contactCard}>
          <View style={[styles.contactIcon, { backgroundColor: '#f0c75e' }]}>
            <Ionicons name="people" size={24} color="#ffffff" />
          </View>
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Orang Tua Ahmad</Text>
            <Text style={styles.contactRole}>Wali dari Ahmad Fauzi</Text>
          </View>
          <Ionicons name="chatbubble-outline" size={24} color="#005e7a" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.contactCard}>
          <View style={[styles.contactIcon, { backgroundColor: '#f0c75e' }]}>
            <Ionicons name="people" size={24} color="#ffffff" />
          </View>
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Orang Tua Rizki</Text>
            <Text style={styles.contactRole}>Wali dari Muhammad Rizki</Text>
          </View>
          <Ionicons name="chatbubble-outline" size={24} color="#005e7a" />
        </TouchableOpacity>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Pesan Terbaru</Text>
        <View style={styles.messageCard}>
          <View style={styles.messageHeader}>
            <Text style={styles.messageSender}>Orang Tua Ahmad</Text>
            <Text style={styles.messageTime}>10:30</Text>
          </View>
          <Text style={styles.messageContent}>Bagaimana perkembangan hafalan Ahmad minggu ini?</Text>
        </View>
        <View style={styles.messageCard}>
          <View style={styles.messageHeader}>
            <Text style={styles.messageSender}>Muhammad Rizki</Text>
            <Text style={styles.messageTime}>Kemarin</Text>
          </View>
          <Text style={styles.messageContent}>Ustadz, saya ingin konsultasi tentang hafalan saya</Text>
        </View>
      </View>

      <TouchableOpacity style={styles.actionButton}>
        <Text style={styles.actionButtonText}>Buka Semua Pesan</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  modalSection: {
    marginBottom: 20,
  },
  modalSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 10,
  },
  modalDescription: {
    fontSize: 14,
    color: '#555555',
    marginBottom: 15,
    lineHeight: 20,
  },
  contactCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  contactIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
  },
  contactRole: {
    fontSize: 12,
    color: '#888888',
  },
  messageCard: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  messageHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
  },
  messageSender: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
  },
  messageTime: {
    fontSize: 12,
    color: '#888888',
  },
  messageContent: {
    fontSize: 14,
    color: '#555555',
  },
  actionButton: {
    backgroundColor: '#005e7a',
    paddingVertical: 12,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 10,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ffffff',
  },
});
</file>

<file path="src/components/organisms/TeacherIncidentReportModal.tsx">
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

export default function IncidentReportModal() {
  return (
    <View>
      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Manajemen Insiden</Text>
        <Text style={styles.modalDescription}>
          Kelola laporan insiden dari siswa dan orang tua terkait keamanan, kesejahteraan, atau perilaku yang mengkhawatirkan.
        </Text>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Laporan Baru</Text>
        <View style={styles.incidentCard}>
          <View style={styles.incidentHeader}>
            <View style={[styles.incidentTypeTag, { backgroundColor: '#e74c3c' }]}>
              <Text style={styles.incidentTypeText}>Bullying</Text>
            </View>
            <Text style={styles.incidentTime}>30 menit yang lalu</Text>
          </View>
          <Text style={styles.incidentTitle}>Laporan dari Orang Tua Ahmad</Text>
          <Text style={styles.incidentDescription}>
            Ahmad melaporkan bahwa dia merasa tidak nyaman dengan perilaku beberapa teman di asrama...
          </Text>
          <View style={styles.incidentActions}>
            <TouchableOpacity style={styles.incidentActionButton}>
              <Text style={styles.incidentActionText}>Lihat Detail</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[styles.incidentActionButton, styles.incidentActionButtonSecondary]}>
              <Text style={styles.incidentActionTextSecondary}>Tandai Ditangani</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>

      <View style={styles.modalSection}>
        <Text style={styles.modalSectionTitle}>Dalam Proses</Text>
        <View style={styles.incidentCard}>
          <View style={styles.incidentHeader}>
            <View style={[styles.incidentTypeTag, { backgroundColor: '#f39c12' }]}>
              <Text style={styles.incidentTypeText}>Kesehatan</Text>
            </View>
            <Text style={styles.incidentTime}>2 hari yang lalu</Text>
          </View>
          <Text style={styles.incidentTitle}>Laporan dari Muhammad Rizki</Text>
          <Text style={styles.incidentDescription}>
            Rizki melaporkan bahwa dia mengalami sakit kepala yang berkelanjutan...
          </Text>
          <View style={styles.incidentActions}>
            <TouchableOpacity style={styles.incidentActionButton}>
              <Text style={styles.incidentActionText}>Lihat Detail</Text>
            </TouchableOpacity>
            <TouchableOpacity style={[styles.incidentActionButton, styles.incidentActionButtonSecondary]}>
              <Text style={styles.incidentActionTextSecondary}>Perbarui Status</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>

      <TouchableOpacity style={styles.actionButton}>
        <Text style={styles.actionButtonText}>Lihat Semua Laporan</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  modalSection: {
    marginBottom: 20,
  },
  modalSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 10,
  },
  modalDescription: {
    fontSize: 14,
    color: '#555555',
    marginBottom: 15,
    lineHeight: 20,
  },
  incidentCard: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
  },
  incidentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  incidentTypeTag: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 15,
  },
  incidentTypeText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  incidentTime: {
    fontSize: 12,
    color: '#888888',
  },
  incidentTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 5,
  },
  incidentDescription: {
    fontSize: 14,
    color: '#555555',
    marginBottom: 15,
    lineHeight: 20,
  },
  incidentActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  incidentActionButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 5,
    flex: 1,
    marginRight: 10,
    alignItems: 'center',
  },
  incidentActionButtonSecondary: {
    backgroundColor: '#ffffff',
    borderWidth: 1,
    borderColor: '#005e7a',
    marginRight: 0,
  },
  incidentActionText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  incidentActionTextSecondary: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#005e7a',
  },
  actionButton: {
    backgroundColor: '#005e7a',
    paddingVertical: 12,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 10,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ffffff',
  },
});
</file>

<file path="src/components/organisms/TeacherNotificationPanel.tsx">
import React from 'react';
import { View, Text, ScrollView, TouchableOpacity, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

interface Notification {
  id: number;
  title: string;
  time: string;
  read: boolean;
}

interface NotificationPanelProps {
  notifications: Notification[];
  onMarkAllAsRead: () => void;
}

export default function NotificationPanel({ notifications, onMarkAllAsRead }: NotificationPanelProps) {
  return (
    <View style={styles.notificationsPanel}>
      <View style={styles.notificationsHeader}>
        <Text style={styles.notificationsTitle}>Notifikasi</Text>
        <TouchableOpacity onPress={onMarkAllAsRead}>
          <Text style={styles.markAllAsReadText}>Tandai semua telah dibaca</Text>
        </TouchableOpacity>
      </View>
      <ScrollView style={styles.notificationsList}>
        {notifications.map((notification) => (
          <View 
            key={notification.id} 
            style={[
              styles.notificationItem,
              notification.read ? styles.notificationRead : styles.notificationUnread
            ]}
          >
            <View style={styles.notificationContent}>
              <Text style={styles.notificationMessage}>{notification.title}</Text>
              <Text style={styles.notificationTime}>{notification.time}</Text>
            </View>
            <TouchableOpacity style={styles.notificationAction}>
              <Ionicons name="ellipsis-vertical" size={16} color="#888888" />
            </TouchableOpacity>
          </View>
        ))}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  notificationsPanel: {
    position: 'absolute',
    top: 60,
    right: 20,
    width: '80%',
    maxHeight: 300,
    backgroundColor: '#ffffff',
    borderRadius: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
    zIndex: 1000,
  },
  notificationsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  notificationsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
  },
  markAllAsReadText: {
    fontSize: 12,
    color: '#005e7a',
  },
  notificationsList: {
    maxHeight: 250,
  },
  notificationItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
  },
  notificationUnread: {
    backgroundColor: '#f0f9ff',
  },
  notificationRead: {
    backgroundColor: '#ffffff',
  },
  notificationContent: {
    flex: 1,
    marginRight: 10,
  },
  notificationMessage: {
    fontSize: 14,
    color: '#333333',
    marginBottom: 5,
  },
  notificationTime: {
    fontSize: 12,
    color: '#888888',
  },
  notificationAction: {
    padding: 5,
  },
});
</file>

<file path="src/components/templates/AntiBullyingResourcesTemplate.tsx">
import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image, Linking } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';
import { useRouter } from 'expo-router';

interface ResourceItem {
  id: string;
  title: string;
  description: string;
  type: 'article' | 'video' | 'contact';
  url?: string;
  imageUrl?: string;
}

export default function AntiBullyingResources() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<'all' | 'articles' | 'videos' | 'contacts'>('all');

  const resources: ResourceItem[] = [
    {
      id: '1',
      title: 'Mengenali Tanda-tanda Perundungan',
      description: 'Pelajari cara mengidentifikasi tanda-tanda bahwa anak Anda mungkin mengalami perundungan dan langkah-langkah yang dapat Anda ambil untuk membantu.',
      type: 'article',
      url: 'https://example.com/bullying-signs',
      imageUrl: 'https://via.placeholder.com/150',
    },
    {
      id: '2',
      title: 'Cara Berbicara dengan Anak Anda tentang Perundungan',
      description: 'Panduan untuk memulai percakapan yang sulit namun penting dengan anak Anda tentang perundungan.',
      type: 'article',
      url: 'https://example.com/talking-about-bullying',
      imageUrl: 'https://via.placeholder.com/150',
    },
    {
      id: '3',
      title: 'Memahami Perundungan Siber',
      description: 'Video informatif tentang perundungan siber dan cara melindungi anak Anda di dunia digital.',
      type: 'video',
      url: 'https://example.com/cyberbullying-video',
      imageUrl: 'https://via.placeholder.com/150',
    },
    {
      id: '4',
      title: 'Membangun Ketahanan pada Anak-anak',
      description: 'Webinar tentang cara membantu anak-anak mengembangkan ketahanan dan keterampilan mengatasi masalah.',
      type: 'video',
      url: 'https://example.com/resilience-webinar',
      imageUrl: 'https://via.placeholder.com/150',
    },
    {
      id: '5',
      title: 'Hotline Anti-Perundungan',
      description: 'Hubungi layanan konseling 24/7 untuk mendapatkan bantuan segera.',
      type: 'contact',
      url: 'tel:+62-800-123-4567',
    },
    {
      id: '6',
      title: 'Konselor Sekolah',
      description: 'Jadwalkan pertemuan dengan konselor sekolah untuk mendiskusikan kekhawatiran Anda.',
      type: 'contact',
      url: 'mailto:counselor@school.edu',
    },
  ];

  const filteredResources = resources.filter(resource => {
    if (activeTab === 'all') return true;
    if (activeTab === 'articles') return resource.type === 'article';
    if (activeTab === 'videos') return resource.type === 'video';
    if (activeTab === 'contacts') return resource.type === 'contact';
    return false;
  });

  const handleResourcePress = (resource: ResourceItem) => {
    if (resource.url) {
      Linking.openURL(resource.url);
    }
  };

  const renderResourceItem = (resource: ResourceItem) => (
    <TouchableOpacity
      key={resource.id}
      style={styles.resourceItem}
      onPress={() => handleResourcePress(resource)}
    >
      <View style={styles.resourceContent}>
        <View style={styles.resourceHeader}>
          <View style={[styles.resourceTypeIcon, { backgroundColor: getTypeColor(resource.type) }]}>
            {getTypeIcon(resource.type)}
          </View>
          <View style={styles.resourceInfo}>
            <Text style={styles.resourceTitle}>{resource.title}</Text>
            <Text style={styles.resourceType}>{getTypeLabel(resource.type)}</Text>
          </View>
        </View>
        <Text style={styles.resourceDescription}>{resource.description}</Text>
      </View>
      <Ionicons name="chevron-forward" size={20} color="#888888" />
    </TouchableOpacity>
  );

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'article': return '#e6f7ff';
      case 'video': return '#fff2e6';
      case 'contact': return '#f6ffed';
      default: return '#f5f5f5';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'article':
        return <Ionicons name="document-text" size={20} color="#005e7a" />;
      case 'video':
        return <Ionicons name="play-circle" size={20} color="#ff9800" />;
      case 'contact':
        return <Ionicons name="call" size={20} color="#4caf50" />;
      default:
        return <Ionicons name="information-circle" size={20} color="#888888" />;
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'article': return 'Artikel';
      case 'video': return 'Video';
      case 'contact': return 'Kontak';
      default: return 'Lainnya';
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Sumber Daya Anti-Perundungan</Text>
        <View style={{ width: 24 }} />
      </View>

      {/* Tab Bar */}
      <View style={styles.tabBar}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'all' && styles.activeTab]}
          onPress={() => setActiveTab('all')}
        >
          <Text style={[styles.tabText, activeTab === 'all' && styles.activeTabText]}>
            Semua
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'articles' && styles.activeTab]}
          onPress={() => setActiveTab('articles')}
        >
          <Text style={[styles.tabText, activeTab === 'articles' && styles.activeTabText]}>
            Artikel
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'videos' && styles.activeTab]}
          onPress={() => setActiveTab('videos')}
        >
          <Text style={[styles.tabText, activeTab === 'videos' && styles.activeTabText]}>
            Video
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'contacts' && styles.activeTab]}
          onPress={() => setActiveTab('contacts')}
        >
          <Text style={[styles.tabText, activeTab === 'contacts' && styles.activeTabText]}>
            Kontak
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        <View style={styles.resourcesList}>
          {filteredResources.map(renderResourceItem)}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  tabBar: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#005e7a',
  },
  tabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#666666',
  },
  activeTabText: {
    color: '#005e7a',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  resourcesList: {
    paddingBottom: 20,
  },
  resourceItem: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  resourceHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  resourceTypeIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  resourceInfo: {
    flex: 1,
  },
  resourceContent: {
    flex: 1,
  },
  resourceTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  resourceType: {
    fontSize: 12,
    color: '#888888',
    textTransform: 'uppercase',
  },
  resourceDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
});
</file>

<file path="src/components/templates/DashboardTemplate/DashboardTemplate.tsx">
/**
 * DashboardTemplate Component
 * Consistent dashboard structure for all user roles with header, content, and tab bar
 */

import React from 'react';
import {
  View,
  ScrollView,
  ViewStyle,
  StyleSheet,
  SafeAreaView,
  StatusBar,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Header } from '../../organisms/Header';
import { TabBar } from '../../organisms/TabBar';
import { BackgroundPattern } from '../../atoms/BackgroundPattern';

// Header action interface
export interface HeaderAction {
  icon: keyof typeof Ionicons.glyphMap;
  onPress: () => void;
  badge?: number;
  badgeColor?: string;
  accessibilityLabel?: string;
  accessibilityHint?: string;
  testID?: string;
}

// Tab configuration interface
export interface TabConfig {
  id: string;
  label: string;
  icon: keyof typeof Ionicons.glyphMap;
  badge?: number;
  badgeColor?: string;
  disabled?: boolean;
  accessibilityLabel?: string;
  accessibilityHint?: string;
  testID?: string;
}

// DashboardTemplate Props Interface
export interface DashboardTemplateProps {
  // Header configuration
  header: {
    title: string;
    subtitle?: string;
    leftAction?: {
      icon: keyof typeof Ionicons.glyphMap;
      onPress: () => void;
      accessibilityLabel?: string;
    };
    rightActions?: HeaderAction[];
  };
  
  // Tab configuration
  tabs?: TabConfig[];
  activeTab?: string;
  onTabChange?: (tabId: string) => void;
  
  // Content
  children: React.ReactNode;
  
  // Background and styling
  backgroundPattern?: boolean;
  backgroundColor?: string;
  contentBackgroundColor?: string;
  
  // Layout options
  scrollable?: boolean;
  safeArea?: boolean;
  contentPadding?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  headerStyle?: ViewStyle;
  contentStyle?: ViewStyle;
  tabBarStyle?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// DashboardTemplate Component
export const DashboardTemplate: React.FC<DashboardTemplateProps> = ({
  header,
  tabs,
  activeTab,
  onTabChange,
  children,
  backgroundPattern = true,
  backgroundColor,
  contentBackgroundColor,
  scrollable = true,
  safeArea = true,
  contentPadding = true,
  style,
  headerStyle,
  contentStyle,
  tabBarStyle,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    return {
      flex: 1,
      backgroundColor: backgroundColor || colors.background.primary,
    };
  };

  // Get content container styles
  const getContentContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      flex: 1,
      backgroundColor: contentBackgroundColor || 'transparent',
    };

    if (contentPadding) {
      baseStyle.paddingHorizontal = theme.spacing.base.lg;
    }

    return baseStyle;
  };

  // Get scroll content styles
  const getScrollContentStyles = (): ViewStyle => {
    return {
      flexGrow: 1,
      paddingBottom: tabs ? theme.spacing.base.xl : theme.spacing.base.lg,
    };
  };

  // Render background pattern
  const renderBackgroundPattern = () => {
    if (!backgroundPattern) return null;

    return (
      <View style={StyleSheet.absoluteFill}>
        <BackgroundPattern
          color={colors.primary.main}
          opacity={0.05}
        />
      </View>
    );
  };

  // Render header
  const renderHeader = () => {
    return (
      <Header
        title={header.title}
        subtitle={header.subtitle}
        leftAction={header.leftAction}
        rightActions={header.rightActions}
        style={headerStyle}
        backgroundColor={backgroundColor || colors.background.primary}
        testID={testID ? `${testID}-header` : 'dashboard-header'}
      />
    );
  };

  // Render content
  const renderContent = () => {
    const contentContainer = (
      <View style={[getContentContainerStyles(), contentStyle]}>
        {children}
      </View>
    );

    if (scrollable) {
      return (
        <ScrollView
          style={{ flex: 1 }}
          contentContainerStyle={getScrollContentStyles()}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps={'handled'}
          testID={testID ? `${testID}-scroll` : 'dashboard-scroll'}
        >
          {contentContainer}
        </ScrollView>
      );
    }

    return contentContainer;
  };

  // Render tab bar
  const renderTabBar = () => {
    if (!tabs || tabs.length === 0) return null;

    return (
      <TabBar
        tabs={tabs}
        activeTab={activeTab || tabs[0]?.id}
        onTabPress={onTabChange || (() => {})}
        style={tabBarStyle}
        testID={testID ? `${testID}-tabbar` : 'dashboard-tabbar'}
      />
    );
  };

  // Main container component
  const Container = safeArea ? SafeAreaView : View;

  return (
    <Container
      style={[getContainerStyles(), style]}
      accessibilityLabel={accessibilityLabel || 'Dashboard'}
      testID={testID || 'dashboard-template'}
    >
      {/* Status bar configuration */}
      <StatusBar
        barStyle={Platform.OS === 'ios' ? 'dark-content' : 'light-content'}
        backgroundColor={backgroundColor || colors.background.primary}
        translucent={false}
      />

      {/* Background pattern */}
      {renderBackgroundPattern()}

      {/* Header */}
      {renderHeader()}

      {/* Content */}
      {renderContent()}

      {/* Tab bar */}
      {renderTabBar()}
    </Container>
  );
};

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Export default
export default DashboardTemplate;
</file>

<file path="src/components/templates/DashboardTemplate/index.ts">
/**
 * DashboardTemplate Component Export
 * Exports the DashboardTemplate component and its related types
 */

export { DashboardTemplate } from './DashboardTemplate';
export type { 
  DashboardTemplateProps, 
  HeaderAction, 
  TabConfig 
} from './DashboardTemplate';
export { default } from './DashboardTemplate';
</file>

<file path="src/components/templates/FormTemplate/FormTemplate.stories.tsx">
/**
 * FormTemplate Component Stories
 * Storybook stories demonstrating all FormTemplate component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { FormTemplate } from './FormTemplate';
import { Typography } from '../../atoms/Typography';
import { Input } from '../../atoms/Input';
import { Button } from '../../atoms/Button';

const meta: Meta<typeof FormTemplate> = {
  title: 'Templates/FormTemplate',
  component: FormTemplate,
  parameters: {
    docs: {
      description: {
        component: 'A consistent form template with header, form fields, and action buttons for all form use cases.',
      },
    },
  },
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'card', 'modal'],
      description: 'Form variant',
    },
    scrollable: {
      control: { type: 'boolean' },
      description: 'Whether content is scrollable',
    },
    keyboardAvoiding: {
      control: { type: 'boolean' },
      description: 'Whether to avoid keyboard',
    },
    contentPadding: {
      control: { type: 'boolean' },
      description: 'Whether to add content padding',
    },
  },
};

export default meta;
type Story = StoryObj<typeof FormTemplate>;

// Sample form content
const BasicFormContent: React.FC = () => {
  const [name, setName] = React.useState('');
  const [email, setEmail] = React.useState('');
  
  return (
    <View style={{ gap: 16 }}>
      <Input
        label="Full Name"
        value={name}
        onChangeText={setName}
        placeholder="Enter your full name"
      />
      <Input
        label="Email Address"
        value={email}
        onChangeText={setEmail}
        placeholder="Enter your email"
      />
    </View>
  );
};

const StudentFormContent: React.FC = () => {
  const [studentId, setStudentId] = React.useState('');
  const [grade, setGrade] = React.useState('');
  const [subject, setSubject] = React.useState('');
  
  return (
    <View style={{ gap: 16 }}>
      <Input
        label="Student ID"
        value={studentId}
        onChangeText={setStudentId}
        placeholder="Enter student ID"
      />
      <Input
        label="Grade Level"
        value={grade}
        onChangeText={setGrade}
        placeholder="Enter grade level"
      />
      <Input
        label="Subject"
        value={subject}
        onChangeText={setSubject}
        placeholder="Enter subject"
      />
    </View>
  );
};

// Basic form template
export const Default: Story = {
  args: {
    title: 'Contact Form',
    description: 'Please fill out the form below to get in touch with us.',
    primaryAction: {
      label: 'Submit',
      onPress: () => alert('Form submitted'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Form cancelled'),
    },
    children: <BasicFormContent />,
  },
};

// With subtitle
export const WithSubtitle: Story = {
  args: {
    title: 'Student Registration',
    subtitle: 'New Student Enrollment',
    description: 'Please provide the required information to register a new student.',
    primaryAction: {
      label: 'Register Student',
      onPress: () => alert('Student registered'),
      icon: 'person-add',
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Registration cancelled'),
    },
    children: <StudentFormContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with subtitle and description.',
      },
    },
  },
};

// Card variant
export const CardVariant: Story = {
  args: {
    title: 'Login',
    subtitle: 'Sign in to your account',
    variant: 'card',
    primaryAction: {
      label: 'Sign In',
      onPress: () => alert('Signed in'),
      fullWidth: true,
    },
    children: (
      <View style={{ gap: 16 }}>
        <Input
          label="Email"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your email"
        />
        <Input
          label="Password"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your password"
          secureTextEntry
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with card styling.',
      },
    },
  },
};

// With sections
export const WithSections: Story = {
  args: {
    title: 'Student Profile',
    subtitle: 'Complete Student Information',
    sections: [
      {
        id: 'personal',
        title: 'Personal Information',
        description: 'Basic personal details',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="First Name"
              value=""
              onChangeText={() => {}}
              placeholder="Enter first name"
            />
            <Input
              label="Last Name"
              value=""
              onChangeText={() => {}}
              placeholder="Enter last name"
            />
            <Input
              label="Date of Birth"
              value=""
              onChangeText={() => {}}
              placeholder="Select date of birth"
            />
          </View>
        ),
      },
      {
        id: 'contact',
        title: 'Contact Information',
        description: 'How we can reach you',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="Email Address"
              value=""
              onChangeText={() => {}}
              placeholder="Enter email address"
            />
            <Input
              label="Phone Number"
              value=""
              onChangeText={() => {}}
              placeholder="Enter phone number"
            />
          </View>
        ),
      },
      {
        id: 'academic',
        title: 'Academic Information',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="Grade Level"
              value=""
              onChangeText={() => {}}
              placeholder="Select grade level"
            />
            <Input
              label="Previous School"
              value=""
              onChangeText={() => {}}
              placeholder="Enter previous school name"
            />
          </View>
        ),
      },
    ],
    primaryAction: {
      label: 'Save Profile',
      onPress: () => alert('Profile saved'),
      icon: 'save',
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with organized sections.',
      },
    },
  },
};

// Multiple actions
export const MultipleActions: Story = {
  args: {
    title: 'Assignment Submission',
    subtitle: 'Mathematics Chapter 5',
    actions: [
      {
        label: 'Save Draft',
        onPress: () => alert('Draft saved'),
        variant: 'outline',
        icon: 'save',
      },
      {
        label: 'Preview',
        onPress: () => alert('Preview opened'),
        variant: 'ghost',
        icon: 'eye',
      },
      {
        label: 'Submit',
        onPress: () => alert('Assignment submitted'),
        variant: 'primary',
        icon: 'checkmark',
      },
    ],
    children: (
      <View style={{ gap: 16 }}>
        <Input
          label="Assignment Title"
          value="Quadratic Equations Practice"
          onChangeText={() => {}}
          placeholder="Enter assignment title"
        />
        <Input
          label="Your Solution"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your solution here"
          multiline
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with multiple action buttons.',
      },
    },
  },
};

// Full width actions
export const FullWidthActions: Story = {
  args: {
    title: 'Quick Login',
    variant: 'card',
    primaryAction: {
      label: 'Sign In',
      onPress: () => alert('Signed in'),
      fullWidth: true,
    },
    secondaryAction: {
      label: 'Create Account',
      onPress: () => alert('Account creation'),
      variant: 'outline',
      fullWidth: true,
    },
    children: (
      <View style={{ gap: 16 }}>
        <Input
          label="Email"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your email"
        />
        <Input
          label="Password"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your password"
          secureTextEntry
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with full-width action buttons.',
      },
    },
  },
};

// Loading states
export const LoadingStates: Story = {
  args: {
    title: 'Submitting Form',
    description: 'Please wait while we process your information.',
    primaryAction: {
      label: 'Submitting...',
      onPress: () => alert('Submit clicked'),
      loading: true,
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
      disabled: true,
    },
    children: <BasicFormContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template with loading and disabled states.',
      },
    },
  },
};

// Role-specific examples
export const StudentAssignmentForm: Story = {
  args: {
    title: 'Submit Assignment',
    subtitle: 'Mathematics - Quadratic Equations',
    description: 'Complete and submit your assignment below. Make sure to show all your work.',
    primaryAction: {
      label: 'Submit Assignment',
      onPress: () => alert('Assignment submitted'),
      icon: 'checkmark',
    },
    secondaryAction: {
      label: 'Save Draft',
      onPress: () => alert('Draft saved'),
      icon: 'save',
    },
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="body2" color="secondary">
          Due: Tomorrow at 11:59 PM
        </Typography>
        
        <Input
          label="Problem 1"
          value=""
          onChangeText={() => {}}
          placeholder="Solve: x² + 5x + 6 = 0"
          multiline
        />
        
        <Input
          label="Problem 2"
          value=""
          onChangeText={() => {}}
          placeholder="Solve: 2x² - 7x + 3 = 0"
          multiline
        />
        
        <Input
          label="Problem 3"
          value=""
          onChangeText={() => {}}
          placeholder="Graph: y = x² - 4x + 3"
          multiline
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Student assignment submission form.',
      },
    },
  },
};

export const TeacherGradingForm: Story = {
  args: {
    title: 'Grade Assignment',
    subtitle: 'Ahmed Al-Rashid - Mathematics Exercise 5',
    sections: [
      {
        id: 'student-work',
        title: 'Student Submission',
        children: (
          <View style={{ 
            backgroundColor: '#f8f9fa', 
            padding: 16, 
            borderRadius: 8,
            marginBottom: 16 
          }}>
            <Typography variant="body2" color="secondary">
              Student's solution: The quadratic formula is x = (-b ± √(b²-4ac)) / 2a. 
              For x² + 5x + 6 = 0, we have a=1, b=5, c=6...
            </Typography>
          </View>
        ),
      },
      {
        id: 'grading',
        title: 'Grading',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="Grade (out of 100)"
              value="92"
              onChangeText={() => {}}
              placeholder="Enter grade"
            />
            
            <Input
              label="Feedback"
              value=""
              onChangeText={() => {}}
              placeholder="Provide feedback to the student"
              multiline
            />
          </View>
        ),
      },
    ],
    primaryAction: {
      label: 'Save Grade',
      onPress: () => alert('Grade saved'),
      icon: 'checkmark',
    },
    actions: [
      {
        label: 'Return for Revision',
        onPress: () => alert('Returned for revision'),
        variant: 'outline',
        icon: 'refresh',
      },
    ],
  },
  parameters: {
    docs: {
      description: {
        story: 'Teacher grading form with student work review.',
      },
    },
  },
};

export const ParentContactForm: Story = {
  args: {
    title: 'Contact Teacher',
    subtitle: 'Send a message to Ahmed\'s teacher',
    variant: 'card',
    primaryAction: {
      label: 'Send Message',
      onPress: () => alert('Message sent'),
      icon: 'send',
      fullWidth: true,
    },
    children: (
      <View style={{ gap: 16 }}>
        <Input
          label="Teacher"
          value="Ms. Sarah Johnson - Mathematics"
          onChangeText={() => {}}
          disabled
        />
        
        <Input
          label="Subject"
          value=""
          onChangeText={() => {}}
          placeholder="What is this message about?"
        />
        
        <Input
          label="Message"
          value=""
          onChangeText={() => {}}
          placeholder="Type your message here"
          multiline
        />
        
        <Typography variant="caption" color="secondary">
          Your message will be sent directly to the teacher and you'll receive a response within 24 hours.
        </Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Parent contact form for messaging teachers.',
      },
    },
  },
};

export const ManagementIncidentForm: Story = {
  args: {
    title: 'Incident Report',
    subtitle: 'Report a new incident',
    description: 'Please provide detailed information about the incident for proper documentation and follow-up.',
    sections: [
      {
        id: 'basic-info',
        title: 'Basic Information',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="Incident Type"
              value=""
              onChangeText={() => {}}
              placeholder="Select incident type"
            />
            
            <Input
              label="Location"
              value=""
              onChangeText={() => {}}
              placeholder="Where did this occur?"
            />
            
            <Input
              label="Date & Time"
              value=""
              onChangeText={() => {}}
              placeholder="When did this occur?"
            />
          </View>
        ),
      },
      {
        id: 'details',
        title: 'Incident Details',
        children: (
          <View style={{ gap: 16 }}>
            <Input
              label="Students Involved"
              value=""
              onChangeText={() => {}}
              placeholder="List students involved"
            />
            
            <Input
              label="Staff Witnesses"
              value=""
              onChangeText={() => {}}
              placeholder="List staff who witnessed the incident"
            />
            
            <Input
              label="Description"
              value=""
              onChangeText={() => {}}
              placeholder="Provide a detailed description of what happened"
              multiline
            />
          </View>
        ),
      },
      {
        id: 'action',
        title: 'Immediate Action Taken',
        children: (
          <Input
            label="Action Description"
            value=""
            onChangeText={() => {}}
            placeholder="Describe any immediate actions taken"
            multiline
          />
        ),
      },
    ],
    primaryAction: {
      label: 'Submit Report',
      onPress: () => alert('Report submitted'),
      icon: 'document',
    },
    secondaryAction: {
      label: 'Save Draft',
      onPress: () => alert('Draft saved'),
      icon: 'save',
    },
  },
  parameters: {
    docs: {
      description: {
        story: 'Management incident reporting form with multiple sections.',
      },
    },
  },
};

// Non-scrollable form
export const NonScrollable: Story = {
  args: {
    title: 'Quick Action',
    scrollable: false,
    primaryAction: {
      label: 'Execute',
      onPress: () => alert('Executed'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: (
      <View style={{ flex: 1, justifyContent: 'center' }}>
        <Input
          label="Action Parameter"
          value=""
          onChangeText={() => {}}
          placeholder="Enter parameter"
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Non-scrollable form with fixed layout.',
      },
    },
  },
};

// Without keyboard avoiding
export const NoKeyboardAvoiding: Story = {
  args: {
    title: 'Simple Form',
    keyboardAvoiding: false,
    primaryAction: {
      label: 'Submit',
      onPress: () => alert('Submitted'),
    },
    children: <BasicFormContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Form without keyboard avoiding behavior.',
      },
    },
  },
};

// Modal variant
export const ModalVariant: Story = {
  args: {
    title: 'Modal Form',
    subtitle: 'Form displayed in modal context',
    variant: 'modal',
    primaryAction: {
      label: 'Save',
      onPress: () => alert('Saved'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: <BasicFormContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Form template optimized for modal display.',
      },
    },
  },
};
</file>

<file path="src/components/templates/FormTemplate/FormTemplate.test.tsx">
/**
 * FormTemplate Component Tests
 * Unit tests for the FormTemplate component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Text, View } from 'react-native';
import { FormTemplate } from './FormTemplate';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

// Sample content component
const SampleContent: React.FC = () => (
  <View>
    <Text>Sample form content</Text>
  </View>
);

describe('FormTemplate Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with basic props', () => {
      const { getByText } = render(
        <TestWrapper>
          <FormTemplate title="Test Form">
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Form')).toBeTruthy();
      expect(getByText('Sample form content')).toBeTruthy();
    });

    it('renders with subtitle', () => {
      const { getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            subtitle="Test Subtitle"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Form')).toBeTruthy();
      expect(getByText('Test Subtitle')).toBeTruthy();
    });

    it('renders with description', () => {
      const { getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            description="Test description"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Form')).toBeTruthy();
      expect(getByText('Test description')).toBeTruthy();
    });

    it('renders with testID', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="test-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('test-form')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Form Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Default Form"
            testID="default-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('default-form')).toBeTruthy();
    });

    it('renders card variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Card Form"
            variant="card"
            testID="card-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('card-form')).toBeTruthy();
    });

    it('renders modal variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Modal Form"
            variant="modal"
            testID="modal-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('modal-form')).toBeTruthy();
    });
  });

  // Actions tests
  describe('Actions', () => {
    it('renders primary action', () => {
      const mockPrimaryAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Submit',
              onPress: mockPrimaryAction,
            }}
            testID="form-with-primary"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      const primaryButton = getByTestId('form-with-primary-action-0');
      expect(primaryButton).toBeTruthy();
    });

    it('renders secondary action', () => {
      const mockSecondaryAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            secondaryAction={{
              label: 'Cancel',
              onPress: mockSecondaryAction,
            }}
            testID="form-with-secondary"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      const secondaryButton = getByTestId('form-with-secondary-action-0');
      expect(secondaryButton).toBeTruthy();
    });

    it('renders both primary and secondary actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Submit',
              onPress: () => {},
            }}
            secondaryAction={{
              label: 'Cancel',
              onPress: () => {},
            }}
            testID="form-with-both"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('form-with-both-action-0')).toBeTruthy(); // Secondary
      expect(getByTestId('form-with-both-action-1')).toBeTruthy(); // Primary
    });

    it('renders multiple actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            actions={[
              { label: 'Action 1', onPress: () => {} },
              { label: 'Action 2', onPress: () => {} },
              { label: 'Action 3', onPress: () => {} },
            ]}
            testID="form-with-multiple"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('form-with-multiple-action-0')).toBeTruthy();
      expect(getByTestId('form-with-multiple-action-1')).toBeTruthy();
      expect(getByTestId('form-with-multiple-action-2')).toBeTruthy();
    });

    it('handles action button press', () => {
      const mockAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Test Action',
              onPress: mockAction,
            }}
            testID="action-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      const actionButton = getByTestId('action-form-action-0');
      fireEvent.press(actionButton);
      expect(mockAction).toHaveBeenCalledTimes(1);
    });

    it('does not render actions when none provided', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="no-actions-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('no-actions-form-action-0')).toBeNull();
    });
  });

  // Sections tests
  describe('Form Sections', () => {
    it('renders form sections', () => {
      const sections = [
        {
          id: 'section1',
          title: 'Section 1',
          description: 'First section',
          children: <Text>Section 1 content</Text>,
        },
        {
          id: 'section2',
          title: 'Section 2',
          children: <Text>Section 2 content</Text>,
        },
      ];

      const { getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            sections={sections}
          />
        </TestWrapper>
      );

      expect(getByText('Section 1')).toBeTruthy();
      expect(getByText('First section')).toBeTruthy();
      expect(getByText('Section 1 content')).toBeTruthy();
      expect(getByText('Section 2')).toBeTruthy();
      expect(getByText('Section 2 content')).toBeTruthy();
    });

    it('renders sections without titles', () => {
      const sections = [
        {
          id: 'section1',
          children: <Text>Untitled section content</Text>,
        },
      ];

      const { getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            sections={sections}
          />
        </TestWrapper>
      );

      expect(getByText('Untitled section content')).toBeTruthy();
    });

    it('does not render sections when none provided', () => {
      const { getByText } = render(
        <TestWrapper>
          <FormTemplate title="Test Form">
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Sample form content')).toBeTruthy();
    });
  });

  // Layout options tests
  describe('Layout Options', () => {
    it('renders scrollable content by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="scrollable-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('scrollable-form-scroll')).toBeTruthy();
    });

    it('renders non-scrollable content when specified', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            scrollable={false}
            testID="non-scrollable-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('non-scrollable-form-scroll')).toBeNull();
    });

    it('applies content padding by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="padded-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('padded-form')).toBeTruthy();
    });

    it('removes content padding when disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            contentPadding={false}
            testID="no-padding-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('no-padding-form')).toBeTruthy();
    });

    it('enables keyboard avoiding by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="keyboard-avoiding-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('keyboard-avoiding-form')).toBeTruthy();
    });

    it('disables keyboard avoiding when specified', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            keyboardAvoiding={false}
            testID="no-keyboard-avoiding-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('no-keyboard-avoiding-form')).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2 };
      const customHeaderStyle = { backgroundColor: 'red' };
      const customContentStyle = { padding: 20 };
      const customActionsStyle = { backgroundColor: 'blue' };

      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            style={customStyle}
            headerStyle={customHeaderStyle}
            contentStyle={customContentStyle}
            actionsStyle={customActionsStyle}
            primaryAction={{ label: 'Test', onPress: () => {} }}
            testID="styled-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('styled-form')).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has default accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            testID="accessible-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      const form = getByTestId('accessible-form');
      expect(form.props.accessibilityLabel).toBe('Test Form form');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            accessibilityLabel="Custom form label"
            testID="custom-accessible-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      const form = getByTestId('custom-accessible-form');
      expect(form.props.accessibilityLabel).toBe('Custom form label');
    });
  });

  // Action states tests
  describe('Action States', () => {
    it('renders loading action', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Loading...',
              onPress: () => {},
              loading: true,
            }}
            testID="loading-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('loading-form-action-0')).toBeTruthy();
    });

    it('renders disabled action', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Disabled',
              onPress: () => {},
              disabled: true,
            }}
            testID="disabled-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('disabled-form-action-0')).toBeTruthy();
    });

    it('renders action with icon', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Submit',
              onPress: () => {},
              icon: 'checkmark',
            }}
            testID="icon-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('icon-form-action-0')).toBeTruthy();
    });

    it('renders full width actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            primaryAction={{
              label: 'Full Width',
              onPress: () => {},
              fullWidth: true,
            }}
            testID="fullwidth-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('fullwidth-form-action-0')).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles complex content', () => {
      const ComplexContent = () => (
        <View>
          <Text>Title</Text>
          <View>
            <Text>Nested content</Text>
            <Text>More nested content</Text>
          </View>
        </View>
      );

      const { getByText } = render(
        <TestWrapper>
          <FormTemplate title="Test Form">
            <ComplexContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Title')).toBeTruthy();
      expect(getByText('Nested content')).toBeTruthy();
      expect(getByText('More nested content')).toBeTruthy();
    });

    it('handles empty sections array', () => {
      const { getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            sections={[]}
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByText('Sample form content')).toBeTruthy();
    });

    it('handles empty actions array', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <FormTemplate
            title="Test Form"
            actions={[]}
            testID="empty-actions-form"
          >
            <SampleContent />
          </FormTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('empty-actions-form-action-0')).toBeNull();
    });
  });

  // Integration tests
  describe('Integration', () => {
    it('works with all features enabled', () => {
      const mockPrimaryAction = jest.fn();
      const mockSecondaryAction = jest.fn();

      const sections = [
        {
          id: 'section1',
          title: 'Test Section',
          description: 'Test description',
          children: <Text>Section content</Text>,
        },
      ];

      const { getByTestId, getByText } = render(
        <TestWrapper>
          <FormTemplate
            title="Full Form"
            subtitle="Complete example"
            description="Full form description"
            sections={sections}
            primaryAction={{
              label: 'Submit',
              onPress: mockPrimaryAction,
              icon: 'checkmark',
            }}
            secondaryAction={{
              label: 'Cancel',
              onPress: mockSecondaryAction,
            }}
            variant="card"
            scrollable={true}
            keyboardAvoiding={true}
            contentPadding={true}
            testID="full-form"
          >
            <Text>Additional content</Text>
          </FormTemplate>
        </TestWrapper>
      );

      expect(getByTestId('full-form')).toBeTruthy();
      expect(getByTestId('full-form-scroll')).toBeTruthy();
      expect(getByTestId('full-form-action-0')).toBeTruthy(); // Secondary
      expect(getByTestId('full-form-action-1')).toBeTruthy(); // Primary
      expect(getByText('Full Form')).toBeTruthy();
      expect(getByText('Complete example')).toBeTruthy();
      expect(getByText('Full form description')).toBeTruthy();
      expect(getByText('Test Section')).toBeTruthy();
      expect(getByText('Test description')).toBeTruthy();
      expect(getByText('Section content')).toBeTruthy();
      expect(getByText('Additional content')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/templates/FormTemplate/index.ts">
/**
 * FormTemplate Component Export
 * Exports the FormTemplate component and its related types
 */

export { FormTemplate } from './FormTemplate';
export type { 
  FormTemplateProps, 
  FormSection, 
  FormAction 
} from './FormTemplate';
export { default } from './FormTemplate';
</file>

<file path="src/components/templates/index.ts">
/**
 * Barrel exports for template components
 * 
 * These are page-level layouts that provide consistent structure
 * and composition patterns for different types of screens.
 */

export { DashboardTemplate } from './DashboardTemplate';
export { FormTemplate } from './FormTemplate';
export { ModalTemplate } from './ModalTemplate';
</file>

<file path="src/components/templates/ModalTemplate/index.ts">
/**
 * ModalTemplate Component Export
 * Exports the ModalTemplate component and its related types
 */

export { ModalTemplate } from './ModalTemplate';
export type { 
  ModalTemplateProps, 
  ModalAction 
} from './ModalTemplate';
export { default } from './ModalTemplate';
</file>

<file path="src/components/templates/ModalTemplate/ModalTemplate.stories.tsx">
/**
 * ModalTemplate Component Stories
 * Storybook stories demonstrating all ModalTemplate component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { ModalTemplate } from './ModalTemplate';
import { Typography } from '../../atoms/Typography';
import { Input } from '../../atoms/Input';
import { Button } from '../../atoms/Button';
import { Card } from '../../molecules/Card';

const meta: Meta<typeof ModalTemplate> = {
  title: 'Templates/ModalTemplate',
  component: ModalTemplate,
  parameters: {
    docs: {
      description: {
        component: 'A consistent modal template with header, content, and action areas for all modal use cases.',
      },
    },
  },
  argTypes: {
    visible: {
      control: { type: 'boolean' },
      description: 'Whether the modal is visible',
    },
    size: {
      control: { type: 'select' },
      options: ['small', 'medium', 'large', 'fullscreen'],
      description: 'Modal size',
    },
    scrollable: {
      control: { type: 'boolean' },
      description: 'Whether content is scrollable',
    },
    showCloseButton: {
      control: { type: 'boolean' },
      description: 'Whether to show close button in header',
    },
    contentPadding: {
      control: { type: 'boolean' },
      description: 'Whether to add padding to content',
    },
  },
};

export default meta;
type Story = StoryObj<typeof ModalTemplate>;

// Sample content components
const SampleContent: React.FC = () => (
  <View style={{ gap: 16 }}>
    <Typography variant="body1">
      This is sample content for the modal template. It demonstrates how content is displayed within the modal structure.
    </Typography>
    <Typography variant="body2" color="secondary">
      The modal template provides consistent header, content, and action areas for all modal use cases.
    </Typography>
  </View>
);

const FormContent: React.FC = () => {
  const [name, setName] = React.useState('');
  const [email, setEmail] = React.useState('');
  
  return (
    <View style={{ gap: 16 }}>
      <Input
        label="Full Name"
        value={name}
        onChangeText={setName}
        placeholder="Enter your full name"
      />
      <Input
        label="Email Address"
        value={email}
        onChangeText={setEmail}
        placeholder="Enter your email"
      />
    </View>
  );
};

const LongContent: React.FC = () => (
  <View style={{ gap: 16 }}>
    {Array.from({ length: 10 }, (_, i) => (
      <Card key={i} variant="default" padding="medium">
        <Typography variant="h4" style={{ marginBottom: 8 }}>
          Section {i + 1}
        </Typography>
        <Typography variant="body2" color="secondary">
          This is a long content section to demonstrate scrollable behavior in the modal template.
        </Typography>
      </Card>
    ))}
  </View>
);

// Basic modal template
export const Default: Story = {
  args: {
    visible: true,
    title: 'Modal Title',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Save',
      onPress: () => alert('Save clicked'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancel clicked'),
    },
    children: <SampleContent />,
  },
};

// With subtitle
export const WithSubtitle: Story = {
  args: {
    visible: true,
    title: 'Create New Assignment',
    subtitle: 'Mathematics Chapter 5',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Create',
      onPress: () => alert('Create clicked'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancel clicked'),
    },
    children: <FormContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal template with subtitle in header.',
      },
    },
  },
};

// Different sizes
export const SmallSize: Story = {
  args: {
    visible: true,
    title: 'Confirm Action',
    size: 'small',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Confirm',
      onPress: () => alert('Confirmed'),
      variant: 'danger',
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: (
      <Typography variant="body1">
        Are you sure you want to delete this item? This action cannot be undone.
      </Typography>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Small modal for confirmations and simple actions.',
      },
    },
  },
};

export const LargeSize: Story = {
  args: {
    visible: true,
    title: 'Assignment Details',
    subtitle: 'Mathematics Chapter 5 - Quadratic Equations',
    size: 'large',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Submit Assignment',
      onPress: () => alert('Assignment submitted'),
    },
    secondaryAction: {
      label: 'Save Draft',
      onPress: () => alert('Draft saved'),
    },
    children: <LongContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Large modal for detailed content and forms.',
      },
    },
  },
};

export const FullscreenSize: Story = {
  args: {
    visible: true,
    title: 'Student Profile',
    subtitle: 'Complete student information',
    size: 'fullscreen',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Save Changes',
      onPress: () => alert('Changes saved'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: <LongContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Fullscreen modal for complex forms and detailed views.',
      },
    },
  },
};

// Without close button
export const NoCloseButton: Story = {
  args: {
    visible: true,
    title: 'Required Action',
    subtitle: 'Please complete this step to continue',
    showCloseButton: false,
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Continue',
      onPress: () => alert('Continued'),
    },
    children: (
      <Typography variant="body1">
        This modal requires user action before it can be closed.
      </Typography>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal without close button for required actions.',
      },
    },
  },
};

// Multiple actions
export const MultipleActions: Story = {
  args: {
    visible: true,
    title: 'Assignment Options',
    onClose: () => alert('Modal closed'),
    actions: [
      {
        label: 'Delete',
        onPress: () => alert('Delete clicked'),
        variant: 'danger',
        icon: 'trash',
      },
      {
        label: 'Duplicate',
        onPress: () => alert('Duplicate clicked'),
        variant: 'outline',
        icon: 'copy',
      },
      {
        label: 'Edit',
        onPress: () => alert('Edit clicked'),
        variant: 'primary',
        icon: 'create',
      },
    ],
    children: (
      <Typography variant="body1">
        Choose an action for this assignment.
      </Typography>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with multiple action buttons.',
      },
    },
  },
};

// Loading states
export const LoadingActions: Story = {
  args: {
    visible: true,
    title: 'Saving Changes',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Saving...',
      onPress: () => alert('Save clicked'),
      loading: true,
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancel clicked'),
      disabled: true,
    },
    children: (
      <Typography variant="body1">
        Please wait while we save your changes.
      </Typography>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with loading and disabled action states.',
      },
    },
  },
};

// Scrollable content
export const ScrollableContent: Story = {
  args: {
    visible: true,
    title: 'Terms and Conditions',
    subtitle: 'Please read carefully',
    scrollable: true,
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Accept',
      onPress: () => alert('Accepted'),
    },
    secondaryAction: {
      label: 'Decline',
      onPress: () => alert('Declined'),
    },
    children: <LongContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with scrollable content area.',
      },
    },
  },
};

// Non-scrollable content
export const NonScrollableContent: Story = {
  args: {
    visible: true,
    title: 'Quick Action',
    scrollable: false,
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Execute',
      onPress: () => alert('Executed'),
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Typography variant="h3" align="center">
          Fixed Layout
        </Typography>
        <Typography variant="body1" color="secondary" align="center" style={{ marginTop: 8 }}>
          This content doesn't scroll
        </Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal with non-scrollable, fixed layout content.',
      },
    },
  },
};

// Form modal examples
export const StudentFormModal: Story = {
  args: {
    visible: true,
    title: 'Submit Assignment',
    subtitle: 'Mathematics Chapter 5 Exercises',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Submit',
      onPress: () => alert('Assignment submitted'),
      icon: 'checkmark',
    },
    secondaryAction: {
      label: 'Save Draft',
      onPress: () => alert('Draft saved'),
      icon: 'save',
    },
    children: (
      <View style={{ gap: 16 }}>
        <Input
          label="Assignment Title"
          value="Quadratic Equations Practice"
          onChangeText={() => {}}
          placeholder="Enter assignment title"
        />
        <Input
          label="Your Answer"
          value=""
          onChangeText={() => {}}
          placeholder="Enter your solution"
          multiline
        />
        <Typography variant="body2" color="secondary">
          Due: Tomorrow at 11:59 PM
        </Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Student assignment submission modal.',
      },
    },
  },
};

export const TeacherGradingModal: Story = {
  args: {
    visible: true,
    title: 'Grade Assignment',
    subtitle: 'Ahmed Al-Rashid - Mathematics Exercise 5',
    size: 'large',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Save Grade',
      onPress: () => alert('Grade saved'),
      icon: 'checkmark',
    },
    secondaryAction: {
      label: 'Return for Revision',
      onPress: () => alert('Returned for revision'),
      variant: 'outline',
    },
    children: (
      <View style={{ gap: 16 }}>
        <Card variant="default" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Student Answer
          </Typography>
          <Typography variant="body2" color="secondary">
            The quadratic formula is x = (-b ± √(b²-4ac)) / 2a...
          </Typography>
        </Card>
        
        <Input
          label="Grade (out of 100)"
          value="92"
          onChangeText={() => {}}
          placeholder="Enter grade"
        />
        
        <Input
          label="Feedback"
          value=""
          onChangeText={() => {}}
          placeholder="Enter feedback for student"
          multiline
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Teacher grading modal with student work review.',
      },
    },
  },
};

export const ParentMeetingModal: Story = {
  args: {
    visible: true,
    title: 'Schedule Parent Meeting',
    subtitle: 'Meet with Ahmed\'s Mathematics Teacher',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Schedule Meeting',
      onPress: () => alert('Meeting scheduled'),
      icon: 'calendar',
    },
    secondaryAction: {
      label: 'Cancel',
      onPress: () => alert('Cancelled'),
    },
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="body1">
          Request a meeting with Ms. Sarah Johnson to discuss Ahmed's progress in Mathematics.
        </Typography>
        
        <Input
          label="Preferred Date"
          value=""
          onChangeText={() => {}}
          placeholder="Select preferred date"
        />
        
        <Input
          label="Preferred Time"
          value=""
          onChangeText={() => {}}
          placeholder="Select preferred time"
        />
        
        <Input
          label="Meeting Topic"
          value=""
          onChangeText={() => {}}
          placeholder="What would you like to discuss?"
          multiline
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Parent meeting scheduling modal.',
      },
    },
  },
};

export const ManagementReportModal: Story = {
  args: {
    visible: true,
    title: 'Incident Report',
    subtitle: 'Grade 10 Classroom - Urgent Review Required',
    size: 'large',
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Resolve Incident',
      onPress: () => alert('Incident resolved'),
      variant: 'primary',
    },
    actions: [
      {
        label: 'Escalate',
        onPress: () => alert('Escalated'),
        variant: 'danger',
        icon: 'warning',
      },
      {
        label: 'Assign Investigator',
        onPress: () => alert('Investigator assigned'),
        variant: 'outline',
        icon: 'person-add',
      },
    ],
    children: (
      <View style={{ gap: 16 }}>
        <Card variant="elevated" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Incident Details
          </Typography>
          <Typography variant="body2" color="secondary">
            Reported by: Ms. Sarah Johnson
          </Typography>
          <Typography variant="body2" color="secondary">
            Time: Today at 2:30 PM
          </Typography>
          <Typography variant="body2" color="secondary">
            Location: Grade 10A Classroom
          </Typography>
        </Card>
        
        <Typography variant="body1">
          Disruption during mathematics class. Student refused to follow instructions and was disrespectful to teacher.
        </Typography>
        
        <Input
          label="Resolution Notes"
          value=""
          onChangeText={() => {}}
          placeholder="Enter resolution details"
          multiline
        />
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Management incident report modal with multiple actions.',
      },
    },
  },
};

// No content padding
export const NoContentPadding: Story = {
  args: {
    visible: true,
    title: 'Image Gallery',
    contentPadding: false,
    onClose: () => alert('Modal closed'),
    primaryAction: {
      label: 'Close',
      onPress: () => alert('Closed'),
    },
    children: (
      <View style={{ backgroundColor: '#f0f0f0', flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Typography variant="h4">Full Width Content</Typography>
        <Typography variant="body2" color="secondary" style={{ marginTop: 8 }}>
          This content extends to the edges
        </Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Modal without content padding for full-width layouts.',
      },
    },
  },
};
</file>

<file path="src/components/templates/ModalTemplate/ModalTemplate.test.tsx">
/**
 * ModalTemplate Component Tests
 * Unit tests for the ModalTemplate component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Text, View } from 'react-native';
import { ModalTemplate } from './ModalTemplate';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

// Sample content component
const SampleContent: React.FC = () => (
  <View>
    <Text>Sample modal content</Text>
  </View>
);

describe('ModalTemplate Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with basic props', () => {
      const { getByText } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Modal')).toBeTruthy();
      expect(getByText('Sample modal content')).toBeTruthy();
    });

    it('renders with subtitle', () => {
      const { getByText } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            subtitle="Test Subtitle"
            onClose={() => {}}
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Modal')).toBeTruthy();
      expect(getByText('Test Subtitle')).toBeTruthy();
    });

    it('renders with testID', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="test-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('test-modal')).toBeTruthy();
    });
  });

  // Close button tests
  describe('Close Button', () => {
    it('shows close button by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="modal-with-close"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('modal-with-close-close-button')).toBeTruthy();
    });

    it('hides close button when showCloseButton is false', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            showCloseButton={false}
            testID="modal-no-close"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('modal-no-close-close-button')).toBeNull();
    });

    it('handles close button press', () => {
      const mockOnClose = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={mockOnClose}
            testID="closable-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const closeButton = getByTestId('closable-modal-close-button');
      fireEvent.press(closeButton);
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
  });

  // Actions tests
  describe('Actions', () => {
    it('renders primary action', () => {
      const mockPrimaryAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Save',
              onPress: mockPrimaryAction,
            }}
            testID="modal-with-primary"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const primaryButton = getByTestId('modal-with-primary-action-0');
      expect(primaryButton).toBeTruthy();
    });

    it('renders secondary action', () => {
      const mockSecondaryAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            secondaryAction={{
              label: 'Cancel',
              onPress: mockSecondaryAction,
            }}
            testID="modal-with-secondary"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const secondaryButton = getByTestId('modal-with-secondary-action-0');
      expect(secondaryButton).toBeTruthy();
    });

    it('renders both primary and secondary actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Save',
              onPress: () => {},
            }}
            secondaryAction={{
              label: 'Cancel',
              onPress: () => {},
            }}
            testID="modal-with-both"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('modal-with-both-action-0')).toBeTruthy(); // Secondary
      expect(getByTestId('modal-with-both-action-1')).toBeTruthy(); // Primary
    });

    it('renders multiple actions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            actions={[
              { label: 'Action 1', onPress: () => {} },
              { label: 'Action 2', onPress: () => {} },
              { label: 'Action 3', onPress: () => {} },
            ]}
            testID="modal-with-multiple"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('modal-with-multiple-action-0')).toBeTruthy();
      expect(getByTestId('modal-with-multiple-action-1')).toBeTruthy();
      expect(getByTestId('modal-with-multiple-action-2')).toBeTruthy();
    });

    it('handles action button press', () => {
      const mockAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Test Action',
              onPress: mockAction,
            }}
            testID="action-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const actionButton = getByTestId('action-modal-action-0');
      fireEvent.press(actionButton);
      expect(mockAction).toHaveBeenCalledTimes(1);
    });

    it('does not render actions when none provided', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="no-actions-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('no-actions-modal-action-0')).toBeNull();
    });
  });

  // Size tests
  describe('Modal Sizes', () => {
    it('renders with default size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="default-size-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('default-size-modal')).toBeTruthy();
    });

    it('renders with small size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            size="small"
            testID="small-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('small-modal')).toBeTruthy();
    });

    it('renders with large size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            size="large"
            testID="large-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('large-modal')).toBeTruthy();
    });

    it('renders with fullscreen size', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            size="fullscreen"
            testID="fullscreen-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('fullscreen-modal')).toBeTruthy();
    });
  });

  // Content tests
  describe('Content', () => {
    it('renders children content', () => {
      const { getByText } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
          >
            <Text>Custom content here</Text>
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByText('Custom content here')).toBeTruthy();
    });

    it('renders scrollable content by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="scrollable-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('scrollable-modal-scroll')).toBeTruthy();
    });

    it('renders non-scrollable content when specified', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            scrollable={false}
            testID="non-scrollable-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('non-scrollable-modal-scroll')).toBeNull();
    });
  });

  // Layout options tests
  describe('Layout Options', () => {
    it('applies content padding by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="padded-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('padded-modal')).toBeTruthy();
    });

    it('removes content padding when disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            contentPadding={false}
            testID="no-padding-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('no-padding-modal')).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2 };
      const customHeaderStyle = { backgroundColor: 'red' };
      const customContentStyle = { padding: 20 };
      const customActionsStyle = { backgroundColor: 'blue' };

      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            style={customStyle}
            headerStyle={customHeaderStyle}
            contentStyle={customContentStyle}
            actionsStyle={customActionsStyle}
            primaryAction={{ label: 'Test', onPress: () => {} }}
            testID="styled-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('styled-modal')).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has default accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="accessible-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const modal = getByTestId('accessible-modal');
      expect(modal).toBeTruthy();
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            accessibilityLabel="Custom modal label"
            testID="custom-accessible-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const modal = getByTestId('custom-accessible-modal');
      expect(modal).toBeTruthy();
    });

    it('provides proper accessibility for close button', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            testID="close-accessible-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      const closeButton = getByTestId('close-accessible-modal-close-button');
      expect(closeButton).toBeTruthy();
    });
  });

  // Action states tests
  describe('Action States', () => {
    it('renders loading action', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Loading...',
              onPress: () => {},
              loading: true,
            }}
            testID="loading-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('loading-modal-action-0')).toBeTruthy();
    });

    it('renders disabled action', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Disabled',
              onPress: () => {},
              disabled: true,
            }}
            testID="disabled-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('disabled-modal-action-0')).toBeTruthy();
    });

    it('renders action with icon', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            primaryAction={{
              label: 'Save',
              onPress: () => {},
              icon: 'save',
            }}
            testID="icon-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('icon-modal-action-0')).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles complex content', () => {
      const ComplexContent = () => (
        <View>
          <Text>Title</Text>
          <View>
            <Text>Nested content</Text>
            <Text>More nested content</Text>
          </View>
        </View>
      );

      const { getByText } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
          >
            <ComplexContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByText('Title')).toBeTruthy();
      expect(getByText('Nested content')).toBeTruthy();
      expect(getByText('More nested content')).toBeTruthy();
    });

    it('handles empty actions array', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Test Modal"
            onClose={() => {}}
            actions={[]}
            testID="empty-actions-modal"
          >
            <SampleContent />
          </ModalTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('empty-actions-modal-action-0')).toBeNull();
    });
  });

  // Integration tests
  describe('Integration', () => {
    it('works with all features enabled', () => {
      const mockOnClose = jest.fn();
      const mockPrimaryAction = jest.fn();
      const mockSecondaryAction = jest.fn();

      const { getByTestId, getByText } = render(
        <TestWrapper>
          <ModalTemplate
            visible={true}
            title="Full Modal"
            subtitle="Complete example"
            onClose={mockOnClose}
            primaryAction={{
              label: 'Save',
              onPress: mockPrimaryAction,
              icon: 'save',
            }}
            secondaryAction={{
              label: 'Cancel',
              onPress: mockSecondaryAction,
            }}
            size="large"
            scrollable={true}
            showCloseButton={true}
            contentPadding={true}
            testID="full-modal"
          >
            <Text>Full featured content</Text>
          </ModalTemplate>
        </TestWrapper>
      );

      expect(getByTestId('full-modal')).toBeTruthy();
      expect(getByTestId('full-modal-close-button')).toBeTruthy();
      expect(getByTestId('full-modal-scroll')).toBeTruthy();
      expect(getByTestId('full-modal-action-0')).toBeTruthy(); // Secondary
      expect(getByTestId('full-modal-action-1')).toBeTruthy(); // Primary
      expect(getByText('Full Modal')).toBeTruthy();
      expect(getByText('Complete example')).toBeTruthy();
      expect(getByText('Full featured content')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/templates/ParentIncidentReportTemplate.tsx">
import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';
import { useRouter } from 'expo-router';

// Mock component for date picker
const DatePicker = ({ value, onChange }: any) => (
  <TouchableOpacity 
    style={styles.datePickerButton}
    onPress={() => onChange(new Date())}
  >
    <Text style={styles.dateText}>{value.toLocaleDateString('id-ID')}</Text>
    <MaterialIcons name="event" size={24} color="#005e7a" />
  </TouchableOpacity>
);

interface IncidentType {
  id: string;
  label: string;
  icon: string;
}

export default function ParentIncidentReport() {
  const router = useRouter();
  const [incidentDate, setIncidentDate] = useState(new Date());
  const [incidentType, setIncidentType] = useState('');
  const [location, setLocation] = useState('');
  const [description, setDescription] = useState('');
  const [studentsInvolved, setStudentsInvolved] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const incidentTypes: IncidentType[] = [
    { id: 'bullying', label: 'Perundungan', icon: 'user-injured' },
    { id: 'safety', label: 'Masalah Keamanan', icon: 'exclamation-triangle' },
    { id: 'property', label: 'Kerusakan Properti', icon: 'hammer' },
    { id: 'other', label: 'Lainnya', icon: 'question-circle' },
  ];

  const handleSubmit = () => {
    if (!incidentType || !location || !description) {
      Alert.alert(
        'Informasi Tidak Lengkap',
        'Mohon isi semua kolom yang wajib diisi sebelum mengirim.',
        [{ text: 'OK' }]
      );
      return;
    }

    // In a real app, this would send the report to the backend
    setSubmitted(true);
    
    // Reset form after 3 seconds and navigate back
    setTimeout(() => {
      router.back();
    }, 3000);
  };

  const renderIncidentTypeOption = (type: IncidentType) => (
    <TouchableOpacity
      key={type.id}
      style={[
        styles.incidentTypeOption,
        incidentType === type.id && styles.selectedIncidentType
      ]}
      onPress={() => setIncidentType(type.id)}
    >
      <FontAwesome5 
        name={type.icon as any} 
        size={24} 
        color={incidentType === type.id ? '#ffffff' : '#005e7a'} 
      />
      <Text style={[
        styles.incidentTypeText,
        incidentType === type.id && styles.selectedIncidentTypeText
      ]}>
        {type.label}
      </Text>
    </TouchableOpacity>
  );

  if (submitted) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.successContainer}>
          <Ionicons name="checkmark-circle" size={80} color="#4CAF50" />
          <Text style={styles.successTitle}>Laporan Berhasil Dikirim!</Text>
          <Text style={styles.successMessage}>
            Terima kasih telah melaporkan insiden ini. Tim sekolah akan menindaklanjuti laporan Anda 
            dan menghubungi Anda jika diperlukan informasi tambahan.
          </Text>
          <Text style={styles.successNote}>
            Kembali ke dashboard dalam beberapa detik...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Laporan Insiden</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Info Section */}
        <View style={styles.infoSection}>
          <View style={styles.infoHeader}>
            <Ionicons name="shield-checkmark" size={24} color="#FF9800" />
            <Text style={styles.infoTitle}>Keamanan & Privasi</Text>
          </View>
          <Text style={styles.infoText}>
            Semua laporan akan ditangani dengan kerahasiaan penuh. Identitas pelapor akan dilindungi 
            dan informasi hanya akan dibagikan kepada pihak yang berwenang untuk menangani kasus ini.
          </Text>
        </View>

        {/* Form Section */}
        <View style={styles.formSection}>
          <Text style={styles.sectionTitle}>Detail Insiden</Text>
          
          {/* Date */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Tanggal Kejadian *</Text>
            <DatePicker 
              value={incidentDate} 
              onChange={setIncidentDate}
            />
          </View>

          {/* Incident Type */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Jenis Insiden *</Text>
            <View style={styles.incidentTypesContainer}>
              {incidentTypes.map(renderIncidentTypeOption)}
            </View>
          </View>

          {/* Location */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Lokasi Kejadian *</Text>
            <TextInput
              style={styles.textInput}
              value={location}
              onChangeText={setLocation}
              placeholder="Contoh: Kelas 5A, Kantin, Taman Bermain"
              placeholderTextColor="#999999"
            />
          </View>

          {/* Students Involved */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Siswa yang Terlibat</Text>
            <TextInput
              style={styles.textInput}
              value={studentsInvolved}
              onChangeText={setStudentsInvolved}
              placeholder="Nama siswa yang terlibat (opsional)"
              placeholderTextColor="#999999"
            />
          </View>

          {/* Description */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Deskripsi Kejadian *</Text>
            <TextInput
              style={styles.textArea}
              value={description}
              onChangeText={setDescription}
              placeholder="Jelaskan secara detail apa yang terjadi, kapan, dan siapa saja yang terlibat..."
              placeholderTextColor="#999999"
              multiline
              numberOfLines={6}
              textAlignVertical="top"
            />
          </View>

          {/* Guidelines */}
          <View style={styles.guidelinesSection}>
            <Text style={styles.guidelinesTitle}>Tips Melaporkan:</Text>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Berikan informasi sejelas mungkin</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Sertakan waktu dan lokasi yang tepat</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Hindari tuduhan tanpa bukti</Text>
            </View>
          </View>
        </View>

        {/* Submit Button */}
        <TouchableOpacity 
          style={[
            styles.submitButton,
            (!incidentType || !location || !description) && styles.submitButtonDisabled
          ]}
          onPress={handleSubmit}
          disabled={!incidentType || !location || !description}
        >
          <Text style={styles.submitButtonText}>Kirim Laporan</Text>
        </TouchableOpacity>

        {/* Bottom Spacing */}
        <View style={{ height: 50 }} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  infoSection: {
    backgroundColor: '#fff3e0',
    borderRadius: 8,
    padding: 16,
    marginTop: 20,
    marginBottom: 20,
  },
  infoHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FF9800',
    marginLeft: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#E65100',
    lineHeight: 20,
  },
  formSection: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  datePickerButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    backgroundColor: '#ffffff',
  },
  dateText: {
    fontSize: 16,
    color: '#333333',
  },
  incidentTypesContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  incidentTypeOption: {
    width: '48%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#005e7a',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    backgroundColor: '#ffffff',
  },
  selectedIncidentType: {
    backgroundColor: '#005e7a',
  },
  incidentTypeText: {
    fontSize: 14,
    color: '#005e7a',
    marginLeft: 8,
    textAlign: 'center',
  },
  selectedIncidentTypeText: {
    color: '#ffffff',
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#ffffff',
  },
  textArea: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    minHeight: 120,
    textAlignVertical: 'top',
    backgroundColor: '#ffffff',
  },
  guidelinesSection: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  guidelinesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  guidelineItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  guidelineText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 8,
    flex: 1,
  },
  submitButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginTop: 20,
    marginHorizontal: 20,
  },
  submitButtonDisabled: {
    backgroundColor: '#cccccc',
  },
  submitButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  successContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  successMessage: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 16,
  },
  successNote: {
    fontSize: 14,
    color: '#999999',
    textAlign: 'center',
    fontStyle: 'italic',
  },
});
</file>

<file path="src/components/templates/StudentAntiBullyingTemplate.tsx">
import React from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image, Linking } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';
import { useRouter } from 'expo-router';

export default function StudentAntiBullying() {
  const router = useRouter();

  const openLink = (url: string) => {
    Linking.openURL(url).catch(err => console.error("Couldn't load page", err));
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="light" />
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#ffffff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Edukasi Anti-Perundungan</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView style={styles.contentContainer}>
        <View style={styles.bannerContainer}>
          <Image 
            source={{ uri: 'https://placehold.co/600x200/005e7a/ffffff?text=Stop+Bullying' }} 
            style={styles.bannerImage}
            resizeMode="cover"
          />
          <View style={styles.bannerOverlay}>
            <Text style={styles.bannerTitle}>Bersama Hentikan Perundungan</Text>
            <Text style={styles.bannerSubtitle}>Mari ciptakan lingkungan sekolah yang aman dan nyaman untuk semua</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Apa itu Perundungan?</Text>
          <Text style={styles.paragraph}>
            Perundungan (bullying) adalah perilaku agresif yang disengaja dan berulang yang melibatkan ketidakseimbangan kekuatan. 
            Perundungan dapat berupa fisik, verbal, sosial, atau melalui media digital (cyberbullying).
          </Text>
          
          <View style={styles.bulletPointContainer}>
            <View style={styles.bulletPoint}>
              <FontAwesome5 name="fist-raised" size={20} color="#e74c3c" style={styles.bulletIcon} />
              <View style={styles.bulletTextContainer}>
                <Text style={styles.bulletTitle}>Perundungan Fisik</Text>
                <Text style={styles.bulletText}>Memukul, menendang, mendorong, atau menyakiti secara fisik</Text>
              </View>
            </View>
            
            <View style={styles.bulletPoint}>
              <FontAwesome5 name="comment-slash" size={20} color="#f39c12" style={styles.bulletIcon} />
              <View style={styles.bulletTextContainer}>
                <Text style={styles.bulletTitle}>Perundungan Verbal</Text>
                <Text style={styles.bulletText}>Mengejek, menghina, mengancam, atau memanggil dengan nama yang menyakitkan</Text>
              </View>
            </View>
            
            <View style={styles.bulletPoint}>
              <FontAwesome5 name="users-slash" size={20} color="#9b59b6" style={styles.bulletIcon} />
              <View style={styles.bulletTextContainer}>
                <Text style={styles.bulletTitle}>Perundungan Sosial</Text>
                <Text style={styles.bulletText}>Mengucilkan, menyebarkan rumor, atau merusak reputasi seseorang</Text>
              </View>
            </View>
            
            <View style={styles.bulletPoint}>
              <FontAwesome5 name="mobile-alt" size={20} color="#3498db" style={styles.bulletIcon} />
              <View style={styles.bulletTextContainer}>
                <Text style={styles.bulletTitle}>Cyberbullying</Text>
                <Text style={styles.bulletText}>Perundungan melalui media sosial, pesan, atau platform digital lainnya</Text>
              </View>
            </View>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Tanda-tanda Perundungan</Text>
          <Text style={styles.paragraph}>
            Penting untuk mengenali tanda-tanda bahwa seseorang sedang mengalami perundungan:
          </Text>
          
          <View style={styles.warningSignsContainer}>
            <View style={styles.warningSign}>
              <Ionicons name="sad" size={24} color="#e74c3c" />
              <Text style={styles.warningSignText}>Perubahan perilaku atau suasana hati</Text>
            </View>
            <View style={styles.warningSign}>
              <Ionicons name="school" size={24} color="#e74c3c" />
              <Text style={styles.warningSignText}>Tidak mau pergi ke sekolah</Text>
            </View>
            <View style={styles.warningSign}>
              <Ionicons name="people" size={24} color="#e74c3c" />
              <Text style={styles.warningSignText}>Kehilangan teman atau menarik diri</Text>
            </View>
            <View style={styles.warningSign}>
              <Ionicons name="medical" size={24} color="#e74c3c" />
              <Text style={styles.warningSignText}>Luka atau cedera yang tidak dapat dijelaskan</Text>
            </View>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Apa yang Harus Dilakukan?</Text>
          
          <View style={styles.actionCard}>
            <View style={styles.actionHeader}>
              <FontAwesome5 name="shield-alt" size={24} color="#27ae60" />
              <Text style={styles.actionTitle}>Jika Kamu Mengalami Perundungan</Text>
            </View>
            <View style={styles.actionSteps}>
              <Text style={styles.actionStep}>1. Jangan diam, ceritakan kepada orang dewasa yang dipercaya</Text>
              <Text style={styles.actionStep}>2. Catat kejadian yang terjadi (waktu, tempat, pelaku)</Text>
              <Text style={styles.actionStep}>3. Jangan membalas dengan kekerasan</Text>
              <Text style={styles.actionStep}>4. Cari dukungan dari teman dan keluarga</Text>
            </View>
          </View>

          <View style={styles.actionCard}>
            <View style={styles.actionHeader}>
              <FontAwesome5 name="eye" size={24} color="#3498db" />
              <Text style={styles.actionTitle}>Jika Kamu Melihat Perundungan</Text>
            </View>
            <View style={styles.actionSteps}>
              <Text style={styles.actionStep}>1. Jangan hanya menjadi penonton</Text>
              <Text style={styles.actionStep}>2. Bantu korban dengan aman</Text>
              <Text style={styles.actionStep}>3. Laporkan kepada guru atau orang dewasa</Text>
              <Text style={styles.actionStep}>4. Dukung korban dan jangan ikut menyebarkan rumor</Text>
            </View>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Kontak Darurat</Text>
          <View style={styles.emergencyContactsContainer}>
            <TouchableOpacity style={styles.emergencyContact} onPress={() => openLink('tel:+62-800-123-4567')}>
              <Ionicons name="call" size={24} color="#27ae60" />
              <View style={styles.contactInfo}>
                <Text style={styles.contactTitle}>Hotline Sekolah</Text>
                <Text style={styles.contactNumber}>0800-123-4567</Text>
              </View>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.emergencyContact} onPress={() => openLink('mailto:help@school.edu')}>
              <Ionicons name="mail" size={24} color="#3498db" />
              <View style={styles.contactInfo}>
                <Text style={styles.contactTitle}>Email Konseling</Text>
                <Text style={styles.contactNumber}>help@school.edu</Text>
              </View>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Sumber Daya Tambahan</Text>
          <View style={styles.resourcesContainer}>
            <TouchableOpacity style={styles.resourceItem} onPress={() => openLink('https://example.com/anti-bullying-guide')}>
              <FontAwesome5 name="book" size={20} color="#9b59b6" />
              <Text style={styles.resourceText}>Panduan Lengkap Anti-Perundungan</Text>
              <Ionicons name="chevron-forward" size={20} color="#666666" />
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.resourceItem} onPress={() => openLink('https://example.com/support-groups')}>
              <FontAwesome5 name="users" size={20} color="#e67e22" />
              <Text style={styles.resourceText}>Grup Dukungan Online</Text>
              <Ionicons name="chevron-forward" size={20} color="#666666" />
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.resourceItem} onPress={() => openLink('https://example.com/report-bullying')}>
              <FontAwesome5 name="flag" size={20} color="#e74c3c" />
              <Text style={styles.resourceText}>Laporkan Perundungan</Text>
              <Ionicons name="chevron-forward" size={20} color="#666666" />
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.motivationalSection}>
          <FontAwesome5 name="heart" size={40} color="#e74c3c" />
          <Text style={styles.motivationalTitle}>Ingat!</Text>
          <Text style={styles.motivationalText}>
            Kamu tidak sendirian. Setiap orang berhak merasa aman dan dihormati. 
            Jangan ragu untuk mencari bantuan ketika membutuhkannya.
          </Text>
        </View>

        {/* Bottom Spacing */}
        <View style={{ height: 50 }} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#005e7a',
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  backButton: {
    padding: 4,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  contentContainer: {
    flex: 1,
    padding: 16,
  },
  bannerContainer: {
    position: 'relative',
    height: 180,
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 20,
  },
  bannerImage: {
    width: '100%',
    height: '100%',
  },
  bannerOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 94, 122, 0.7)',
    padding: 16,
  },
  bannerTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 4,
  },
  bannerSubtitle: {
    fontSize: 14,
    color: '#ffffff',
  },
  section: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 12,
  },
  paragraph: {
    fontSize: 14,
    color: '#333333',
    lineHeight: 22,
    marginBottom: 16,
  },
  bulletPointContainer: {
    marginTop: 8,
  },
  bulletPoint: {
    flexDirection: 'row',
    marginBottom: 16,
    alignItems: 'flex-start',
  },
  bulletIcon: {
    marginTop: 2,
    marginRight: 12,
  },
  bulletTextContainer: {
    flex: 1,
  },
  bulletTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  bulletText: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
  warningSignsContainer: {
    marginTop: 8,
  },
  warningSign: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff5f5',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
  },
  warningSignText: {
    fontSize: 14,
    color: '#333333',
    marginLeft: 12,
    flex: 1,
  },
  actionCard: {
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
  },
  actionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  actionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginLeft: 12,
  },
  actionSteps: {
    marginLeft: 36,
  },
  actionStep: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
    marginBottom: 8,
  },
  emergencyContactsContainer: {
    marginTop: 8,
  },
  emergencyContact: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
  },
  contactInfo: {
    marginLeft: 16,
    flex: 1,
  },
  contactTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  contactNumber: {
    fontSize: 14,
    color: '#666666',
  },
  resourcesContainer: {
    marginTop: 8,
  },
  resourceItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 16,
    marginBottom: 8,
  },
  resourceText: {
    fontSize: 14,
    color: '#333333',
    marginLeft: 12,
    flex: 1,
  },
  motivationalSection: {
    backgroundColor: '#fff5f5',
    borderRadius: 12,
    padding: 24,
    alignItems: 'center',
    marginBottom: 20,
  },
  motivationalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#e74c3c',
    marginTop: 12,
    marginBottom: 8,
  },
  motivationalText: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
    lineHeight: 24,
  },
});
</file>

<file path="src/context/ThemeContext.tsx">
/**
 * Theme Context Provider
 * Provides theme tokens and utilities to all components in the app
 */

import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';
import { theme, Theme, roleThemes, ComponentThemeKey } from '../styles/theme';
import { UserRole } from '../styles/colors';

// Theme Context Interface
interface ThemeContextType {
  theme: Theme;
  currentRole: UserRole | null;
  setRole: (role: UserRole | null) => void;
  isDarkMode: boolean;
  toggleDarkMode: () => void;
}

// Create Theme Context
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

// Theme Provider Props
interface ThemeProviderProps {
  children: ReactNode;
  initialRole?: UserRole | null;
  initialDarkMode?: boolean;
}

// Theme Provider Component
export const ThemeProvider: React.FC<ThemeProviderProps> = ({
  children,
  initialRole = null,
  initialDarkMode = false,
}) => {
  const [currentRole, setCurrentRole] = useState<UserRole | null>(initialRole);
  const [isDarkMode, setIsDarkMode] = useState(initialDarkMode);

  // Get theme based on current role
  const getCurrentTheme = useCallback((): Theme => {
    if (currentRole && currentRole in roleThemes) {
      return roleThemes[currentRole];
    }
    return theme;
  }, [currentRole]);

  // Set role and update theme
  const setRole = useCallback((role: UserRole | null) => {
    setCurrentRole(role);
  }, []);

  // Toggle dark mode (for future implementation)
  const toggleDarkMode = useCallback(() => {
    setIsDarkMode(prev => !prev);
  }, []);

  const contextValue: ThemeContextType = {
    theme: getCurrentTheme(),
    currentRole,
    setRole,
    isDarkMode,
    toggleDarkMode,
  };

  return (
    <ThemeContext.Provider value={contextValue}>
      {children}
    </ThemeContext.Provider>
  );
};

// Custom hook to use theme context
export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

// Custom hooks for specific theme tokens
export const useColors = () => {
  const { theme } = useTheme();
  return theme.colors;
};

export const useTypography = () => {
  const { theme } = useTheme();
  return theme.typography;
};

export const useSpacing = () => {
  const { theme } = useTheme();
  return theme.spacing;
};

export const useShadows = () => {
  const { theme } = useTheme();
  return theme.shadows;
};

export const useBorderRadius = () => {
  const { theme } = useTheme();
  return theme.borderRadius;
};

// Utility hooks for common styling patterns
export const useComponentTheme = (component: ComponentThemeKey) => {
  const { theme } = useTheme();
  return theme.componentThemes[component];
};

// Hook for responsive values (for future implementation)
export const useResponsiveValue = <T,>(values: {
  xs?: T;
  sm?: T;
  md?: T;
  lg?: T;
  xl?: T;
}): T | undefined => {
  // For now, return the base value (xs)
  // In the future, this could use screen dimensions to return appropriate value
  return values.xs || values.sm || values.md || values.lg || values.xl;
};

// Hook for creating consistent styles
export const useStyleHelpers = () => {
  const { theme } = useTheme();
  
  return {
    // Spacing helpers
    margin: (size: keyof typeof theme.spacing.base) => ({ margin: theme.spacing.base[size] }),
    marginHorizontal: (size: keyof typeof theme.spacing.base) => ({ marginHorizontal: theme.spacing.base[size] }),
    marginVertical: (size: keyof typeof theme.spacing.base) => ({ marginVertical: theme.spacing.base[size] }),
    padding: (size: keyof typeof theme.spacing.base) => ({ padding: theme.spacing.base[size] }),
    paddingHorizontal: (size: keyof typeof theme.spacing.base) => ({ paddingHorizontal: theme.spacing.base[size] }),
    paddingVertical: (size: keyof typeof theme.spacing.base) => ({ paddingVertical: theme.spacing.base[size] }),
    
    // Typography helpers
    text: (variant: keyof typeof theme.typography.variants) => theme.typography.variants[variant],
    
    // Shadow helpers
    shadow: (size: keyof typeof theme.shadows) => theme.shadows[size],
    
    // Border radius helpers
    borderRadius: (size: keyof typeof theme.borderRadius) => ({ borderRadius: theme.borderRadius[size] }),
  };
};
</file>

<file path="src/mocks/classData.ts">
// Mock data for class information and students
// This file contains sample data used for development and testing purposes

export interface Student {
  id: number;
  name: string;
  full_name: string;
  role: 'student';
  school_id: number;
  created_at: string;
  updated_at: string;
  memorizedVerses: number;
  totalVerses: number;
  lastActivity: string;
  progress: number;
}

export interface ClassScheduleItem {
  id?: number;
  day: string;
  time: string;
  activity: string;
  note?: string;
}

export interface Activity {
  type: 'attendance' | 'memorization' | 'report';
  description: string;
  date: string;
}

export interface Report {
  id: number;
  title: string;
  date: string;
  type: 'academic' | 'behavior' | 'attendance';
  content?: string;
  description?: string;
  status: 'draft' | 'published';
}

export interface ClassData {
  id: number;
  name: string;
  level: string;
  description?: string;
  studentCount: number;
  progress?: number;
  students?: Student[];
  schedule?: ClassScheduleItem[];
  recentActivities?: Activity[];
  reports?: Report[];
}

export const mockClassData: ClassData[] = [
  {
    id: 1,
    name: 'Tahfidz Al-Baqarah',
    level: 'Menengah',
    description: 'Kelas fokus pada hafalan Surah Al-Baqarah dengan penekanan pada tajwid dan makna.',
    studentCount: 25,
    progress: 75,
    students: [
      { 
        id: 1, 
        name: 'Ahmad Fauzi',
        full_name: 'Ahmad Fauzi',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-15T00:00:00Z',
        memorizedVerses: 150, 
        totalVerses: 200, 
        lastActivity: '2024-01-15',
        progress: 75 
      },
      { 
        id: 2, 
        name: 'Fatimah Zahra',
        full_name: 'Fatimah Zahra',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-14T00:00:00Z',
        memorizedVerses: 180, 
        totalVerses: 200, 
        lastActivity: '2024-01-14',
        progress: 90 
      },
      { 
        id: 3, 
        name: 'Muhammad Ali',
        full_name: 'Muhammad Ali',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-13T00:00:00Z',
        memorizedVerses: 120, 
        totalVerses: 200, 
        lastActivity: '2024-01-13',
        progress: 60 
      },
      { 
        id: 4, 
        name: 'Siti Aisyah',
        full_name: 'Siti Aisyah',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-15T00:00:00Z',
        memorizedVerses: 160, 
        totalVerses: 200, 
        lastActivity: '2024-01-15',
        progress: 80 
      },
      { 
        id: 5, 
        name: 'Omar bin Khattab',
        full_name: 'Omar bin Khattab',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-12T00:00:00Z',
        memorizedVerses: 140, 
        totalVerses: 200, 
        lastActivity: '2024-01-12',
        progress: 70 
      },
    ],
    schedule: [
      { day: 'Senin', time: '08:00-09:30', activity: 'Hafalan Baru', note: 'Ayat 1-10' },
      { day: 'Rabu', time: '08:00-09:30', activity: 'Muraja\'ah', note: 'Review hafalan minggu lalu' },
      { day: 'Jumat', time: '08:00-09:30', activity: 'Evaluasi', note: 'Tes hafalan bulanan' },
    ],
    recentActivities: [
      { type: 'attendance', description: 'Kehadiran siswa 95%', date: '2024-01-15' },
      { type: 'memorization', description: 'Ahmad Fauzi menyelesaikan ayat 150-160', date: '2024-01-14' },
      { type: 'report', description: 'Laporan bulanan telah dibuat', date: '2024-01-13' },
    ],
    reports: [
      {
         id: 1,
         title: 'Laporan Bulanan Januari 2024',
         date: '2024-01-31',
         type: 'academic',
         description: 'Progress hafalan siswa sangat baik dengan rata-rata 75%',
         status: 'published'
       },
       {
         id: 2,
         title: 'Evaluasi Tengah Semester',
         date: '2024-01-15',
         type: 'behavior',
         description: 'Evaluasi kemampuan hafalan dan tajwid siswa',
         status: 'published'
       },
       {
         id: 3,
         title: 'Laporan Mingguan 3',
         date: '2024-01-21',
         type: 'attendance',
         description: 'Kehadiran 95%, progress hafalan baik',
         status: 'draft'
       },
    ],
  },
  {
    id: 2,
    name: 'Tahfidz Al-Imran',
    level: 'Lanjutan',
    description: 'Kelas lanjutan untuk hafalan Surah Al-Imran dengan fokus pada pemahaman makna.',
    studentCount: 20,
    progress: 67,
    students: [
      { 
        id: 6, 
        name: 'Khadijah binti Khuwailid',
        full_name: 'Khadijah binti Khuwailid',
        role: 'student' as const,
        school_id: 1,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-15T00:00:00Z',
        memorizedVerses: 100, 
        totalVerses: 150, 
        lastActivity: '2024-01-15',
        progress: 67 
      },
    ],
    schedule: [
      { day: 'Selasa', time: '10:00-11:30', activity: 'Hafalan Baru', note: 'Ayat 1-5' },
      { day: 'Kamis', time: '10:00-11:30', activity: 'Muraja\'ah', note: 'Review hafalan' },
    ],
    recentActivities: [
      { type: 'attendance', description: 'Kehadiran siswa 90%', date: '2024-01-15' },
      { type: 'memorization', description: 'Khadijah menyelesaikan ayat 95-100', date: '2024-01-14' },
    ],
    reports: [
       {
          id: 4,
          title: 'Laporan Bulanan Januari 2024',
          date: '2024-01-31',
          type: 'academic',
          description: 'Progress hafalan siswa cukup baik dengan rata-rata 67%',
          status: 'published'
        },
     ],
   },
];
</file>

<file path="src/styles/colors.ts">
/**
 * Color Design Tokens
 * Consistent color palette and semantic color mappings for the MadraXis app
 */

// Base Color Palette
export const baseColors = {
  // Primary Brand Colors
  teal: {
    50: '#f0fdfa',
    100: '#ccfbf1',
    200: '#99f6e4',
    300: '#5eead4',
    400: '#2dd4bf',
    500: '#005e7a', // Primary brand color
    600: '#004d65',
    700: '#003d51',
    800: '#002d3d',
    900: '#001d29',
  },
  
  // Secondary Brand Colors
  gold: {
    50: '#fffbeb',
    100: '#fef3c7',
    200: '#fde68a',
    300: '#fcd34d',
    400: '#f0c75e', // Secondary brand color
    500: '#d97706',
    600: '#b45309',
    700: '#92400e',
    800: '#78350f',
    900: '#451a03',
  },
  
  // Semantic Colors
  success: {
    50: '#f0fdf4',
    100: '#dcfce7',
    200: '#bbf7d0',
    300: '#86efac',
    400: '#4ade80',
    500: '#4caf50', // Success color
    600: '#16a34a',
    700: '#15803d',
    800: '#166534',
    900: '#14532d',
  },
  
  warning: {
    50: '#fffbeb',
    100: '#fef3c7',
    200: '#fed7aa',
    300: '#fdba74',
    400: '#fb923c',
    500: '#ff9800', // Warning color
    600: '#ea580c',
    700: '#c2410c',
    800: '#9a3412',
    900: '#7c2d12',
  },
  
  error: {
    50: '#fef2f2',
    100: '#fee2e2',
    200: '#fecaca',
    300: '#fca5a5',
    400: '#f87171',
    500: '#f44336', // Error color
    600: '#dc2626',
    700: '#b91c1c',
    800: '#991b1b',
    900: '#7f1d1d',
  },
  
  // Neutral Colors
  neutral: {
    50: '#fafafa',
    100: '#f5f5f5', // Main background
    200: '#eeeeee',
    300: '#d4d4d4',
    400: '#a3a3a3',
    500: '#737373',
    600: '#666666', // Secondary text
    700: '#404040',
    800: '#333333', // Primary text
    900: '#171717',
  },
  
  // Pure Colors
  white: '#ffffff',
  black: '#000000',
} as const;

// Semantic Color Mappings
export const semanticColors = {
  // Primary Colors
  primary: {
    main: baseColors.teal[500],
    light: baseColors.teal[400],
    dark: baseColors.teal[600],
    contrast: baseColors.white,
  },
  
  // Secondary Colors
  secondary: {
    main: baseColors.gold[400],
    light: baseColors.gold[300],
    dark: baseColors.gold[500],
    contrast: baseColors.white,
  },
  
  // Status Colors
  success: {
    main: baseColors.success[500],
    light: baseColors.success[400],
    dark: baseColors.success[600],
    contrast: baseColors.white,
  },
  
  warning: {
    main: baseColors.warning[500],
    light: baseColors.warning[400],
    dark: baseColors.warning[600],
    contrast: baseColors.white,
  },
  
  error: {
    main: baseColors.error[600],
    light: baseColors.error[400],
    dark: baseColors.error[700],
    contrast: baseColors.white,
  },
  
  // Info Colors
  info: {
    main: baseColors.teal[500],
    light: baseColors.teal[400],
    dark: baseColors.teal[600],
    contrast: baseColors.white,
  },
  
  // Background Colors
  background: {
    primary: baseColors.neutral[100], // #f5f5f5
    secondary: baseColors.white,
    tertiary: baseColors.neutral[50],
  },
  
  // Surface Colors
  surface: {
    primary: baseColors.white,
    secondary: baseColors.neutral[50],
    tertiary: baseColors.neutral[100],
  },
  
  // Text Colors
  text: {
    primary: baseColors.neutral[800], // #333333
    secondary: baseColors.neutral[600], // #666666
    tertiary: baseColors.neutral[500],
    disabled: baseColors.neutral[400],
    inverse: baseColors.white,
  },
  
  // Border Colors
  border: {
    primary: baseColors.neutral[200], // #eeeeee
    secondary: baseColors.neutral[300],
    focus: baseColors.teal[500],
    error: baseColors.error[600],
  },
  
  // Interactive Colors
  interactive: {
    hover: baseColors.neutral[50],
    pressed: baseColors.neutral[100],
    focus: baseColors.teal[100],
    disabled: baseColors.neutral[200],
  },
} as const;

// Role-specific Color Variations - distinct colors for visual differentiation
export const roleColors = {
  student: {
    primary: baseColors.teal[500],     // Teal - learning and growth
    accent: baseColors.teal[300],      // Lighter teal accent
  },
  teacher: {
    primary: baseColors.success[500],  // Green - guidance and knowledge
    accent: baseColors.gold[400],      // Gold - achievement and wisdom
  },
  parent: {
    primary: baseColors.warning[500],  // Orange - care and protection
    accent: baseColors.warning[300],   // Lighter orange accent
  },
  management: {
    primary: baseColors.error[600],    // Red - authority and decisions
    accent: baseColors.neutral[600],   // Neutral gray - professionalism
  },
} as const;

// Export all colors
export const colors = {
  ...baseColors,
  ...semanticColors,
  role: roleColors,
} as const;

// Type definitions
export type BaseColorKey = keyof typeof baseColors;
export type SemanticColorKey = keyof typeof semanticColors;
export type ColorVariant = '50' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
export type UserRole = 'student' | 'teacher' | 'parent' | 'management';
</file>

<file path="src/types/class.ts">
export interface Class {
  id: number;
  name: string;
  level: string;
  description?: string;
  status: 'active' | 'inactive' | 'archived';
  student_capacity: number;
  student_count: number;
  subject_count: number;
  teacher_count: number;
  academic_year: string;
  semester: '1' | '2';
  school_id: number;
  created_by: string;
  updated_by?: string;
  created_at: string;
  updated_at: string;
  deleted_at?: string;
  teachers?: Array<{
    user_id: string;
    role: string;
    full_name: string;
  }>;
}

export interface CreateClassData {
  name: string;
  level: string;
  description?: string;
  school_id: number;
  student_capacity?: number;
  academic_year: string;
  semester: '1' | '2';
}

export interface UpdateClassData {
  name?: string;
  level?: string;
  description?: string;
  student_capacity?: number;
  status?: 'active' | 'inactive' | 'archived';
  academic_year?: string;
  semester?: '1' | '2';
}

export interface ClassFilters {
  search?: string;
  status?: string;
  level?: string;
  academic_year?: string;
  semester?: string;
  sortBy?: 'name' | 'level' | 'student_count' | 'created_at' | 'updated_at';
  sortOrder?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

export interface BulkUpdateClassesData {
  class_ids: number[];
  updates: Partial<UpdateClassData>;
}

export interface BulkCreateClassesData {
  classes: CreateClassData[];
}

export interface BulkDeleteClassesData {
  class_ids: number[];
}

export interface ClassResponse {
  success: boolean;
  data?: Class[];
  message?: string;
  error?: string;
  meta?: {
    total: number;
    limit: number;
    offset: number;
  };
}
</file>

<file path="src/types/dashboard.ts">
import { Ionicons } from '@expo/vector-icons';

// Dashboard-specific types
export interface QuickActionConfig {
    title: string;
    subtitle?: string;
    icon: keyof typeof Ionicons.glyphMap;
    badge?: number;
    onPress: () => void;
    accessibilityLabel?: string;
    accessibilityHint?: string;
}

export interface ProgressConfig {
    label: string;
    value: number;
    variant: 'default' | 'success' | 'warning' | 'error';
    showLabel?: boolean;
    showPercentage?: boolean;
}

export interface DashboardData {
    quickActions: QuickActionConfig[];
    progressData: ProgressConfig[];
    upcomingAssignments?: Assignment[];
    todaySchedule?: ScheduleItem[];
}

export interface Assignment {
    id: string;
    title: string;
    subject: string;
    dueDate: string;
    status: 'pending' | 'submitted' | 'graded';
}

export interface ScheduleItem {
    id: string;
    subject: string;
    time: string;
    room: string;
    teacher: string;
}
</file>

<file path="src/types/index.ts">
// Core user identity from the unified profiles table
export interface Profile {
  id: string;  // UUID from auth.users
  full_name: string;  // Single canonical name field
  role: 'student' | 'teacher' | 'parent' | 'management';
  school_id: number;
  created_at: string;
  updated_at: string;
}

// Role-specific detail interfaces
export interface StudentDetails {
  user_id: string;  // FK to profiles.id
  nis?: string;     // National Student Number
  date_of_birth?: string;
  gender?: 'M' | 'F';
  boarding?: boolean;
  created_at: string;
  updated_at: string;
}

export interface TeacherDetails {
  user_id: string;  // FK to profiles.id
  employee_id?: string;
  hire_date?: string;
  specialty?: string;
  created_at: string;
  updated_at: string;
}

export interface ParentDetails {
  user_id: string;  // FK to profiles.id
  phone_number?: string;
  address?: string;
  occupation?: string;
  created_at: string;
  updated_at: string;
}

export interface ManagementDetails {
  user_id: string;  // FK to profiles.id
  position?: string;
  hire_date?: string;
  created_at: string;
  updated_at: string;
}

// Performance tracking interfaces
export interface StudentPerformance {
  id: number;
  user_id: string;  // FK to profiles.id
  period_start: string;
  period_end: string;
  academic_score?: number;
  quran_score?: number;
  attendance_pct?: number;
  created_at: string;
}

export interface TeacherPerformance {
  id: number;
  user_id: string;  // FK to profiles.id
  period_start: string;
  period_end: string;
  class_observation?: number;
  punctuality_score?: number;
  created_at: string;
}

// Composite interfaces for common use cases
export interface Student extends Profile {
  role: 'student';
  details?: StudentDetails;
  performance?: StudentPerformance[];
  class_name?: string;
  parent_name?: string;
  parent_phone?: string;
  address?: string;
  // For backward compatibility with existing Quran progress tracking
  quran_progress?: {
    memorized_verses: number;
    total_verses: number;
  };
}

export interface Teacher extends Profile {
  role: 'teacher';
  details?: TeacherDetails;
  performance?: TeacherPerformance[];
}

export interface Parent extends Profile {
  role: 'parent';
  details?: ParentDetails;
}

export interface Management extends Profile {
  role: 'management';
  details?: ManagementDetails;
}

// Union type for any user profile
export type UserProfile = Student | Teacher | Parent | Management;

// Legacy compatibility types for existing code
export interface LegacyStudent {
  id: string;
  name: string;  // Maps to Profile.full_name
  class?: string;
  image_url?: string;
  quran_progress?: {
    memorized_verses: number;
    total_verses: number;
  };
  // Additional legacy fields that may exist
  gender?: string;
  birth_date?: string;
  parent_name?: string;
  phone?: string;
  address?: string;
}

// Type for the raw Supabase query result in `fetchStudentById`
export interface StudentWithRelations extends Profile {
  student_details: StudentDetails[] | null;
  student_performance: StudentPerformance[] | null;
  class_students: {
    classes: {
      name: string;
    } | null;
  }[] | null;
  student_parent: {
    parent_profile: {
      full_name: string;
      parent_details: {
        phone_number: string | null;
        address: string | null;
      }[] | null;
    } | null;
  }[] | null;
}

// Helper type for database query results
export interface StudentWithDetails {
  id: string;
  full_name: string;
  role: 'student';
  school_id: number;
  created_at: string;
  updated_at: string;
  nis?: string;
  date_of_birth?: string;
  gender?: 'M' | 'F';
  boarding?: boolean;
}

// Incident interface for school incident management
export interface Incident {
  id: number;
  incident_type: string;
  description: string;
  location: string;
  status: string;
  created_at: string;
  student?: {
    full_name: string;
  };
  is_anonymous?: boolean;
  reporter_id: string; // Required field for tracking incident reporters
}
</file>

<file path="app/(management)/index.tsx">
import React, { useEffect } from 'react';
import { useRouter } from 'expo-router';
import { useAuth } from '../../src/context/AuthContext';
import { Text, View } from 'react-native';

export default function ManagementIndex() {
  const { user, profile, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (!user) {
        router.replace('/(auth)/login');
      } else if (user && profile) {
        // User is authenticated and profile is loaded
        if (profile.role !== 'management') {
          // Redirect based on role or to login if role doesn't match
          switch (profile.role) {
            case 'teacher':
              router.replace('/(teacher)/dashboard');
              break;
            case 'parent':
              router.replace('/(parent)/dashboard');
              break;
            case 'student':
              router.replace('/(student)/dashboard');
              break;
            default:
              router.replace('/(auth)/login');
          }
        } else if (profile.role === 'management') {
          // Check if school_id exists to decide between dashboard and setup
          const schoolId = user.user_metadata?.school_id || profile.school_id;
          if (schoolId) {
            router.replace('/(management)/dashboard');
          } else {
            router.replace('/(management)/setup');
          }
        }
      }
      // If user exists but profile is null, we wait for the profile to load
      // The AuthContext will handle fetching the profile data
      // Do not redirect to login in this case to avoid race conditions
    }
  }, [user, profile, loading, router]);

  // While loading or redirecting, show a placeholder
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Memuat...</Text>
    </View>
  );
}
</file>

<file path="app/(parent)/anti-bullying.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import AntiBullyingResources from '../../src/components/templates/AntiBullyingResourcesTemplate';

export default function AntiBullyingScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Sumber Daya Anti-Perundungan" 
      }} />
      <AntiBullyingResources />
    </>
  );
}
</file>

<file path="app/(parent)/cctv-request.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import CCTVAccessRequest from '../../src/components/templates/CCTVAccessRequestTemplate';

export default function CCTVRequestScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Permintaan Akses CCTV" 
      }} />
      <CCTVAccessRequest />
    </>
  );
}
</file>

<file path="app/(parent)/dashboard.tsx">
import React, { useState, useEffect } from 'react';
import { View, ScrollView } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { SvgXml } from 'react-native-svg';

// Design System Components
import { DashboardTemplate } from '../../src/components/templates/DashboardTemplate';
import { Card } from '../../src/components/molecules/Card';
import { QuickAction } from '../../src/components/molecules/QuickAction';
import { ListItem } from '../../src/components/molecules/ListItem';
import { Typography } from '../../src/components/atoms/Typography';
import { ProgressBar } from '../../src/components/molecules/ProgressBar';
import { LoadingSpinner } from '../../src/components/atoms/LoadingSpinner/LoadingSpinner';
import { ErrorMessage } from '../../src/components/molecules/ErrorMessage/ErrorMessage';
import { EmptyState } from '../../src/components/molecules/EmptyState/EmptyState';

// Context and Services
import { useAuth } from '../../src/context/AuthContext';
import { supabase } from '../../src/utils/supabase';
import { logoSvg } from '../../src/utils/svgPatterns';
import { colors } from '../../src/styles/colors';

// Icon types for proper typing
type IoniconsIcon = keyof typeof Ionicons.glyphMap;

interface ActivityItem {
  id: number;
  type: 'academic' | 'quran' | 'dorm';
  title: string;
  score?: string;
  progress?: string;
  status?: string;
  date: string;
}

interface EventItem {
  id: number;
  title: string;
  date: string;
  time: string;
}

interface StudentData {
  name: string;
  grade: string;
  class: string;
  dorm: string;
  room: string;
  quranProgress: number;
  academicProgress: number;
  attendanceRate: number;
  recentActivities: ActivityItem[];
  upcomingEvents: EventItem[];
}

export default function ParentDashboard() {
  const router = useRouter();
  const { profile, loading } = useAuth();
  const [schoolName, setSchoolName] = useState('Zaid Bin Tsabit');
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Mock data for demonstration
  const [studentData] = useState<StudentData>({
    name: 'Ahmad Farhan',
    grade: '8',
    class: 'VIII-A',
    dorm: 'Al-Farabi',
    room: '203',
    quranProgress: 68,
    academicProgress: 85,
    attendanceRate: 98,
    recentActivities: [
      {
        id: 1,
        type: 'academic',
        title: 'Ujian Matematika',
        score: '85/100',
        date: '2 jam yang lalu',
      },
      {
        id: 2,
        type: 'quran',
        title: 'Surah Al-Baqarah',
        progress: '75-82',
        date: '5 jam yang lalu',
      },
      {
        id: 3,
        type: 'dorm',
        title: 'Sholat Maghrib',
        status: 'Hadir',
        date: 'Kemarin',
      },
      {
        id: 4,
        type: 'academic',
        title: 'Proyek Sains',
        status: 'Diserahkan',
        date: 'Kemarin',
      },
    ],
    upcomingEvents: [
      {
        id: 1,
        title: 'Pertemuan Orang Tua-Guru',
        date: '15 Maret, 2025',
        time: '10:00',
      },
      {
        id: 2,
        title: 'Lomba Tilawah Al-Quran',
        date: '20 Maret, 2025',
        time: '14:00',
      },
    ],
  });

  // Fetch school name from database
  useEffect(() => {
    const fetchSchoolName = async () => {
      if (profile?.school_id) {
        try {
          const { data, error } = await supabase
            .from('schools')
            .select('name')
            .eq('id', profile.school_id)
            .single();
          
          if (data && !error) {
            setSchoolName(data.name);
          }
        } catch (error) {
          console.error('Error fetching school name:', error);
          setError('Gagal memuat data sekolah');
        }
      }
      setIsLoading(false);
    };

    fetchSchoolName();
  }, [profile?.school_id]);

  // Handle navigation
  const handleNavigate = (route: string) => {
    router.push(route as Parameters<typeof router.push>[0]);
  };

  // Handle modal opening
  const handleOpenModal = (modalType: string) => {
    console.log('Opening modal:', modalType);
  };

  // Tab configuration
  const tabs = [
    {
      id: 'dashboard',
      label: 'Beranda',
      icon: 'home-outline' as IoniconsIcon,
    },
    {
      id: 'messages',
      label: 'Pesan',
      icon: 'chatbubble-outline' as IoniconsIcon,
    },
    {
      id: 'leave',
      label: 'Izin',
      icon: 'calendar-outline' as IoniconsIcon,
    },
    {
      id: 'settings',
      label: 'Pengaturan',
      icon: 'settings-outline' as IoniconsIcon,
    },
  ];

  // Header actions
  const headerActions = [
    {
      icon: 'notifications-outline' as IoniconsIcon,
      onPress: () => console.log('Notifications pressed'),
      badge: 3,
      accessibilityLabel: 'Notifikasi',
    },
    {
      icon: 'person-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/'),
      accessibilityLabel: 'Profil',
    },
  ];

  // Quick actions configuration
  const quickActions = [
    {
      title: 'CCTV',
      icon: 'videocam-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/parent/cctv-request'),
      variant: 'primary' as const,
    },
    {
      title: 'Laporan Insiden',
      icon: 'warning-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/parent/incident-report'),
      variant: 'secondary' as const,
    },
    {
      title: 'Anti-Bullying',
      icon: 'shield-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/parent/anti-bullying'),
      variant: 'primary' as const,
    },
    {
      title: 'Pesan Guru',
      icon: 'chatbubbles-outline' as IoniconsIcon,
      onPress: () => handleOpenModal('teacher-messages'),
      variant: 'primary' as const,
    },
    {
      title: 'Izin Anak',
      icon: 'calendar-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/parent/leave-request'),
      variant: 'primary' as const,
    },
    {
      title: 'Nilai Anak',
      icon: 'book-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/parent/grades'),
      variant: 'primary' as const,
    },
  ];

  // Helper functions with design tokens
  const getActivityIcon = (type: string): IoniconsIcon => {
    switch (type) {
      case 'academic':
        return 'school-outline';
      case 'quran':
        return 'book-outline';
      case 'dorm':
        return 'home-outline';
      default:
        return 'information-circle-outline';
    }
  };

  const getActivityColor = (type: string) => {
    switch (type) {
      case 'academic': return colors.success.main;
      case 'quran': return colors.primary.main;
      case 'dorm': return colors.warning.main;
      default: return colors.neutral[500];
    }
  };

  const getProgressVariant = (type: string) => {
    switch (type) {
      case 'quran': return 'default';
      case 'academic': return 'success';
      case 'attendance': return 'warning';
      default: return 'default';
    }
  };

  if (loading || isLoading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <StatusBar style="dark" />
        <LoadingSpinner size="large" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}>
        <ErrorMessage 
          message={error}
          onRetry={() => {
            setError(null);
            setIsLoading(true);
            // Re-fetch logic would go here
          }}
        />
      </View>
    );
  }

  const renderDashboard = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      {/* Welcome Section */}
      <Card variant="elevated" style={{ marginBottom: 20 }}>
        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
          <View style={{ flex: 1 }}>
            <Typography variant="h4" color="textSecondary" style={{ marginBottom: 4 }}>
              Selamat Datang, Orang Tua dari
            </Typography>
            <Typography variant="h3" weight="bold" color="primary" style={{ marginBottom: 8 }}>
              {studentData.name}
            </Typography>
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', marginTop: 12 }}>
              <View style={{ width: '50%', marginBottom: 8 }}>
                <Typography variant="caption" color="textSecondary">Kelas</Typography>
                <Typography variant="body1" weight="semibold">{studentData.grade}</Typography>
              </View>
              <View style={{ width: '50%', marginBottom: 8 }}>
                <Typography variant="caption" color="textSecondary">Ruang</Typography>
                <Typography variant="body1" weight="semibold">{studentData.class}</Typography>
              </View>
              <View style={{ width: '50%', marginBottom: 8 }}>
                <Typography variant="caption" color="textSecondary">Asrama</Typography>
                <Typography variant="body1" weight="semibold">{studentData.dorm}</Typography>
              </View>
              <View style={{ width: '50%', marginBottom: 8 }}>
                <Typography variant="caption" color="textSecondary">Kamar</Typography>
                <Typography variant="body1" weight="semibold">{studentData.room}</Typography>
              </View>
            </View>
          </View>
          <SvgXml xml={logoSvg} width={60} height={60} />
        </View>
      </Card>

      {/* Quick Actions */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Aksi Cepat
        </Typography>
        <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
          {quickActions.slice(0, 3).map((action, index) => (
            <QuickAction
              key={index}
              title={action.title}
              icon={action.icon}
              onPress={action.onPress}
              style={{ width: '48%', marginBottom: 12 }}
              variant={action.variant}
            />
          ))}
        </View>
        <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
          {quickActions.slice(3).map((action, index) => (
            <QuickAction
              key={index + 3}
              title={action.title}
              icon={action.icon}
              onPress={action.onPress}
              style={{ width: '48%', marginBottom: 12 }}
              variant={action.variant}
            />
          ))}
        </View>
      </View>

      {/* Progress Overview */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Ringkasan Perkembangan
        </Typography>
        <Card variant="default">
          <View style={{ marginBottom: 16 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
              <Typography variant="body1" weight="semibold">Hafalan Quran</Typography>
              <Typography variant="body1" weight="bold" color="primary">{studentData.quranProgress}%</Typography>
            </View>
            <ProgressBar
              value={studentData.quranProgress}
              variant={getProgressVariant('quran') as 'default' | 'success' | 'warning' | 'error'}
              size="medium"
            />
          </View>
          
          <View style={{ marginBottom: 16 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
              <Typography variant="body1" weight="semibold">Akademik</Typography>
              <Typography variant="body1" weight="bold" color={colors.success.main}>{studentData.academicProgress}%</Typography>
            </View>
            <ProgressBar
              value={studentData.academicProgress}
              variant={getProgressVariant('academic') as 'default' | 'success' | 'warning' | 'error'}
              size="medium"
            />
          </View>
          
          <View>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
              <Typography variant="body1" weight="semibold">Kehadiran</Typography>
              <Typography variant="body1" weight="bold" color={colors.warning.main}>{studentData.attendanceRate}%</Typography>
            </View>
            <ProgressBar
              value={studentData.attendanceRate}
              variant={getProgressVariant('attendance') as 'default' | 'success' | 'warning' | 'error'}
              size="medium"
            />
          </View>
        </Card>
      </View>

      {/* Recent Activities */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Aktivitas Terbaru
        </Typography>
        <Card variant="default">
          {studentData.recentActivities.length === 0 ? (
            <EmptyState
              title="Belum ada aktivitas"
              message="Aktivitas terbaru anak Anda akan muncul di sini"
              icon="time-outline"
            />
          ) : (
            studentData.recentActivities.map((activity, index) => (
              <View key={activity.id}>
                <ListItem
                  title={activity.title}
                  subtitle={activity.score || activity.progress || activity.status}
                  leftIcon={getActivityIcon(activity.type)}
                  rightIcon="chevron-forward"
                  onPress={() => console.log('Activity pressed:', activity.title)}
                />
                {index < studentData.recentActivities.length - 1 && (
                  <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
                )}
              </View>
            ))
          )}
        </Card>
      </View>

      {/* Upcoming Events */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Acara Mendatang
        </Typography>
        <Card variant="default">
          {studentData.upcomingEvents.length === 0 ? (
            <EmptyState
              title="Belum ada acara"
              message="Acara mendatang akan muncul di sini"
              icon="calendar-outline"
            />
          ) : (
            studentData.upcomingEvents.map((event, index) => (
              <View key={event.id}>
                <ListItem
                  title={event.title}
                  subtitle={event.time}
                  leftComponent={
                    <View style={{
                      width: 50,
                      height: 50,
                      borderRadius: 8,
                      backgroundColor: colors.primary.main,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                      <Typography variant="body2" color="white" weight="bold">
                        {event.date.split(',')[0].split(' ')[1]}
                      </Typography>
                      <Typography variant="caption" color="white">
                        {event.date.split(',')[0].split(' ')[0].substring(0, 3)}
                      </Typography>
                    </View>
                  }
                  rightIcon="chevron-forward"
                  onPress={() => console.log('Event pressed:', event.title)}
                />
                {index < studentData.upcomingEvents.length - 1 && (
                  <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
                )}
              </View>
            ))
          )}
        </Card>
      </View>

      {/* Safety & Monitoring */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Keamanan & Pemantauan
        </Typography>
        <Card variant="default">
          <ListItem
            title="Permintaan Akses CCTV"
            subtitle="Minta akses untuk memantau kegiatan anak Anda"
            leftIcon="videocam-outline"
            rightIcon="chevron-forward"
            onPress={() => handleNavigate('/parent/cctv-request')}
          />
          <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
          <ListItem
            title="Laporkan Insiden"
            subtitle="Laporkan insiden atau kejadian yang perlu perhatian"
            leftIcon="warning-outline"
            rightIcon="chevron-forward"
            onPress={() => handleNavigate('/parent/incident-report')}
          />
          <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
          <ListItem
            title="Sumber Anti-Perundungan"
            subtitle="Akses informasi dan sumber daya anti-perundungan"
            leftIcon="shield-outline"
            rightIcon="chevron-forward"
            onPress={() => handleNavigate('/parent/anti-bullying')}
          />
        </Card>
      </View>
    </ScrollView>
  );

  const renderMessages = () => (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}>
      <EmptyState
        title="Fitur Pesan Segera Hadir"
        message="Anda akan dapat berkomunikasi dengan guru dan staf di sini"
        icon="chatbubble-outline"
      />
    </View>
  );

  const renderLeaveRequests = () => (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}>
      <EmptyState
        title="Permintaan Izin Segera Hadir"
        message="Anda akan dapat mengajukan dan melacak izin ketidakhadiran anak Anda di sini"
        icon="calendar-outline"
      />
    </View>
  );

  const renderSettings = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      <Card variant="default" style={{ marginBottom: 16 }}>
        <Typography variant="h4" style={{ marginBottom: 16 }}>
          Pengaturan Akun
        </Typography>
        
        <ListItem
          title="Edit Profil"
          leftIcon="person-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur edit profil akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Pengaturan Notifikasi"
          leftIcon="notifications-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur pengaturan notifikasi akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Bahasa"
          leftIcon="language-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur pengaturan bahasa akan segera hadir!')}
        />
      </Card>
      
      <Card variant="default" style={{ marginBottom: 16 }}>
        <Typography variant="h4" style={{ marginBottom: 16 }}>
          Bantuan
        </Typography>
        
        <ListItem
          title="Pusat Bantuan"
          leftIcon="help-circle-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur pusat bantuan akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Syarat & Ketentuan"
          leftIcon="document-text-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur syarat & ketentuan akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Kebijakan Privasi"
          leftIcon="shield-checkmark-outline"
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur kebijakan privasi akan segera hadir!')}
        />
      </Card>
    </ScrollView>
  );

  // Content mapping based on active tab
  const getContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboard();
      case 'messages':
        return renderMessages();
      case 'leave':
        return renderLeaveRequests();
      case 'settings':
        return renderSettings();
      default:
        return renderDashboard();
    }
  };

  return (
    <DashboardTemplate
      header={{
        title: 'Dashboard Orang Tua',
        subtitle: schoolName,
        leftAction: {
          icon: 'arrow-back-outline' as IoniconsIcon,
          onPress: () => router.replace('/login'),
          accessibilityLabel: 'Kembali ke login',
        },
        rightActions: headerActions,
      }}
      tabs={tabs}
      activeTab={activeTab}
      onTabChange={setActiveTab}
      backgroundPattern={true}
      contentPadding={true}
      testID="parent-dashboard"
    >
      {getContent()}
    </DashboardTemplate>
  );
}
</file>

<file path="app/(parent)/incident-report.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import IncidentReport from '../../src/components/templates/ParentIncidentReportTemplate';

export default function IncidentReportScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Laporan Insiden" 
      }} />
      <IncidentReport />
    </>
  );
}
</file>

<file path="app/(parent)/index.tsx">
import { Redirect } from 'expo-router';

export default function ParentIndex() {
  return <Redirect href="/(parent)/dashboard" />;
}
</file>

<file path="app/(student)/anti-bullying.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import AntiBullying from '../../src/components/templates/StudentAntiBullyingTemplate';

export default function AntiBullyingScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Edukasi Anti-Perundungan" 
      }} />
      <AntiBullying />
    </>
  );
}
</file>

<file path="app/(student)/incident-report.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import IncidentReport from '../../src/components/templates/StudentIncidentReportTemplate';

export default function IncidentReportScreen() {
  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Lapor Masalah" 
      }} />
      <IncidentReport />
    </>
  );
}
</file>

<file path="app/(student)/index.tsx">
import { Redirect } from 'expo-router';

export default function StudentIndex() {
  return <Redirect href="/(student)/dashboard" />;
}
</file>

<file path="app/(teacher)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function TeacherLayout() {
    return (
        <Stack screenOptions={{ headerShown: false }}>
            <Stack.Screen name="dashboard" />
            <Stack.Screen name="students/index" />
            <Stack.Screen name="students/[id]" />
            <Stack.Screen name="students/add" />
            <Stack.Screen name="index" />
            <Stack.Screen name="class/index" />
            <Stack.Screen name="class/[id]/index" />
            <Stack.Screen name="class/[id]/students/index" />
            <Stack.Screen name="class/[id]/schedule/index" />
            <Stack.Screen name="class/[id]/reports/index" />
        </Stack>
    );
}
</file>

<file path="app/(teacher)/class/[id]/reports/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import ClassReports from '../../../../../src/components/templates/ClassReportsTemplate';

export default function ClassReportsIndex() {
  return (
    <>
      <Stack.Screen options={{
        headerShown: false,
        title: "Laporan Kelas"
      }} />
      <ClassReports />
    </>
  );
}
</file>

<file path="app/(teacher)/class/[id]/schedule/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import ClassSchedule from '../../../../../src/components/templates/ClassScheduleTemplate';

export default function ClassScheduleIndex() {
  return (
    <>
      <Stack.Screen options={{
        headerShown: false,
        title: "Jadwal Kelas"
      }} />
      <ClassSchedule />
    </>
  );
}
</file>

<file path="app/(teacher)/class/[id]/students/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import ClassStudents from '../../../../../src/components/templates/ClassStudentsTemplate';

export default function ClassStudentsIndex() {
  return (
    <>
      <Stack.Screen options={{
        headerShown: false,
        title: "Siswa Kelas"
      }} />
      <ClassStudents />
    </>
  );
}
</file>

<file path="app/(teacher)/class/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import ClassesList from '../../../src/components/templates/ClassesListTemplate';

export default function ClassesIndex() {
  return (
    <>
      <Stack.Screen options={{
        headerShown: false,
        title: "Daftar Kelas"
      }} />
      <ClassesList />
    </>
  );
}
</file>

<file path="babel.config.js">
module.exports = function (api) {
  api.cache(true);

  return {
    presets: [
      ['babel-preset-expo', { jsxRuntime: 'automatic' }],
      '@babel/preset-typescript'
    ],
    plugins: [
      'react-native-reanimated/plugin'
    ],
    env: {
      test: {
        presets: [
          ['babel-preset-expo', { jsxRuntime: 'automatic' }],
          '@babel/preset-typescript',
          ['@babel/preset-env', { targets: { node: 'current' } }]
        ],
        plugins: []
      }
    }
  };
};
</file>

<file path="src/components/atoms/BackgroundPattern/BackgroundPattern.stories.tsx">
/**
 * BackgroundPattern Component Stories
 * Storybook stories demonstrating all BackgroundPattern component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { BackgroundPattern } from './BackgroundPattern';
import { Typography } from '../Typography';
import { Card } from '../../molecules/Card';
import { ThemeProvider } from '../../../context/ThemeContext';

const meta: Meta<typeof BackgroundPattern> = {
  title: 'Atoms/BackgroundPattern',
  component: BackgroundPattern,
  parameters: {
    docs: {
      description: {
        component: 'Islamic geometric background pattern with design token integration and multiple variants.',
      },
    },
  },
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['geometric', 'minimal', 'dots', 'waves', 'none'],
      description: 'Pattern variant',
    },
    intensity: {
      control: { type: 'select' },
      options: ['subtle', 'light', 'medium', 'strong'],
      description: 'Pattern intensity level',
    },
    color: {
      control: { type: 'color' },
      description: 'Custom pattern color',
    },
    opacity: {
      control: { type: 'range', min: 0, max: 1, step: 0.01 },
      description: 'Custom opacity (overrides intensity)',
    },
  },
  decorators: [
    (Story) => (
      <View style={{ 
        height: 400, 
        backgroundColor: '#f5f5f5',
        position: 'relative',
        padding: 20,
      }}>
        <Story />
        <View style={{ 
          position: 'absolute', 
          top: 20, 
          left: 20, 
          right: 20,
          zIndex: 1,
        }}>
          <Typography variant="h3" style={{ marginBottom: 8 }}>
            Sample Content
          </Typography>
          <Typography variant="body1" color="secondary">
            This content sits above the background pattern
          </Typography>
        </View>
      </View>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof BackgroundPattern>;

// Default geometric pattern
export const Default: Story = {
  args: {
    variant: 'geometric',
    intensity: 'subtle',
  },
};

// Different variants
export const GeometricPattern: Story = {
  args: {
    variant: 'geometric',
    intensity: 'light',
  },
  parameters: {
    docs: {
      description: {
        story: 'Traditional Islamic geometric pattern with triangular and star motifs.',
      },
    },
  },
};

export const MinimalPattern: Story = {
  args: {
    variant: 'minimal',
    intensity: 'light',
  },
  parameters: {
    docs: {
      description: {
        story: 'Minimal pattern with simple dots and subtle lines.',
      },
    },
  },
};

export const DotsPattern: Story = {
  args: {
    variant: 'dots',
    intensity: 'light',
  },
  parameters: {
    docs: {
      description: {
        story: 'Simple dots pattern arranged in a grid.',
      },
    },
  },
};

export const WavesPattern: Story = {
  args: {
    variant: 'waves',
    intensity: 'light',
  },
  parameters: {
    docs: {
      description: {
        story: 'Flowing waves pattern with curved lines.',
      },
    },
  },
};

export const NoPattern: Story = {
  args: {
    variant: 'none',
  },
  parameters: {
    docs: {
      description: {
        story: 'No pattern - useful for clean layouts.',
      },
    },
  },
};

// Different intensities
export const IntensityLevels: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', height: 400 }}>
      {(['subtle', 'light', 'medium', 'strong'] as const).map((intensity, index) => (
        <View key={intensity} style={{ 
          flex: 1, 
          backgroundColor: '#f5f5f5',
          position: 'relative',
          marginRight: index < 3 ? 8 : 0,
        }}>
          <BackgroundPattern
            variant="geometric"
            intensity={intensity}
          />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 10, 
            right: 10,
            zIndex: 1,
          }}>
            <Typography variant="h4" style={{ marginBottom: 4 }}>
              {intensity.charAt(0).toUpperCase() + intensity.slice(1)}
            </Typography>
            <Typography variant="caption" color="secondary">
              {intensity} intensity
            </Typography>
          </View>
        </View>
      ))}
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different intensity levels from subtle to strong.',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', height: 400 }}>
      {[
        { color: '#005e7a', name: 'Primary' },
        { color: '#f0c75e', name: 'Secondary' },
        { color: '#4caf50', name: 'Success' },
        { color: '#ff9800', name: 'Warning' },
      ].map((item, index) => (
        <View key={item.name} style={{ 
          flex: 1, 
          backgroundColor: '#f5f5f5',
          position: 'relative',
          marginRight: index < 3 ? 8 : 0,
        }}>
          <BackgroundPattern
            variant="geometric"
            intensity="medium"
            color={item.color}
          />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 10, 
            right: 10,
            zIndex: 1,
          }}>
            <Typography variant="h4" style={{ marginBottom: 4 }}>
              {item.name}
            </Typography>
            <Typography variant="caption" color="secondary">
              {item.color}
            </Typography>
          </View>
        </View>
      ))}
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Background patterns with different brand colors.',
      },
    },
  },
};

// Custom opacity
export const CustomOpacity: Story = {
  render: () => (
    <View style={{ flexDirection: 'row', height: 400 }}>
      {[0.02, 0.05, 0.1, 0.2].map((opacity, index) => (
        <View key={opacity} style={{ 
          flex: 1, 
          backgroundColor: '#f5f5f5',
          position: 'relative',
          marginRight: index < 3 ? 8 : 0,
        }}>
          <BackgroundPattern
            variant="geometric"
            opacity={opacity}
          />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 10, 
            right: 10,
            zIndex: 1,
          }}>
            <Typography variant="h4" style={{ marginBottom: 4 }}>
              {Math.round(opacity * 100)}%
            </Typography>
            <Typography variant="caption" color="secondary">
              opacity: {opacity}
            </Typography>
          </View>
        </View>
      ))}
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Background patterns with custom opacity values.',
      },
    },
  },
};

// Dark background
export const DarkBackground: Story = {
  args: {
    variant: 'geometric',
    intensity: 'medium',
    color: '#ffffff',
  },
  decorators: [
    (Story) => (
      <View style={{ 
        height: 400, 
        backgroundColor: '#1a1a1a',
        position: 'relative',
        padding: 20,
      }}>
        <Story />
        <View style={{ 
          position: 'absolute', 
          top: 20, 
          left: 20, 
          right: 20,
          zIndex: 1,
        }}>
          <Typography variant="h3" style={{ marginBottom: 8, color: '#ffffff' }}>
            Dark Theme
          </Typography>
          <Typography variant="body1" style={{ color: '#cccccc' }}>
            White pattern on dark background
          </Typography>
        </View>
      </View>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern on dark theme with white pattern color.',
      },
    },
  },
};

// With content overlay
export const WithContentOverlay: Story = {
  args: {
    variant: 'geometric',
    intensity: 'light',
  },
  decorators: [
    (Story) => (
      <View style={{ 
        height: 500, 
        backgroundColor: '#f5f5f5',
        position: 'relative',
        padding: 20,
      }}>
        <Story />
        <View style={{ 
          position: 'absolute', 
          top: 20, 
          left: 20, 
          right: 20,
          zIndex: 1,
          gap: 16,
        }}>
          <Typography variant="h2" style={{ marginBottom: 8 }}>
            Dashboard
          </Typography>
          
          <Card variant="elevated" padding="medium">
            <Typography variant="h4" style={{ marginBottom: 8 }}>
              Welcome Back!
            </Typography>
            <Typography variant="body2" color="secondary">
              This card sits above the background pattern, demonstrating how content layers properly.
            </Typography>
          </Card>
          
          <Card variant="default" padding="medium">
            <Typography variant="h4" style={{ marginBottom: 8 }}>
              Statistics
            </Typography>
            <Typography variant="body2" color="secondary">
              The pattern provides subtle visual interest without interfering with readability.
            </Typography>
          </Card>
        </View>
      </View>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern with realistic dashboard content overlay.',
      },
    },
  },
};

// All variants comparison
export const AllVariants: Story = {
  render: () => (
    <View style={{ gap: 16 }}>
      {(['geometric', 'minimal', 'dots', 'waves'] as const).map((variant) => (
        <View key={variant} style={{ 
          height: 120, 
          backgroundColor: '#f5f5f5',
          position: 'relative',
          borderRadius: 8,
          overflow: 'hidden',
        }}>
          <BackgroundPattern
            variant={variant}
            intensity="light"
          />
          <View style={{ 
            position: 'absolute', 
            top: 16, 
            left: 16,
            zIndex: 1,
          }}>
            <Typography variant="h4" style={{ marginBottom: 4 }}>
              {variant.charAt(0).toUpperCase() + variant.slice(1)} Pattern
            </Typography>
            <Typography variant="caption" color="secondary">
              variant="{variant}"
            </Typography>
          </View>
        </View>
      ))}
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Comparison of all available pattern variants.',
      },
    },
  },
};

// Role-specific examples
export const StudentTheme: Story = {
  args: {
    variant: 'geometric',
    intensity: 'subtle',
  },
  decorators: [
    (Story) => (
      <ThemeProvider initialRole="student">
        <View style={{ 
          height: 400, 
          backgroundColor: '#f8f9fa',
          position: 'relative',
          padding: 20,
        }}>
          <Story />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 20, 
            right: 20,
            zIndex: 1,
          }}>
            <Typography variant="h3" style={{ marginBottom: 8 }}>
              Student Portal
            </Typography>
            <Typography variant="body1" color="secondary">
              Subtle geometric pattern for student dashboard
            </Typography>
          </View>
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern themed for student portal using theme context.',
      },
    },
  },
};

export const TeacherTheme: Story = {
  args: {
    variant: 'minimal',
    intensity: 'light',
  },
  decorators: [
    (Story) => (
      <ThemeProvider initialRole="teacher">
        <View style={{ 
          height: 400, 
          backgroundColor: '#f1f8e9',
          position: 'relative',
          padding: 20,
        }}>
          <Story />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 20, 
            right: 20,
            zIndex: 1,
          }}>
            <Typography variant="h3" style={{ marginBottom: 8 }}>
              Teacher Portal
            </Typography>
            <Typography variant="body1" color="secondary">
              Clean minimal pattern for teacher dashboard
            </Typography>
          </View>
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern themed for teacher portal using theme context.',
      },
    },
  },
};

export const ParentTheme: Story = {
  args: {
    variant: 'waves',
    intensity: 'subtle',
  },
  decorators: [
    (Story) => (
      <ThemeProvider initialRole="parent">
        <View style={{ 
          height: 400, 
          backgroundColor: '#e3f2fd',
          position: 'relative',
          padding: 20,
        }}>
          <Story />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 20, 
            right: 20,
            zIndex: 1,
          }}>
            <Typography variant="h3" style={{ marginBottom: 8 }}>
              Parent Portal
            </Typography>
            <Typography variant="body1" color="secondary">
              Gentle waves pattern for parent dashboard
            </Typography>
          </View>
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern themed for parent portal using theme context.',
      },
    },
  },
};

export const ManagementTheme: Story = {
  args: {
    variant: 'dots',
    intensity: 'light',
  },
  decorators: [
    (Story) => (
      <ThemeProvider initialRole="management">
        <View style={{ 
          height: 400, 
          backgroundColor: '#fafafa',
          position: 'relative',
          padding: 20,
        }}>
          <Story />
          <View style={{ 
            position: 'absolute', 
            top: 20, 
            left: 20, 
            right: 20,
            zIndex: 1,
          }}>
            <Typography variant="h3" style={{ marginBottom: 8 }}>
              Management Portal
            </Typography>
            <Typography variant="body1" color="secondary">
              Professional dots pattern for management dashboard
            </Typography>
          </View>
        </View>
      </ThemeProvider>
    ),
  ],
  parameters: {
    docs: {
      description: {
        story: 'Background pattern themed for management portal using theme context.',
      },
    },
  },
};
</file>

<file path="src/components/atoms/Button/Button.stories.tsx">
/**
 * Button Component Stories
 * Documentation and examples for the Button component
 */

import React from 'react';
import { View, StyleSheet } from 'react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { Button } from './Button';

// Story wrapper
const StoryWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    <View style={styles.container}>
      {children}
    </View>
  </ThemeProvider>
);

// Default Button
export const Default = () => (
  <StoryWrapper>
    <Button onPress={() => console.log('Default button pressed')}>
      Default Button
    </Button>
  </StoryWrapper>
);

// All Variants
export const Variants = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button variant="primary" onPress={() => console.log('Primary')}>
        Primary
      </Button>
      <Button variant="secondary" onPress={() => console.log('Secondary')}>
        Secondary
      </Button>
      <Button variant="outline" onPress={() => console.log('Outline')}>
        Outline
      </Button>
      <Button variant="ghost" onPress={() => console.log('Ghost')}>
        Ghost
      </Button>
      <Button variant="danger" onPress={() => console.log('Danger')}>
        Danger
      </Button>
    </View>
  </StoryWrapper>
);

// All Sizes
export const Sizes = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button size="small" onPress={() => console.log('Small')}>
        Small Button
      </Button>
      <Button size="medium" onPress={() => console.log('Medium')}>
        Medium Button
      </Button>
      <Button size="large" onPress={() => console.log('Large')}>
        Large Button
      </Button>
    </View>
  </StoryWrapper>
);

// States
export const States = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button onPress={() => console.log('Normal')}>
        Normal
      </Button>
      <Button disabled onPress={() => console.log('Disabled')}>
        Disabled
      </Button>
      <Button loading onPress={() => console.log('Loading')}>
        Loading
      </Button>
    </View>
  </StoryWrapper>
);

// With Icons
export const WithIcons = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button 
        icon="home" 
        iconPosition="left" 
        onPress={() => console.log('Left icon')}
      >
        Left Icon
      </Button>
      <Button 
        icon="arrow-forward" 
        iconPosition="right" 
        onPress={() => console.log('Right icon')}
      >
        Right Icon
      </Button>
      <Button 
        icon="close" 
        iconOnly 
        onPress={() => console.log('Icon only')}
      >
        Icon Only
      </Button>
    </View>
  </StoryWrapper>
);

// Full Width
export const FullWidth = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button fullWidth onPress={() => console.log('Full width')}>
        Full Width Button
      </Button>
      <Button 
        fullWidth 
        variant="outline" 
        onPress={() => console.log('Full width outline')}
      >
        Full Width Outline
      </Button>
    </View>
  </StoryWrapper>
);

// Complex Examples
export const ComplexExamples = () => (
  <StoryWrapper>
    <View style={styles.section}>
      <Button 
        variant="primary"
        size="large"
        icon="download"
        iconPosition="left"
        fullWidth
        onPress={() => console.log('Download')}
      >
        Download File
      </Button>
      
      <Button 
        variant="danger"
        size="small"
        icon="trash"
        iconPosition="left"
        onPress={() => console.log('Delete')}
      >
        Delete
      </Button>
      
      <Button 
        variant="ghost"
        icon="settings"
        iconOnly
        onPress={() => console.log('Settings')}
      />
      
      <Button 
        variant="outline"
        loading
        onPress={() => console.log('Saving')}
      >
        Saving...
      </Button>
    </View>
  </StoryWrapper>
);

// All Variants with All Sizes
export const VariantSizeCombinations = () => (
  <StoryWrapper>
    <View style={styles.grid}>
      {(['primary', 'secondary', 'outline', 'ghost', 'danger'] as const).map(variant => (
        <View key={variant} style={styles.variantSection}>
          {(['small', 'medium', 'large'] as const).map(size => (
            <Button
              key={`${variant}-${size}`}
              variant={variant}
              size={size}
              onPress={() => console.log(`${variant} ${size}`)}
              style={styles.gridButton}
            >
              {variant} {size}
            </Button>
          ))}
        </View>
      ))}
    </View>
  </StoryWrapper>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f5f5f5',
  },
  section: {
    gap: 12,
    marginBottom: 24,
  },
  grid: {
    gap: 16,
  },
  variantSection: {
    gap: 8,
  },
  gridButton: {
    marginBottom: 8,
  },
});

// Export all stories
export default {
  Default,
  Variants,
  Sizes,
  States,
  WithIcons,
  FullWidth,
  ComplexExamples,
  VariantSizeCombinations,
};
</file>

<file path="src/components/atoms/LoadingSpinner/LoadingSpinner.tsx">
/**
 * LoadingSpinner Component
 * Consistent loading indicator for all user roles
 */

import React from 'react';
import { ActivityIndicator, View, ViewStyle, TextStyle, StyleSheet } from 'react-native';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../Typography';

// LoadingSpinner Props Interface
export interface LoadingSpinnerProps {
  // Size options
  size?: 'small' | 'large' | number;
  
  // Color options
  color?: string;
  
  // Text
  message?: string;
  
  // Layout
  vertical?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// LoadingSpinner Component
const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'large',
  color,
  message,
  vertical = true,
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get spinner color
  const getSpinnerColor = (): string => {
    return color || colors.primary.main;
  };

  // Get spinner size
  const getSpinnerSize = (): 'small' | 'large' | number => {
    if (typeof size === 'number') {
      return size;
    }
    return size;
  };

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      alignItems: 'center',
      justifyContent: 'center',
      padding: theme.spacing.base.lg,
    };

    if (vertical) {
      return {
        ...baseStyle,
        flexDirection: 'column',
      };
    }

    return {
      ...baseStyle,
      flexDirection: 'row',
    };
  };

  // Get spacing styles
  const getSpacingStyles = (): TextStyle => {
    return {
      marginTop: vertical ? theme.spacing.base.sm : 0,
      marginLeft: vertical ? 0 : theme.spacing.base.sm,
    };
  };

  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="progressbar"
      accessibilityLabel={accessibilityLabel || (message ? `Loading: ${message}` : 'Loading')}
      testID={testID || 'loading-spinner'}
    >
      <ActivityIndicator
        size={getSpinnerSize()}
        color={getSpinnerColor()}
        testID={testID ? `${testID}-spinner` : 'loading-spinner-spinner'}
      />
      
      {message && (
        <Typography
          variant="body2"
          color="secondary"
          style={getSpacingStyles()}
          align="center"
          testID={testID ? `${testID}-message` : 'loading-message'}
        >
          {message}
        </Typography>
      )}
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Named export
export { LoadingSpinner };

// Export default
export default LoadingSpinner;
</file>

<file path="src/components/molecules/EmptyState/EmptyState.test.tsx">
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { EmptyState } from './EmptyState';

// Use global theme context mocks from jest.setup.js

describe('EmptyState', () => {
  it('renders correctly with title and message', () => {
    render(
      <ThemeProvider>
        <EmptyState
          title="No Data"
          message="There is no data available"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('No Data')).toBeTruthy();
    expect(screen.getByText('There is no data available')).toBeTruthy();
  });

  it('renders correctly without title', () => {
    render(
      <ThemeProvider>
        <EmptyState message="No items found" />
      </ThemeProvider>
    );
    
    expect(screen.queryByText('No Data')).toBeNull();
    expect(screen.getByText('No items found')).toBeTruthy();
  });

  it('renders with custom icon', () => {
    render(
      <ThemeProvider>
        <EmptyState
          message="No results"
          icon="search"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('No results')).toBeTruthy();
  });

  it('renders with action button', () => {
    const mockAction = jest.fn();
    
    render(
      <ThemeProvider>
        <EmptyState
          title="Empty Cart"
          message="Your cart is empty"
          actionLabel="Add Items"
          onAction={mockAction}
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('Empty Cart')).toBeTruthy();
    expect(screen.getByText('Your cart is empty')).toBeTruthy();
    expect(screen.getByText('Add Items')).toBeTruthy();
  });

  it('calls onAction when action button is pressed', () => {
    const mockAction = jest.fn();
    
    render(
      <ThemeProvider>
        <EmptyState
          message="No data"
          actionLabel="Retry"
          onAction={mockAction}
        />
      </ThemeProvider>
    );
    
    fireEvent.press(screen.getByText('Retry'));
    expect(mockAction).toHaveBeenCalled();
  });

  it('renders with different variants', () => {
    const { rerender } = render(
      <ThemeProvider>
        <EmptyState
          message="No search results"
          variant="search"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('No search results')).toBeTruthy();
    
    rerender(
      <ThemeProvider>
        <EmptyState
          message="No notifications"
          variant="notification"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('No notifications')).toBeTruthy();
  });

  it('renders in full screen mode', () => {
    render(
      <ThemeProvider>
        <EmptyState
          message="Full screen empty state"
          fullScreen={true}
        />
      </ThemeProvider>
    );
    
    expect(screen.getByText('Full screen empty state')).toBeTruthy();
  });

  it('applies custom testID', () => {
    render(
      <ThemeProvider>
        <EmptyState
          message="Test message"
          testID="custom-empty-state"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('custom-empty-state')).toBeTruthy();
    expect(screen.getByTestId('custom-empty-state-content')).toBeTruthy();
  });

  it('applies custom accessibility label', () => {
    render(
      <ThemeProvider>
        <EmptyState
          title="Custom Title"
          message="Custom message"
          accessibilityLabel="Custom accessibility label"
        />
      </ThemeProvider>
    );
    
    expect(screen.getByLabelText('Custom accessibility label')).toBeTruthy();
  });
});
</file>

<file path="src/components/molecules/ErrorMessage/ErrorMessage.tsx">
/**
 * ErrorMessage Component
 * Consistent error display for all user roles
 */

import React from 'react';
import { View, ViewStyle, StyleSheet, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';

// ErrorMessage Props Interface
export interface ErrorMessageProps {
  // Error content
  title?: string;
  message: string;
  icon?: string;
  
  // Actions
  onRetry?: () => void;
  onDismiss?: () => void;
  retryLabel?: string;
  
  // Variants
  variant?: 'error' | 'warning' | 'info';
  
  // Layout
  fullScreen?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// ErrorMessage Component
export const ErrorMessage: React.FC<ErrorMessageProps> = ({
  title,
  message,
  icon,
  onRetry,
  onDismiss,
  retryLabel = 'Try Again',
  variant = 'error',
  fullScreen = false,
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get icon name based on variant
  const getIconName = (): string => {
    if (icon) return icon;
    
    switch (variant) {
      case 'error':
        return 'close-circle';
      case 'warning':
        return 'warning';
      case 'info':
        return 'information-circle';
      default:
        return 'close-circle';
    }
  };

  // Get colors based on variant
  const getVariantColors = () => {
    switch (variant) {
      case 'error':
        return {
          iconColor: colors.error.main,
          titleColor: colors.error.main,
          backgroundColor: colors.error.light,
        };
      case 'warning':
        return {
          iconColor: colors.warning.main,
          titleColor: colors.warning.main,
          backgroundColor: colors.warning.light,
        };
      case 'info':
        return {
          iconColor: colors.primary.main,
          titleColor: colors.primary.main,
          backgroundColor: colors.primary.light,
        };
      default:
        return {
          iconColor: colors.error.main,
          titleColor: colors.error.main,
          backgroundColor: colors.error.light,
        };
    }
  };

  const variantColors = getVariantColors();

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: variantColors.backgroundColor,
      borderRadius: theme.borderRadius.md,
      padding: theme.spacing.base.lg,
      borderWidth: 1,
      borderColor: variantColors.iconColor,
    };

    if (fullScreen) {
      return {
        ...baseStyle,
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        margin: theme.spacing.base.lg,
      };
    }

    return baseStyle;
  };

  // Get action container styles
  const getActionStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      justifyContent: 'space-between',
      marginTop: theme.spacing.base.md,
      gap: theme.spacing.base.sm,
    };
  };

  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="alert"
      accessibilityLabel={accessibilityLabel || `Error: ${title || message}`}
      testID={testID}
    >
      <View style={{ flexDirection: 'row', alignItems: 'flex-start' }} testID={testID ? `${testID}-content` : 'error-content'}>
        <Icon
          name={getIconName() as keyof typeof Ionicons.glyphMap}
          size="lg"
          color={variantColors.iconColor}
          containerStyle={{ marginRight: theme.spacing.base.md, marginTop: 2 }}
        />
        
        <View style={{ flex: 1 }}>
          {title && (
            <Typography
              variant="h4"
              color={variantColors.titleColor}
              weight="semibold"
              style={{ marginBottom: theme.spacing.base.xs }}
            >
              {title}
            </Typography>
          )}
          
          <Typography
            variant="body2"
            color="secondary"
            style={{ lineHeight: 20 }}
          >
            {message}
          </Typography>
        </View>
        
        {onDismiss && (
          <TouchableOpacity
            onPress={onDismiss}
            style={{ marginLeft: theme.spacing.base.sm }}
            accessibilityRole="button"
            accessibilityLabel="Dismiss error"
          >
            <Icon
              name="close"
              size="sm"
              color={colors.text.secondary}
            />
          </TouchableOpacity>
        )}
      </View>
      
      {(onRetry || onDismiss) && (
        <View style={getActionStyles()}>
          {onDismiss && (
            <Button
              variant="outline"
              size="small"
              onPress={onDismiss}
              style={{ flex: 1 }}
            >
              Close
            </Button>
          )}
          
          {onRetry && (
            <Button
              variant="primary"
              size="small"
              onPress={onRetry}
              style={{ flex: 1 }}
            >
              {retryLabel}
            </Button>
          )}
        </View>
      )}
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Export default
export default ErrorMessage;
</file>

<file path="src/components/molecules/LogoutButton.tsx">
/**
 * LogoutButton Component
 * A reusable logout button component with confirmation alert, loading state, and variants
 * Integrates with AuthContext for sign-out functionality
 */

import React, { useState } from 'react';
import { Alert, ViewStyle } from 'react-native';
import { Button } from '../atoms/Button';
import { useAuth } from '../../context/AuthContext';

export interface LogoutButtonProps {
  variant?: 'button' | 'text' | 'icon';
  style?: ViewStyle;
  showConfirmation?: boolean;
  confirmationTitle?: string;
  confirmationMessage?: string;
  onLogoutStart?: () => void;
  onLogoutComplete?: () => void;
  onLogoutError?: (error: Error) => void;
}

export const LogoutButton: React.FC<LogoutButtonProps> = ({
  variant = 'button',
  style,
  showConfirmation = true,
  confirmationTitle = 'Konfirmasi Logout',
  confirmationMessage = 'Apakah Anda yakin ingin keluar dari aplikasi?',
  onLogoutStart,
  onLogoutComplete,
  onLogoutError,
}) => {
  const { signOut } = useAuth();
  const [loading, setLoading] = useState(false);

  const handleLogout = async () => {
    try {
      setLoading(true);
      onLogoutStart?.();
      
      await signOut();
      
      onLogoutComplete?.();
    } catch (error) {
      console.error('Logout error:', error);
      onLogoutError?.(error as Error);
      
      Alert.alert(
        'Error',
        'Terjadi kesalahan saat logout. Silakan coba lagi.',
        [{ text: 'OK' }]
      );
    } finally {
      setLoading(false);
    }
  };

  const confirmLogout = () => {
    if (showConfirmation) {
      Alert.alert(
        confirmationTitle,
        confirmationMessage,
        [
          {
            text: 'Batal',
            style: 'cancel',
          },
          {
            text: 'Logout',
            style: 'destructive',
            onPress: handleLogout,
          },
        ]
      );
    } else {
      handleLogout();
    }
  };

  // Render based on variant
  switch (variant) {
    case 'icon':
      return (
        <Button
          variant="outline"
          icon="log-out"
          iconOnly
          loading={loading}
          onPress={confirmLogout}
          style={style}
          accessibilityLabel="Logout"
          accessibilityHint="Keluar dari aplikasi"
        >
          {null}
        </Button>
      );

    case 'text':
      return (
        <Button
          variant="ghost"
          loading={loading}
          onPress={confirmLogout}
          style={style}
          accessibilityLabel="Logout"
          accessibilityHint="Keluar dari aplikasi"
        >
          Logout
        </Button>
      );

    default:
      return (
        <Button
          variant="danger"
          icon="log-out"
          iconPosition="left"
          loading={loading}
          onPress={confirmLogout}
          style={style}
          accessibilityLabel="Logout"
          accessibilityHint="Keluar dari aplikasi"
        >
          Logout
        </Button>
      );
  }
};

export default LogoutButton;
</file>

<file path="src/components/organisms/DashboardContent/index.ts">
export { DashboardContent } from './DashboardContent';
export type { DashboardContentProps } from './DashboardContent';
export { DashboardContent as default } from './DashboardContent';
</file>

<file path="src/components/organisms/Header/Header.stories.tsx">
/**
 * Header Component Stories
 * Storybook stories demonstrating all Header component variants and use cases
 */

import React from 'react';
import { View } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { Header } from './Header';
import { Typography } from '../../atoms/Typography';

const meta: Meta<typeof Header> = {
  title: 'Organisms/Header',
  component: Header,
  parameters: {
    docs: {
      description: {
        component: 'A consistent page header component with title positioning, action buttons, and notification icons.',
      },
    },
  },
  argTypes: {
    title: {
      control: { type: 'text' },
      description: 'Header title',
    },
    subtitle: {
      control: { type: 'text' },
      description: 'Optional subtitle',
    },
    variant: {
      control: { type: 'select' },
      options: ['default', 'transparent', 'elevated'],
      description: 'Visual variant',
    },
    centerTitle: {
      control: { type: 'boolean' },
      description: 'Whether to center the title',
    },
    showStatusBar: {
      control: { type: 'boolean' },
      description: 'Whether to show status bar',
    },
  },
};

export default meta;
type Story = StoryObj<typeof Header>;

// Basic header
export const Default: Story = {
  args: {
    title: 'Dashboard',
  },
};

// Header with subtitle
export const WithSubtitle: Story = {
  args: {
    title: 'Student Dashboard',
    subtitle: 'Welcome back, Ahmed',
  },
};

// Header with back button
export const WithBackButton: Story = {
  args: {
    title: 'Assignment Details',
    leftAction: {
      icon: 'arrow-back',
      onPress: () => alert('Back pressed'),
      accessibilityLabel: 'Go back',
    },
  },
};

// Header with actions
export const WithActions: Story = {
  args: {
    title: 'Messages',
    rightActions: [
      {
        icon: 'search',
        onPress: () => alert('Search pressed'),
        accessibilityLabel: 'Search messages',
      },
      {
        icon: 'add',
        onPress: () => alert('Add pressed'),
        accessibilityLabel: 'New message',
      },
    ],
  },
};

// Header with notifications
export const WithNotifications: Story = {
  args: {
    title: 'Dashboard',
    rightActions: [
      {
        icon: 'notifications',
        onPress: () => alert('Notifications pressed'),
        badge: 3,
        accessibilityLabel: 'Notifications',
        accessibilityHint: '3 unread notifications',
      },
      {
        icon: 'person-circle',
        onPress: () => alert('Profile pressed'),
        accessibilityLabel: 'Profile',
      },
    ],
  },
};

// Different variants
export const Variants: Story = {
  render: () => (
    <View style={{ gap: 20 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Default Variant
        </Typography>
        <Header
          title="Default Header"
          subtitle="Standard background"
          variant="default"
          rightActions={[
            {
              icon: 'settings',
              onPress: () => alert('Settings'),
            },
          ]}
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Transparent Variant
        </Typography>
        <Header
          title="Transparent Header"
          subtitle="No background"
          variant="transparent"
          rightActions={[
            {
              icon: 'settings',
              onPress: () => alert('Settings'),
            },
          ]}
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Elevated Variant
        </Typography>
        <Header
          title="Elevated Header"
          subtitle="With shadow"
          variant="elevated"
          rightActions={[
            {
              icon: 'settings',
              onPress: () => alert('Settings'),
            },
          ]}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different header variants for various contexts.',
      },
    },
  },
};

// Title alignment options
export const TitleAlignment: Story = {
  render: () => (
    <View style={{ gap: 20 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Centered Title (Default)
        </Typography>
        <Header
          title="Centered Title"
          subtitle="Title is centered"
          centerTitle={true}
          leftAction={{
            icon: 'arrow-back',
            onPress: () => alert('Back'),
          }}
          rightActions={[
            {
              icon: 'ellipsis-vertical',
              onPress: () => alert('More'),
            },
          ]}
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Left-Aligned Title
        </Typography>
        <Header
          title="Left-Aligned Title"
          subtitle="Title is left-aligned"
          centerTitle={false}
          leftAction={{
            icon: 'arrow-back',
            onPress: () => alert('Back'),
          }}
          rightActions={[
            {
              icon: 'ellipsis-vertical',
              onPress: () => alert('More'),
            },
          ]}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Different title alignment options.',
      },
    },
  },
};

// Student dashboard header
export const StudentDashboard: Story = {
  render: () => (
    <Header
      title="Student Dashboard"
      subtitle="Welcome back, Ahmed Al-Rashid"
      variant="elevated"
      rightActions={[
        {
          icon: 'notifications',
          onPress: () => alert('View notifications'),
          badge: 2,
          accessibilityLabel: 'Notifications',
          accessibilityHint: '2 unread notifications',
        },
        {
          icon: 'person-circle',
          onPress: () => alert('View profile'),
          accessibilityLabel: 'Profile menu',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for student dashboard.',
      },
    },
  },
};

// Teacher dashboard header
export const TeacherDashboard: Story = {
  render: () => (
    <Header
      title="Teacher Dashboard"
      subtitle="Grade 10A - Mathematics"
      variant="elevated"
      rightActions={[
        {
          icon: 'add-circle',
          onPress: () => alert('Quick add'),
          accessibilityLabel: 'Quick add',
          accessibilityHint: 'Add assignment or announcement',
        },
        {
          icon: 'notifications',
          onPress: () => alert('View notifications'),
          badge: 5,
          accessibilityLabel: 'Notifications',
          accessibilityHint: '5 unread notifications',
        },
        {
          icon: 'person-circle',
          onPress: () => alert('View profile'),
          accessibilityLabel: 'Profile menu',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for teacher dashboard.',
      },
    },
  },
};

// Parent dashboard header
export const ParentDashboard: Story = {
  render: () => (
    <Header
      title="Parent Dashboard"
      subtitle="Ahmed Al-Rashid - Grade 10A"
      variant="elevated"
      rightActions={[
        {
          icon: 'call',
          onPress: () => alert('Emergency contact'),
          accessibilityLabel: 'Emergency contact',
          accessibilityHint: 'Call school for emergency',
        },
        {
          icon: 'notifications',
          onPress: () => alert('View notifications'),
          badge: 1,
          accessibilityLabel: 'Notifications',
          accessibilityHint: '1 unread notification',
        },
        {
          icon: 'person-circle',
          onPress: () => alert('View profile'),
          accessibilityLabel: 'Profile menu',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for parent dashboard.',
      },
    },
  },
};

// Management dashboard header
export const ManagementDashboard: Story = {
  render: () => (
    <Header
      title="Management Dashboard"
      subtitle="Al-Noor Islamic School"
      variant="elevated"
      rightActions={[
        {
          icon: 'analytics',
          onPress: () => alert('View analytics'),
          accessibilityLabel: 'Analytics',
          accessibilityHint: 'View school analytics',
        },
        {
          icon: 'warning',
          onPress: () => alert('View incidents'),
          badge: 2,
          badgeColor: '#ff9800',
          accessibilityLabel: 'Incidents',
          accessibilityHint: '2 pending incidents',
        },
        {
          icon: 'notifications',
          onPress: () => alert('View notifications'),
          badge: 8,
          accessibilityLabel: 'Notifications',
          accessibilityHint: '8 unread notifications',
        },
        {
          icon: 'person-circle',
          onPress: () => alert('View profile'),
          accessibilityLabel: 'Profile menu',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for management dashboard.',
      },
    },
  },
};

// Detail page header
export const DetailPageHeader: Story = {
  render: () => (
    <Header
      title="Assignment Details"
      subtitle="Mathematics - Chapter 5 Exercises"
      leftAction={{
        icon: 'arrow-back',
        onPress: () => alert('Go back'),
        accessibilityLabel: 'Go back',
        accessibilityHint: 'Return to assignments list',
      }}
      rightActions={[
        {
          icon: 'share',
          onPress: () => alert('Share assignment'),
          accessibilityLabel: 'Share',
          accessibilityHint: 'Share assignment details',
        },
        {
          icon: 'bookmark',
          onPress: () => alert('Bookmark assignment'),
          accessibilityLabel: 'Bookmark',
          accessibilityHint: 'Save assignment for later',
        },
        {
          icon: 'ellipsis-vertical',
          onPress: () => alert('More options'),
          accessibilityLabel: 'More options',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for detail pages with back navigation.',
      },
    },
  },
};

// Search header
export const SearchHeader: Story = {
  render: () => (
    <Header
      title="Search Students"
      leftAction={{
        icon: 'arrow-back',
        onPress: () => alert('Cancel search'),
        accessibilityLabel: 'Cancel search',
      }}
      rightActions={[
        {
          icon: 'filter',
          onPress: () => alert('Filter results'),
          accessibilityLabel: 'Filter',
          accessibilityHint: 'Filter search results',
        },
      ]}
      centerTitle={false}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Header example for search screens.',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  render: () => (
    <View style={{ gap: 20 }}>
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Custom Background Color
        </Typography>
        <Header
          title="Custom Header"
          subtitle="Custom background"
          backgroundColor="#2196f3"
          textColor="#ffffff"
          rightActions={[
            {
              icon: 'settings',
              onPress: () => alert('Settings'),
            },
          ]}
        />
      </View>
      
      <View>
        <Typography variant="body2" style={{ marginBottom: 8, paddingHorizontal: 16 }}>
          Dark Theme Header
        </Typography>
        <Header
          title="Dark Header"
          subtitle="Dark theme styling"
          backgroundColor="#1a1a1a"
          textColor="#ffffff"
          rightActions={[
            {
              icon: 'notifications',
              onPress: () => alert('Notifications'),
              badge: 3,
              badgeColor: '#ff4444',
            },
          ]}
        />
      </View>
    </View>
  ),
  parameters: {
    docs: {
      description: {
        story: 'Headers with custom colors and theming.',
      },
    },
  },
};

// Badge examples
export const BadgeExamples: Story = {
  render: () => (
    <Header
      title="Badge Examples"
      subtitle="Different badge configurations"
      rightActions={[
        {
          icon: 'mail',
          onPress: () => alert('Messages'),
          badge: 1,
          accessibilityLabel: 'Messages',
          accessibilityHint: '1 unread message',
        },
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 25,
          accessibilityLabel: 'Notifications',
          accessibilityHint: '25 unread notifications',
        },
        {
          icon: 'warning',
          onPress: () => alert('Alerts'),
          badge: 150,
          badgeColor: '#ff9800',
          accessibilityLabel: 'Alerts',
          accessibilityHint: 'Many unread alerts',
        },
      ]}
    />
  ),
  parameters: {
    docs: {
      description: {
        story: 'Examples of different badge counts and colors.',
      },
    },
  },
};
</file>

<file path="src/components/organisms/Modal/Modal.tsx">
/**
 * Modal Component
 * Consistent overlay component with header structure, close buttons, and content layouts
 */

import React from 'react';
import {
  Modal as RNModal,
  View,
  TouchableOpacity,
  TouchableWithoutFeedback,
  ViewStyle,
  StyleSheet,
  Animated,
  Dimensions,
  StatusBar,
  Platform,
  KeyboardAvoidingView,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';

// Modal size type
export type ModalSize = 'small' | 'medium' | 'large' | 'fullscreen';

// Modal action interface
export interface ModalAction {
  label: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  disabled?: boolean;
  loading?: boolean;
  testID?: string;
  icon?: keyof typeof Ionicons.glyphMap;
}

// Modal Props Interface
export interface ModalProps {
  // Visibility
  visible: boolean;
  onClose: () => void;
  
  // Content
  title?: string;
  subtitle?: string;
  children: React.ReactNode;
  
  // Actions
  actions?: ModalAction[];
  showCloseButton?: boolean;
  closeOnBackdrop?: boolean;
  closeOnBackButton?: boolean;
  
  // Layout
  size?: ModalSize;
  scrollable?: boolean;
  
  // Animation
  animationType?: 'slide' | 'fade' | 'none';
  animationDuration?: number;
  
  // Styling
  backgroundColor?: string;
  backdropColor?: string;
  backdropOpacity?: number;
  
  // Keyboard
  keyboardAvoidingBehavior?: 'height' | 'position' | 'padding';
  
  // Custom styling
  style?: ViewStyle;
  contentStyle?: ViewStyle;
  headerStyle?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// Modal Component
export const Modal: React.FC<ModalProps> = ({
  visible,
  onClose,
  title,
  subtitle,
  children,
  actions = [],
  showCloseButton = true,
  closeOnBackdrop = true,
  closeOnBackButton = true,
  size = 'medium',
  scrollable = true,
  animationType = 'slide',
  animationDuration = 300,
  backgroundColor,
  backdropColor,
  backdropOpacity = 0.5,
  keyboardAvoidingBehavior = 'padding',
  style,
  contentStyle,
  headerStyle,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const screenDimensions = Dimensions.get('window');
  
  // Animation values
  const fadeAnim = React.useRef(new Animated.Value(0)).current;
  const slideAnim = React.useRef(new Animated.Value(screenDimensions.height)).current;

  // Handle modal visibility changes
  React.useEffect(() => {
    if (visible) {
      // Show modal
      if (animationType === 'fade') {
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: animationDuration,
          useNativeDriver: true,
        }).start();
      } else if (animationType === 'slide') {
        Animated.timing(slideAnim, {
          toValue: 0,
          duration: animationDuration,
          useNativeDriver: true,
        }).start();
      }
    } else {
      // Hide modal
      if (animationType === 'fade') {
        Animated.timing(fadeAnim, {
          toValue: 0,
          duration: animationDuration,
          useNativeDriver: true,
        }).start();
      } else if (animationType === 'slide') {
        Animated.timing(slideAnim, {
          toValue: screenDimensions.height,
          duration: animationDuration,
          useNativeDriver: true,
        }).start();
      }
    }
  }, [visible, animationType, animationDuration, fadeAnim, slideAnim, screenDimensions.height]);

  // Get modal dimensions based on size
  const getModalDimensions = () => {
    const { width, height } = screenDimensions;
    
    switch (size) {
      case 'small':
        return {
          width: Math.min(400, width * 0.9),
          maxHeight: height * 0.6,
        };
      case 'medium':
        return {
          width: Math.min(500, width * 0.9),
          maxHeight: height * 0.8,
        };
      case 'large':
        return {
          width: Math.min(700, width * 0.95),
          maxHeight: height * 0.9,
        };
      case 'fullscreen':
        return {
          width: width,
          height: height,
        };
      default:
        return {
          width: Math.min(500, width * 0.9),
          maxHeight: height * 0.8,
        };
    }
  };

  // Get backdrop styles
  const getBackdropStyles = (): ViewStyle => {
    return {
      flex: 1,
      backgroundColor: backdropColor || `rgba(0, 0, 0, ${backdropOpacity})`,
      justifyContent: size === 'fullscreen' ? 'flex-start' : 'center',
      alignItems: 'center',
      padding: size === 'fullscreen' ? 0 : theme.spacing.base.md,
    };
  };

  // Get modal container styles
  const getModalContainerStyles = (): ViewStyle => {
    const dimensions = getModalDimensions();
    
    const baseStyle: ViewStyle = {
      backgroundColor: backgroundColor || colors.surface.primary,
      borderRadius: size === 'fullscreen' ? 0 : theme.borderRadius.xl,
      ...theme.shadows.modal,
      overflow: 'hidden',
    };

    if (size === 'fullscreen') {
      return {
        ...baseStyle,
        width: dimensions.width,
        height: dimensions.height,
      };
    }

    return {
      ...baseStyle,
      width: dimensions.width,
      maxHeight: dimensions.maxHeight,
    };
  };

  // Get header styles
  const getHeaderStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: theme.spacing.base.lg,
      paddingVertical: theme.spacing.base.md,
      borderBottomWidth: 1,
      borderBottomColor: colors.border.primary,
      minHeight: 60,
    };
  };

  // Get content styles
  const getContentStyles = (): ViewStyle => {
    return {
      flex: 1,
      padding: theme.spacing.base.lg,
    };
  };

  // Get actions container styles
  const getActionsStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      alignItems: 'center',
      paddingHorizontal: theme.spacing.base.lg,
      paddingVertical: theme.spacing.base.md,
      borderTopWidth: actions.length > 0 ? 1 : 0,
      borderTopColor: colors.border.primary,
      gap: theme.spacing.base.sm,
    };
  };

  // Handle backdrop press
  const handleBackdropPress = () => {
    if (closeOnBackdrop) {
      onClose();
    }
  };

  // Render header
  const renderHeader = () => {
    if (!title && !showCloseButton) return null;
    
    return (
      <View style={[getHeaderStyles(), headerStyle]}>
        <View style={{ flex: 1 }}>
          {title && (
            <Typography
              variant="h4"
              color="primary"
              weight="semibold"
              numberOfLines={1}
              ellipsizeMode="tail"
            >
              {title}
            </Typography>
          )}
          
          {subtitle && (
            <Typography
              variant="body2"
              color="secondary"
              numberOfLines={1}
              ellipsizeMode="tail"
              style={{ marginTop: 2 }}
            >
              {subtitle}
            </Typography>
          )}
        </View>
        
        {showCloseButton && (
          <TouchableOpacity
            style={styles.closeButton}
            onPress={onClose}
            accessibilityRole="button"
            accessibilityLabel="Close modal"
            accessibilityHint="Closes the modal dialog"
            testID="modal-close-button"
            activeOpacity={0.7}
          >
            <Icon
              name="close"
              size="md"
              color={colors.text.secondary}
            />
          </TouchableOpacity>
        )}
      </View>
    );
  };

  // Render actions
  const renderActions = () => {
    if (actions.length === 0) return null;
    
    return (
      <View style={getActionsStyles()}>
        {actions.map((action, index) => (
          <Button
            key={index}
            variant={action.variant || 'primary'}
            size="medium"
            onPress={action.onPress}
            disabled={action.disabled}
            loading={action.loading}
            testID={action.testID}
          >
            {action.label}
          </Button>
        ))}
      </View>
    );
  };

  // Render modal content
  const renderModalContent = () => {
    const ContentWrapper = scrollable ? 
      ({ children: wrapperChildren }: { children: React.ReactNode }) => (
        <View style={{ flex: 1 }}>
          {wrapperChildren}
        </View>
      ) : 
      ({ children: wrapperChildren }: { children: React.ReactNode }) => (
        <View style={{ flex: 1 }}>
          {wrapperChildren}
        </View>
      );

    let animatedStyle = {};
    if (animationType === 'fade') {
      animatedStyle = { opacity: fadeAnim };
    } else if (animationType === 'slide') {
      animatedStyle = { transform: [{ translateY: slideAnim }] };
    }

    return (
      <Animated.View style={[getModalContainerStyles(), animatedStyle, style]}>
        {renderHeader()}
        
        <ContentWrapper>
          <View style={[getContentStyles(), contentStyle]}>
            {children}
          </View>
        </ContentWrapper>
        
        {renderActions()}
      </Animated.View>
    );
  };

  // Render keyboard avoiding view wrapper
  const renderWithKeyboardAvoidance = (content: React.ReactNode) => {
    if (Platform.OS === 'ios' && keyboardAvoidingBehavior) {
      return (
        <KeyboardAvoidingView
          style={{ flex: 1 }}
          behavior={keyboardAvoidingBehavior}
          keyboardVerticalOffset={StatusBar.currentHeight || 0}
        >
          {content}
        </KeyboardAvoidingView>
      );
    }
    
    return content;
  };

  return (
    <RNModal
      visible={visible}
      transparent
      animationType="none" // We handle animations manually
      onRequestClose={closeOnBackButton ? onClose : undefined}
      statusBarTranslucent
      accessibilityViewIsModal
      accessibilityLabel={accessibilityLabel || title || 'Modal dialog'}
      testID={testID}
    >
      {renderWithKeyboardAvoidance(
        <TouchableWithoutFeedback onPress={handleBackdropPress}>
          <View style={getBackdropStyles()}>
            <TouchableWithoutFeedback>
              {renderModalContent()}
            </TouchableWithoutFeedback>
          </View>
        </TouchableWithoutFeedback>
      )}
    </RNModal>
  );
};

// Internal styles
const styles = StyleSheet.create({
  closeButton: {
    width: 40,
    height: 40,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 20,
    marginLeft: 8,
  },
});

// Export default
export default Modal;
</file>

<file path="src/components/organisms/NavigationPanel/index.ts">
/**
 * NavigationPanel Component Export
 * Exports the NavigationPanel component and its related types
 */

export { NavigationPanel, NavigationPanel as default } from './NavigationPanel';
export type { NavigationPanelProps, PanelNotification } from './NavigationPanel';
</file>

<file path="src/components/organisms/StudentCommunicationModal.tsx">
import React from 'react';
import { View } from 'react-native';
import { Card } from '../../../src/components/molecules/Card';
import { ListItem } from '../../../src/components/molecules/ListItem';
import { Typography } from '../../../src/components/atoms/Typography';
import { Icon } from '../../../src/components/atoms/Icon';

export default function CommunicationModal() {
  return (
    <View>
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Guru
        </Typography>
        <Card variant="default" padding="none">
          <ListItem
            title="Ustadz Ahmad"
            subtitle="Guru Tahfidz"
            leftComponent={
              <Icon
                name="person"
                size="md"
                background={true}
                backgroundColor="#005e7a"
                color="#ffffff"
              />
            }
            rightIcon="chatbubble-outline"
            onPress={() => alert('Fitur chat dengan guru akan segera hadir!')}
            testID="contact-ustadz-ahmad"
          />
          <ListItem
            title="Ustadzah Fatimah"
            subtitle="Guru Bahasa Arab"
            leftComponent={
              <Icon
                name="person"
                size="md"
                background={true}
                backgroundColor="#005e7a"
                color="#ffffff"
              />
            }
            rightIcon="chatbubble-outline"
            onPress={() => alert('Fitur chat dengan guru akan segera hadir!')}
            showDivider={true}
            testID="contact-ustadzah-fatimah"
          />
        </Card>
      </View>

      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Orang Tua
        </Typography>
        <Card variant="default" padding="none">
          <ListItem
            title="Orang Tua"
            subtitle="Ayah & Ibu"
            leftComponent={
              <Icon
                name="people"
                size="md"
                background={true}
                backgroundColor="#f0c75e"
                color="#ffffff"
              />
            }
            rightIcon="chatbubble-outline"
            onPress={() => alert('Fitur chat dengan orang tua akan segera hadir!')}
            testID="contact-parents"
          />
        </Card>
      </View>

      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Pesan Terbaru
        </Typography>
        <Card variant="default" padding="medium" style={{ marginBottom: 10 }}>
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
            <Typography variant="body1" color="primary" weight="bold">
              Ustadz Ahmad
            </Typography>
            <Typography variant="body2" color="tertiary">
              10:30
            </Typography>
          </View>
          <Typography variant="body2" color="secondary">
            Jangan lupa persiapkan hafalan untuk besok ya
          </Typography>
        </Card>
        <Card variant="default" padding="medium">
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
            <Typography variant="body1" color="primary" weight="bold">
              Ibu
            </Typography>
            <Typography variant="body2" color="tertiary">
              Kemarin
            </Typography>
          </View>
          <Typography variant="body2" color="secondary">
            Bagaimana kabarmu hari ini, nak?
          </Typography>
        </Card>
      </View>
    </View>
  );
}
</file>

<file path="src/components/organisms/StudentIncidentReportModal.tsx">
import React from 'react';
import { View } from 'react-native';
import { Card } from '../../../src/components/molecules/Card';
import { ListItem } from '../../../src/components/molecules/ListItem';
import { Typography } from '../../../src/components/atoms/Typography';

import { Icon } from '../../../src/components/atoms/Icon';

export default function IncidentReportModal() {
  return (
    <View>
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: 15 }}>
          Laporkan Masalah
        </Typography>
        <Typography variant="body2" color="secondary" style={{ marginBottom: 15, lineHeight: 20 }}>
          Gunakan fitur ini untuk melaporkan masalah keamanan, kesejahteraan, atau perilaku yang mengkhawatirkan.
          Semua laporan akan ditangani dengan serius dan dijaga kerahasiaannya.
        </Typography>
      </View>

      <Card variant="default" padding="none" style={{ marginBottom: 20 }}>
        <ListItem
          title="Perilaku Bullying"
          subtitle="Laporkan intimidasi atau pelecehan"
          leftComponent={
            <Icon
              name="warning"
              size="md"
              background={true}
              backgroundColor="#e74c3c"
              color="#ffffff"
            />
          }
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur laporan bullying akan segera hadir!')}
          testID="report-bullying"
        />
        <ListItem
          title="Masalah Kesehatan"
          subtitle="Laporkan masalah kesehatan atau cedera"
          leftComponent={
            <Icon
              name="medkit"
              size="md"
              background={true}
              backgroundColor="#f39c12"
              color="#ffffff"
            />
          }
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur laporan kesehatan akan segera hadir!')}
          showDivider={true}
          testID="report-health"
        />
        <ListItem
          title="Fasilitas & Infrastruktur"
          subtitle="Laporkan kerusakan atau masalah fasilitas"
          leftComponent={
            <Icon
              name="build"
              size="md"
              background={true}
              backgroundColor="#3498db"
              color="#ffffff"
            />
          }
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur laporan fasilitas akan segera hadir!')}
          showDivider={true}
          testID="report-facility"
        />
        <ListItem
          title="Masalah Lainnya"
          subtitle="Laporkan masalah lain yang perlu perhatian"
          leftComponent={
            <Icon
              name="chatbubbles"
              size="md"
              background={true}
              backgroundColor="#9b59b6"
              color="#ffffff"
            />
          }
          rightIcon="chevron-forward"
          onPress={() => alert('Fitur laporan lainnya akan segera hadir!')}
          showDivider={true}
          testID="report-other"
        />
      </Card>

      <Card variant="default" padding="medium" style={{ backgroundColor: '#ffebee' }}>
        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
          <Icon name="call" size="md" color="#e74c3c" />
          <Typography variant="body2" color="#e74c3c" style={{ marginLeft: 10, flex: 1 }}>
            Untuk keadaan darurat, hubungi Pembimbing Asrama di ext. 123
          </Typography>
        </View>
      </Card>
    </View>
  );
}
</file>

<file path="src/components/organisms/SubjectManager.tsx">
import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity, TextInput, Alert, ActivityIndicator } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { SubjectService, ClassSubject, Subject } from '@/src/services/subjectService';

interface SubjectManagerProps {
  classId: number;
  onSubjectCountChange?: (count: number) => void;
}

export default function SubjectManager({ classId, onSubjectCountChange }: SubjectManagerProps) {
  const [subjects, setSubjects] = useState<ClassSubject[]>([]);
  const [availableSubjects, setAvailableSubjects] = useState<Subject[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newSubjectName, setNewSubjectName] = useState('');
  const [newSubjectCode, setNewSubjectCode] = useState('');
  const [newGradingScale, setNewGradingScale] = useState<'points' | 'percentage' | 'standards'>('percentage');
  const [newStandardsAlignment, setNewStandardsAlignment] = useState('');
  const [editingSubject, setEditingSubject] = useState<ClassSubject | null>(null);

  const fetchSubjects = useCallback(async () => {
    try {
      setLoading(true);
      const subjects = await SubjectService.getClassSubjects(classId);
      setSubjects(subjects);
      onSubjectCountChange?.(subjects.length || 0);
    } catch (error: unknown) {
      console.error('Error fetching subjects:', error);
    } finally {
      setLoading(false);
    }
  }, [classId, onSubjectCountChange]);

  const fetchAvailableSubjects = useCallback(async () => {
    try {
      const subjects = await SubjectService.getAvailableSubjects();
      setAvailableSubjects(subjects);
    } catch (error: unknown) {
      console.error('Error fetching available subjects:', error);
    }
  }, []);

  useEffect(() => {
    fetchSubjects();
    fetchAvailableSubjects();
  }, [fetchSubjects, fetchAvailableSubjects]);

  const handleAddSubject = async () => {
    if (!newSubjectName.trim() || !newSubjectCode.trim()) {
      Alert.alert('Error', 'Nama dan kode mata pelajaran wajib diisi');
      return;
    }

    try {
      await SubjectService.addSubjectToClass(classId, {
        subject_name: newSubjectName,
        subject_code: newSubjectCode,
        grading_scale: newGradingScale,
        standards_alignment: newStandardsAlignment,
      });

      Alert.alert('Success', 'Mata pelajaran berhasil ditambahkan');
      setNewSubjectName('');
      setNewSubjectCode('');
      setNewGradingScale('percentage');
      setNewStandardsAlignment('');
      setShowAddModal(false);
      fetchSubjects();
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Gagal menambahkan mata pelajaran';
      Alert.alert('Error', errorMessage);
    }
  };

  const handleUpdateSubject = async () => {
    if (!editingSubject || !newSubjectName.trim() || !newSubjectCode.trim()) {
      Alert.alert('Error', 'Nama dan kode mata pelajaran wajib diisi');
      return;
    }

    try {
      await SubjectService.updateClassSubject(editingSubject.id, {
        subject_name: newSubjectName,
        subject_code: newSubjectCode,
        grading_scale: newGradingScale,
        standards_alignment: newStandardsAlignment,
      });

      Alert.alert('Success', 'Mata pelajaran berhasil diperbarui');
      setEditingSubject(null);
      fetchSubjects();
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Gagal memperbarui mata pelajaran';
      Alert.alert('Error', errorMessage);
    }
  };

  const handleDeleteSubject = async (subjectId: number) => {
    Alert.alert(
      'Hapus Mata Pelajaran',
      'Apakah Anda yakin ingin menghapus mata pelajaran ini?',
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Hapus',
          style: 'destructive',
          onPress: async () => {
            try {
              await SubjectService.removeSubjectFromClass(subjectId);
              Alert.alert('Success', 'Mata pelajaran berhasil dihapus');
              fetchSubjects();
            } catch (error: unknown) {
              const errorMessage = error instanceof Error ? error.message : 'Gagal menghapus mata pelajaran';
              Alert.alert('Error', errorMessage);
            }
          },
        },
      ]
    );
  };

  const handleAddFromAvailable = (availableSubject: Subject) => {
    setNewSubjectName(availableSubject.subject_name);
    setNewSubjectCode(availableSubject.subject_code || '');
    setNewGradingScale(availableSubject.grading_scale);
    setShowAddModal(true);
  };

  const handleEditSubject = (subject: ClassSubject) => {
    setEditingSubject(subject);
    setNewSubjectName(subject.subject_name);
    setNewSubjectCode(subject.subject_code || '');
    setNewGradingScale(subject.grading_scale);
    setNewStandardsAlignment(subject.standards_alignment || '');
  };

  const renderSubjectItem = ({ item }: { item: ClassSubject }) => (
    <View style={styles.subjectItem}>
      <View style={styles.subjectInfo}>
        <Text style={styles.subjectName}>{item.subject_name}</Text>
        <Text style={styles.subjectCode}>{item.subject_code || 'N/A'}</Text>
        <Text style={styles.subjectDetails}>{`Skala: ${item.grading_scale}`}</Text>
        {item.standards_alignment && (
          <Text style={styles.subjectDetails}>{`Standar: ${item.standards_alignment}`}</Text>
        )}
      </View>
      <View style={styles.subjectActions}>
        <TouchableOpacity
          style={styles.actionButton}
          onPress={() => handleEditSubject(item)}
        >
          <Ionicons name="create-outline" size={18} color="#005e7a" />
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.actionButton, styles.deleteButton]}
          onPress={() => handleDeleteSubject(item.id)}
        >
          <Ionicons name="trash-outline" size={18} color="#ff3b30" />
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderEmptyState = () => (
    <View style={styles.emptyContainer}>
      <Ionicons name="book-outline" size={48} color="#666666" />
      <Text style={styles.emptyTitle}>Belum ada mata pelajaran</Text>
      <Text style={styles.emptyDescription}>
        Tambahkan mata pelajaran untuk kelas ini
      </Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Mata Pelajaran ({subjects.length})</Text>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => setShowAddModal(true)}
        >
          <Ionicons name="add" size={20} color="#ffffff" />
          <Text style={styles.addButtonText}>Tambah</Text>
        </TouchableOpacity>
      </View>

      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#005e7a" />
        </View>
      ) : (
        <FlatList
          data={subjects}
          renderItem={renderSubjectItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={[
            styles.listContainer,
            subjects.length === 0 && styles.emptyListContainer,
          ]}
          showsVerticalScrollIndicator={false}
          ListEmptyComponent={renderEmptyState}
        />
      )}

      {/* Add/Edit Subject Modal */}
      {(showAddModal || editingSubject) && (
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {editingSubject ? 'Edit Mata Pelajaran' : 'Tambah Mata Pelajaran'}
            </Text>
            
            <TextInput
              style={styles.input}
              value={newSubjectName}
              onChangeText={setNewSubjectName}
              placeholder="Nama Mata Pelajaran"
            />
            
            <TextInput
              style={styles.input}
              value={newSubjectCode}
              onChangeText={setNewSubjectCode}
              placeholder="Kode Mata Pelajaran"
            />
            
            <View style={styles.pickerContainer}>
              <Text style={styles.pickerLabel}>Skala Penilaian:</Text>
              <TouchableOpacity
                style={[styles.pickerOption, newGradingScale === 'percentage' && styles.pickerSelected]}
                onPress={() => setNewGradingScale('percentage')}
              >
                <Text style={[styles.pickerText, newGradingScale === 'percentage' && styles.pickerTextSelected]}>Persentase</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.pickerOption, newGradingScale === 'points' && styles.pickerSelected]}
                onPress={() => setNewGradingScale('points')}
              >
                <Text style={[styles.pickerText, newGradingScale === 'points' && styles.pickerTextSelected]}>Poin</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.pickerOption, newGradingScale === 'standards' && styles.pickerSelected]}
                onPress={() => setNewGradingScale('standards')}
              >
                <Text style={[styles.pickerText, newGradingScale === 'standards' && styles.pickerTextSelected]}>Standar</Text>
              </TouchableOpacity>
            </View>
            
            <TextInput
              style={styles.input}
              value={newStandardsAlignment}
              onChangeText={setNewStandardsAlignment}
              placeholder="Standar Penilaian (opsional)"
            />
            
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => {
                  setShowAddModal(false);
                  setEditingSubject(null);
                  setNewSubjectName('');
                  setNewSubjectCode('');
                  setNewGradingScale('percentage');
                  setNewStandardsAlignment('');
                }}
              >
                <Text style={styles.cancelButtonText}>Batal</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.saveButton}
                onPress={editingSubject ? handleUpdateSubject : handleAddSubject}
              >
                <Text style={styles.saveButtonText}>{editingSubject ? 'Update' : 'Simpan'}</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      )}

      {/* Available Subjects */}
      {!showAddModal && !editingSubject && availableSubjects.length > 0 && (
        <View style={styles.availableContainer}>
          <Text style={styles.availableTitle}>Mata Pelajaran Tersedia</Text>
          <FlatList
            data={availableSubjects}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={styles.availableItem}
                onPress={() => handleAddFromAvailable(item)}
              >
                <Text style={styles.availableName}>{item.subject_name}</Text>
                <Text style={styles.availableCode}>{item.subject_code || 'N/A'}</Text>
              </TouchableOpacity>
            )}
            keyExtractor={(item) => item.id.toString()}
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.availableList}
          />
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#005e7a',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  addButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
    marginLeft: 4,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  listContainer: {
    padding: 16,
  },
  emptyListContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 12,
  },
  emptyDescription: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginTop: 8,
  },
  subjectItem: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  subjectInfo: {
    flex: 1,
  },
  subjectName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
  },
  subjectCode: {
    fontSize: 14,
    color: '#005e7a',
    fontWeight: '600',
  },
  subjectDetails: {
    fontSize: 12,
    color: '#666666',
    marginTop: 4,
  },
  subjectActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    padding: 8,
    borderRadius: 4,
  },
  deleteButton: {
    backgroundColor: '#ff3b30',
  },
  modalContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 16,
  },
  input: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
    fontSize: 16,
  },
  pickerContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  pickerLabel: {
    fontSize: 16,
    color: '#333333',
    marginRight: 12,
  },
  pickerOption: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    marginRight: 8,
  },
  pickerSelected: {
    backgroundColor: '#005e7a',
    borderColor: '#005e7a',
  },
  pickerText: {
    fontSize: 14,
    color: '#333333',
  },
  pickerTextSelected: {
    color: '#ffffff',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  cancelButton: {
    flex: 1,
    padding: 12,
    alignItems: 'center',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    marginRight: 8,
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  saveButton: {
    flex: 1,
    padding: 12,
    alignItems: 'center',
    backgroundColor: '#005e7a',
    borderRadius: 8,
    marginLeft: 8,
  },
  saveButtonText: {
    fontSize: 16,
    color: '#ffffff',
    fontWeight: 'bold',
  },
  availableContainer: {
    backgroundColor: '#ffffff',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  availableTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  availableList: {
    paddingRight: 16,
  },
  availableItem: {
    backgroundColor: '#f0f8ff',
    padding: 12,
    borderRadius: 8,
    marginRight: 8,
    minWidth: 100,
  },
  availableName: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#005e7a',
  },
  availableCode: {
    fontSize: 12,
    color: '#666666',
  },
});
</file>

<file path="src/components/organisms/TeacherProfileView.tsx">
/**
 * TeacherProfileView Component
 * Profile view component for teachers with design system integration
 * Replaces hardcoded styles with design tokens and atomic components
 */

import React from 'react';
import { View, ScrollView, TouchableOpacity, StyleSheet } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../context/ThemeContext';
import { Typography } from '../atoms/Typography';
import { Card } from '../molecules/Card';
import LogoutButton from '../molecules/LogoutButton';

interface Profile {
  full_name?: string;
  role?: string;
}

interface ProfileViewProps {
  profile?: Profile;
  loading: boolean;
  schoolName: string;
}

export default function TeacherProfileView({ profile, loading, schoolName }: ProfileViewProps) {
  const { theme } = useTheme();
  const colors = useColors();

  if (loading) {
    return (
      <ScrollView style={[styles.contentContainer, { backgroundColor: colors.background.primary }]}>
        <Card style={styles.profileHeader}>
          <Ionicons name="person-circle-outline" size={80} color={colors.primary.main} />
          <Typography variant="h2" color="primary" style={styles.profileName}>
            Loading...
          </Typography>
          <Typography variant="body1" color="secondary" style={styles.profileRole}>
            Loading...
          </Typography>
          <Typography variant="caption" color="tertiary" style={styles.profileSchool}>
            Loading...
          </Typography>
        </Card>
      </ScrollView>
    );
  }

  const renderProfileItem = (
    icon: keyof typeof Ionicons.glyphMap,
    text: string,
    onPress?: () => void
  ) => (
    <TouchableOpacity
      style={[styles.profileItem, { borderBottomColor: colors.border.secondary }]}
      onPress={onPress}
      accessibilityRole="button"
      accessibilityLabel={text}
    >
      <Ionicons name={icon} size={24} color={colors.primary.main} />
      <Typography variant="body1" style={styles.profileItemText}>
        {text}
      </Typography>
      <Ionicons name="chevron-forward" size={24} color={colors.text.tertiary} />
    </TouchableOpacity>
  );

  return (
    <ScrollView style={[styles.contentContainer, { backgroundColor: colors.background.primary }]}>
      {/* Profile Header */}
      <Card style={styles.profileHeader}>
        <Ionicons name="person-circle-outline" size={80} color={colors.primary.main} />
        <Typography variant="h2" color="primary" style={styles.profileName}>
          {profile?.full_name || 'Nama Pengguna'}
        </Typography>
        <Typography variant="body1" color="secondary" style={styles.profileRole}>
          {profile?.role === 'teacher' ? 'Guru Tahfidz' : profile?.role || 'Role tidak diketahui'}
        </Typography>
        <Typography variant="caption" color="tertiary" style={styles.profileSchool}>
          {schoolName}
        </Typography>
      </Card>

      {/* Account Settings Section */}
      <Card style={styles.profileSection}>
        <View style={[styles.sectionHeader, { borderBottomColor: colors.border.secondary }]}>
          <Typography variant="h3" color="primary">
            Pengaturan Akun
          </Typography>
        </View>

        {renderProfileItem('person', 'Edit Profil')}
        {renderProfileItem('lock-closed', 'Ubah Password')}
        {renderProfileItem('notifications', 'Pengaturan Notifikasi')}
        {renderProfileItem('language', 'Bahasa')}
      </Card>

      {/* Help Section */}
      <Card style={styles.profileSection}>
        <View style={[styles.sectionHeader, { borderBottomColor: colors.border.secondary }]}>
          <Typography variant="h3" color="primary">
            Bantuan
          </Typography>
        </View>

        {renderProfileItem('help-circle', 'Pusat Bantuan')}
        {renderProfileItem('document-text', 'Syarat & Ketentuan')}
        {renderProfileItem('shield-checkmark', 'Kebijakan Privasi')}
      </Card>

      {/* Logout Section */}
      <View style={styles.logoutSection}>
        <LogoutButton variant="button" />
      </View>

      {/* Bottom Spacing */}
      <View style={{ height: theme.spacing.base.xl }} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
  },
  profileHeader: {
    alignItems: 'center',
    padding: 20,
    margin: 16,
    marginBottom: 8,
  },
  profileName: {
    marginTop: 12,
    textAlign: 'center',
  },
  profileRole: {
    marginTop: 4,
    textAlign: 'center',
  },
  profileSchool: {
    marginTop: 4,
    textAlign: 'center',
  },
  profileSection: {
    margin: 16,
    marginTop: 8,
    overflow: 'hidden',
  },
  sectionHeader: {
    padding: 16,
    borderBottomWidth: 1,
  },
  profileItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
  },
  profileItemText: {
    marginLeft: 12,
    flex: 1,
  },
  logoutSection: {
    margin: 16,
    marginTop: 8,
  },
});
</file>

<file path="src/components/templates/AddStudentTemplate.tsx">
import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ScrollView, Alert } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';

const classes = [
  'Tahfidz Al-Baqarah',
  'Tahfidz Al-Imran',
  'Tahfidz An-Nisa',
  'Tahfidz Al-Maidah',
];

const genderOptions = [
  { value: 'L', label: 'Laki-laki' },
  { value: 'P', label: 'Perempuan' },
];

export default function AddStudent() {
  const router = useRouter();
  const { classId } = useLocalSearchParams<{ classId: string }>();
  
  const [name, setName] = useState('');
  const [gender, setGender] = useState('');
  const [birthDate, setBirthDate] = useState('');
  const [selectedClass, setSelectedClass] = useState(classId && classes.includes(classId) ? classId : '');
  const [parentName, setParentName] = useState('');
  const [parentPhone, setParentPhone] = useState('');
  const [address, setAddress] = useState('');
  const [initialVerses, setInitialVerses] = useState('0');
  const [notes, setNotes] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const handleSave = async () => {
    if (!name.trim()) {
      Alert.alert('Error', 'Nama siswa harus diisi');
      return;
    }
    
    if (!selectedClass) {
      Alert.alert('Error', 'Kelas harus dipilih');
      return;
    }
    
    setIsLoading(true);
    
    try {
      // In a real app, this would be an API call to save the student
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call
      
      Alert.alert(
        'Sukses',
        'Siswa berhasil ditambahkan',
        [
          {
            text: 'OK',
            onPress: () => router.back(),
          },
        ]
      );
    } catch (error) {
      Alert.alert('Error', 'Gagal menambahkan siswa. Silakan coba lagi.');
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Tambah Siswa Baru</Text>
        <View style={{ width: 24 }} />
      </View>
      
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Basic Information */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Informasi Dasar</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Nama Lengkap *</Text>
            <TextInput
              style={styles.textInput}
              value={name}
              onChangeText={setName}
              placeholder="Masukkan nama lengkap siswa"
              placeholderTextColor="#999999"
            />
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Jenis Kelamin *</Text>
            <View style={styles.genderContainer}>
              {genderOptions.map((option) => (
                <TouchableOpacity
        key={option.value}
        style={[
          styles.genderOption,
          gender === option.value && styles.selectedGenderOption
        ]}
        onPress={() => setGender(option.value)}
        accessibilityRole="radio"
        accessibilityState={{ selected: gender === option.value }}
        accessibilityLabel={option.label}
      >
                  <Ionicons 
                    name={gender === option.value ? "radio-button-on" : "radio-button-off"} 
                    size={20} 
                    color="#005e7a" 
                  />
                  <Text style={styles.genderOptionText}>{option.label}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Tanggal Lahir</Text>
            <TextInput
              style={styles.textInput}
              value={birthDate}
              onChangeText={setBirthDate}
              placeholder="DD/MM/YYYY"
              placeholderTextColor="#999999"
            />
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Kelas *</Text>
            <View style={styles.classContainer}>
              {classes.map((className) => (
                <TouchableOpacity
                  key={className}
                  style={[
                    styles.classOption,
                    selectedClass === className && styles.selectedClassOption
                  ]}
                  onPress={() => setSelectedClass(className)}
                  accessibilityRole="button"
                  accessibilityState={{ selected: selectedClass === className }}
                  accessibilityLabel={className}
                >
                  <Text style={[
                    styles.classOptionText,
                    selectedClass === className && styles.selectedClassOptionText
                  ]}>
                    {className}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        </View>

        {/* Parent Information */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Informasi Orang Tua</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Nama Orang Tua/Wali</Text>
            <TextInput
              style={styles.textInput}
              value={parentName}
              onChangeText={setParentName}
              placeholder="Masukkan nama orang tua/wali"
              placeholderTextColor="#999999"
            />
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>No. Telepon</Text>
            <TextInput
              style={styles.textInput}
              value={parentPhone}
              onChangeText={setParentPhone}
              placeholder="Masukkan nomor telepon"
              placeholderTextColor="#999999"
              keyboardType="phone-pad"
            />
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Alamat</Text>
            <TextInput
              style={[styles.textInput, styles.textArea]}
              value={address}
              onChangeText={setAddress}
              placeholder="Masukkan alamat lengkap"
              placeholderTextColor="#999999"
              multiline
              numberOfLines={3}
            />
          </View>
        </View>

        {/* Academic Information */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Informasi Akademik</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Hafalan Awal (Jumlah Ayat)</Text>
            <TextInput
              style={styles.textInput}
              value={initialVerses}
              onChangeText={setInitialVerses}
              placeholder="0"
              placeholderTextColor="#999999"
              keyboardType="numeric"
            />
          </View>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Catatan Tambahan</Text>
            <TextInput
              style={[styles.textInput, styles.textArea]}
              value={notes}
              onChangeText={setNotes}
              placeholder="Catatan khusus tentang siswa (opsional)"
              placeholderTextColor="#999999"
              multiline
              numberOfLines={4}
            />
          </View>
        </View>

        {/* Save Button */}
        <TouchableOpacity 
          style={[
            styles.saveButton,
            (!name.trim() || !selectedClass || isLoading) && styles.saveButtonDisabled
          ]}
          onPress={handleSave}
          disabled={!name.trim() || !selectedClass || isLoading}
        >
          <Text style={styles.saveButtonText}>
            {isLoading ? 'Menyimpan...' : 'Simpan Siswa'}
          </Text>
        </TouchableOpacity>

        {/* Bottom Spacing */}
        <View style={{ height: 50 }} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginTop: 20,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: '#ffffff',
    color: '#333333',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  genderContainer: {
    flexDirection: 'row',
    gap: 16,
  },
  genderOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  selectedGenderOption: {
    // Additional styling for selected gender if needed
  },
  genderOptionText: {
    fontSize: 16,
    color: '#333333',
    marginLeft: 8,
  },
  classContainer: {
    gap: 8,
  },
  classOption: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#ffffff',
  },
  selectedClassOption: {
    backgroundColor: '#005e7a',
    borderColor: '#005e7a',
  },
  classOptionText: {
    fontSize: 16,
    color: '#333333',
    textAlign: 'center',
  },
  selectedClassOptionText: {
    color: '#ffffff',
    fontWeight: '600',
  },
  saveButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 20,
    marginHorizontal: 20,
  },
  saveButtonDisabled: {
    backgroundColor: '#cccccc',
  },
  saveButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
</file>

<file path="src/components/templates/DashboardTemplate/DashboardTemplate.stories.tsx">
/**
 * DashboardTemplate Component Stories
 * Storybook stories demonstrating all DashboardTemplate component variants and use cases
 */

import React from 'react';
import { View, Text } from 'react-native';
import type { Meta, StoryObj } from '@storybook/react-native';
import { DashboardTemplate } from './DashboardTemplate';
import { Card } from '../../molecules/Card';
import { QuickAction } from '../../molecules/QuickAction';
import { Typography } from '../../atoms/Typography';
import { Button } from '../../atoms/Button';

const meta: Meta<typeof DashboardTemplate> = {
  title: 'Templates/DashboardTemplate',
  component: DashboardTemplate,
  parameters: {
    docs: {
      description: {
        component: 'A consistent dashboard template with header, content area, and optional tab bar for all user roles.',
      },
    },
  },
  argTypes: {
    backgroundPattern: {
      control: { type: 'boolean' },
      description: 'Whether to show background pattern',
    },
    scrollable: {
      control: { type: 'boolean' },
      description: 'Whether content is scrollable',
    },
    safeArea: {
      control: { type: 'boolean' },
      description: 'Whether to use SafeAreaView',
    },
    contentPadding: {
      control: { type: 'boolean' },
      description: 'Whether to add padding to content',
    },
  },
};

export default meta;
type Story = StoryObj<typeof DashboardTemplate>;

// Sample content components
const SampleContent: React.FC = () => (
  <View style={{ gap: 16 }}>
    <Typography variant="h3">Welcome Back!</Typography>
    <Typography variant="body1" color="secondary">
      Here's what's happening in your dashboard today.
    </Typography>
    
    <Card variant="elevated" padding="medium">
      <Typography variant="h4" style={{ marginBottom: 8 }}>
        Quick Stats
      </Typography>
      <Typography variant="body2" color="secondary">
        Your activity summary for today
      </Typography>
    </Card>
    
    <View style={{ flexDirection: 'row', gap: 12 }}>
      <View style={{ flex: 1 }}>
        <QuickAction
          title="Messages"
          icon="mail"
          iconColor="#005e7a"
          onPress={() => alert('Messages')}
          badge={3}
        />
      </View>
      <View style={{ flex: 1 }}>
        <QuickAction
          title="Calendar"
          icon="calendar"
          iconColor="#f0c75e"
          onPress={() => alert('Calendar')}
        />
      </View>
    </View>
    
    <Card variant="default" padding="medium">
      <Typography variant="h4" style={{ marginBottom: 8 }}>
        Recent Activity
      </Typography>
      <Typography variant="body2" color="secondary">
        No recent activity to show
      </Typography>
    </Card>
  </View>
);

const LongContent: React.FC = () => (
  <View style={{ gap: 16 }}>
    {Array.from({ length: 10 }, (_, i) => (
      <Card key={i} variant="elevated" padding="medium">
        <Typography variant="h4" style={{ marginBottom: 8 }}>
          Card {i + 1}
        </Typography>
        <Typography variant="body2" color="secondary">
          This is sample content for card {i + 1}. It demonstrates scrollable content in the dashboard template.
        </Typography>
      </Card>
    ))}
  </View>
);

// Basic dashboard template
export const Default: Story = {
  args: {
    header: {
      title: 'Dashboard',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 5,
        },
        {
          icon: 'settings',
          onPress: () => alert('Settings'),
        },
      ],
    },
    children: <SampleContent />,
  },
};

// With subtitle
export const WithSubtitle: Story = {
  args: {
    header: {
      title: 'Student Dashboard',
      subtitle: 'Welcome back, Ahmed!',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 3,
        },
      ],
    },
    children: <SampleContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with header subtitle.',
      },
    },
  },
};

// With back button
export const WithBackButton: Story = {
  args: {
    header: {
      title: 'Assignment Details',
      leftAction: {
        icon: 'arrow-back',
        onPress: () => alert('Go back'),
        accessibilityLabel: 'Go back',
      },
      rightActions: [
        {
          icon: 'share',
          onPress: () => alert('Share'),
        },
      ],
    },
    children: <SampleContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with back button navigation.',
      },
    },
  },
};

// With tabs
export const WithTabs: Story = {
  args: {
    header: {
      title: 'Dashboard',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 2,
        },
      ],
    },
    tabs: [
      { id: 'home', label: 'Home', icon: 'home' },
      { id: 'assignments', label: 'Assignments', icon: 'book', badge: 3 },
      { id: 'grades', label: 'Grades', icon: 'school' },
      { id: 'profile', label: 'Profile', icon: 'person' },
    ],
    activeTab: 'home',
    onTabChange: (tabId) => alert(`Switched to ${tabId}`),
    children: <SampleContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with bottom tab navigation.',
      },
    },
  },
};

// Scrollable content
export const ScrollableContent: Story = {
  args: {
    header: {
      title: 'Long Content',
      rightActions: [
        {
          icon: 'ellipsis-vertical',
          onPress: () => alert('More options'),
        },
      ],
    },
    scrollable: true,
    children: <LongContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with scrollable content.',
      },
    },
  },
};

// Without background pattern
export const NoBackgroundPattern: Story = {
  args: {
    header: {
      title: 'Clean Dashboard',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
        },
      ],
    },
    backgroundPattern: false,
    children: <SampleContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template without background pattern.',
      },
    },
  },
};

// Custom colors
export const CustomColors: Story = {
  args: {
    header: {
      title: 'Custom Theme',
      rightActions: [
        {
          icon: 'color-palette',
          onPress: () => alert('Theme'),
        },
      ],
    },
    backgroundColor: '#1a1a1a',
    contentBackgroundColor: 'rgba(255, 255, 255, 0.05)',
    children: <SampleContent />,
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with custom colors.',
      },
    },
  },
};

// Student dashboard example
export const StudentDashboard: Story = {
  args: {
    header: {
      title: 'Student Portal',
      subtitle: 'Welcome back, Ahmed!',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 4,
          accessibilityLabel: '4 new notifications',
        },
        {
          icon: 'person',
          onPress: () => alert('Profile'),
          accessibilityLabel: 'View profile',
        },
      ],
    },
    tabs: [
      { id: 'dashboard', label: 'Dashboard', icon: 'home' },
      { id: 'assignments', label: 'Assignments', icon: 'book', badge: 2 },
      { id: 'grades', label: 'Grades', icon: 'school' },
      { id: 'schedule', label: 'Schedule', icon: 'calendar' },
    ],
    activeTab: 'dashboard',
    onTabChange: (tabId) => alert(`Navigate to ${tabId}`),
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="h3">Good Morning, Ahmed!</Typography>
        <Typography variant="body1" color="secondary">
          You have 2 assignments due this week and 1 upcoming test.
        </Typography>
        
        <Card variant="elevated" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Today's Schedule
          </Typography>
          <Typography variant="body2" color="secondary">
            Mathematics - 9:00 AM
          </Typography>
          <Typography variant="body2" color="secondary">
            Science - 11:00 AM
          </Typography>
          <Typography variant="body2" color="secondary">
            English - 2:00 PM
          </Typography>
        </Card>
        
        <View style={{ flexDirection: 'row', gap: 12 }}>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Assignments"
              icon="book"
              iconColor="#005e7a"
              onPress={() => alert('View assignments')}
              badge={2}
            />
          </View>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Messages"
              icon="mail"
              iconColor="#f0c75e"
              onPress={() => alert('View messages')}
              badge={1}
            />
          </View>
        </View>
        
        <Card variant="default" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Recent Grades
          </Typography>
          <Typography variant="body2" color="secondary">
            Mathematics Test: 92%
          </Typography>
          <Typography variant="body2" color="secondary">
            Science Quiz: 88%
          </Typography>
        </Card>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Complete student dashboard example with role-specific content.',
      },
    },
  },
};

// Teacher dashboard example
export const TeacherDashboard: Story = {
  args: {
    header: {
      title: 'Teacher Portal',
      subtitle: 'Ms. Sarah Johnson',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 8,
          accessibilityLabel: '8 new notifications',
        },
        {
          icon: 'add',
          onPress: () => alert('Create new'),
          accessibilityLabel: 'Create new content',
        },
      ],
    },
    tabs: [
      { id: 'dashboard', label: 'Dashboard', icon: 'home' },
      { id: 'classes', label: 'Classes', icon: 'school' },
      { id: 'assignments', label: 'Assignments', icon: 'book', badge: 5 },
      { id: 'grades', label: 'Grades', icon: 'document-text' },
    ],
    activeTab: 'dashboard',
    onTabChange: (tabId) => alert(`Navigate to ${tabId}`),
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="h3">Welcome Back, Ms. Johnson!</Typography>
        <Typography variant="body1" color="secondary">
          You have 5 assignments to grade and 2 parent meetings scheduled.
        </Typography>
        
        <Card variant="elevated" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Today's Classes
          </Typography>
          <Typography variant="body2" color="secondary">
            Grade 10A Mathematics - 9:00 AM
          </Typography>
          <Typography variant="body2" color="secondary">
            Grade 10B Mathematics - 11:00 AM
          </Typography>
          <Typography variant="body2" color="secondary">
            Grade 9A Mathematics - 2:00 PM
          </Typography>
        </Card>
        
        <View style={{ flexDirection: 'row', gap: 12 }}>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Grade Work"
              icon="document-text"
              iconColor="#005e7a"
              onPress={() => alert('Grade assignments')}
              badge={5}
            />
          </View>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Messages"
              icon="mail"
              iconColor="#f0c75e"
              onPress={() => alert('View messages')}
              badge={3}
            />
          </View>
        </View>
        
        <Card variant="default" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Recent Activity
          </Typography>
          <Typography variant="body2" color="secondary">
            Ahmed submitted Math Assignment 5
          </Typography>
          <Typography variant="body2" color="secondary">
            Fatima completed Science Quiz
          </Typography>
        </Card>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Complete teacher dashboard example with role-specific content.',
      },
    },
  },
};

// Parent dashboard example
export const ParentDashboard: Story = {
  args: {
    header: {
      title: 'Parent Portal',
      subtitle: 'Ahmed Al-Rashid',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 2,
          accessibilityLabel: '2 new notifications',
        },
        {
          icon: 'call',
          onPress: () => alert('Emergency contact'),
          accessibilityLabel: 'Emergency contact',
        },
      ],
    },
    tabs: [
      { id: 'dashboard', label: 'Dashboard', icon: 'home' },
      { id: 'progress', label: 'Progress', icon: 'trending-up' },
      { id: 'attendance', label: 'Attendance', icon: 'calendar' },
      { id: 'messages', label: 'Messages', icon: 'mail', badge: 1 },
    ],
    activeTab: 'dashboard',
    onTabChange: (tabId) => alert(`Navigate to ${tabId}`),
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="h3">Ahmed's Progress</Typography>
        <Typography variant="body1" color="secondary">
          Your child is performing well across all subjects.
        </Typography>
        
        <Card variant="elevated" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Recent Test Results
          </Typography>
          <Typography variant="body2" color="secondary">
            Mathematics: 92% (Excellent)
          </Typography>
          <Typography variant="body2" color="secondary">
            Science: 88% (Very Good)
          </Typography>
          <Typography variant="body2" color="secondary">
            English: 85% (Good)
          </Typography>
        </Card>
        
        <View style={{ flexDirection: 'row', gap: 12 }}>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Attendance"
              icon="calendar"
              iconColor="#4caf50"
              onPress={() => alert('View attendance')}
            />
          </View>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Contact Teacher"
              icon="mail"
              iconColor="#005e7a"
              onPress={() => alert('Contact teacher')}
            />
          </View>
        </View>
        
        <Card variant="default" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Upcoming Events
          </Typography>
          <Typography variant="body2" color="secondary">
            Parent-Teacher Meeting - Friday 3:00 PM
          </Typography>
          <Typography variant="body2" color="secondary">
            Science Fair - Next Monday
          </Typography>
        </Card>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Complete parent dashboard example with role-specific content.',
      },
    },
  },
};

// Management dashboard example
export const ManagementDashboard: Story = {
  args: {
    header: {
      title: 'Management Portal',
      subtitle: 'School Administration',
      rightActions: [
        {
          icon: 'notifications',
          onPress: () => alert('Notifications'),
          badge: 12,
          accessibilityLabel: '12 new notifications',
        },
        {
          icon: 'analytics',
          onPress: () => alert('Analytics'),
          accessibilityLabel: 'View analytics',
        },
      ],
    },
    tabs: [
      { id: 'dashboard', label: 'Dashboard', icon: 'home' },
      { id: 'students', label: 'Students', icon: 'people' },
      { id: 'teachers', label: 'Teachers', icon: 'school' },
      { id: 'reports', label: 'Reports', icon: 'document-text', badge: 3 },
    ],
    activeTab: 'dashboard',
    onTabChange: (tabId) => alert(`Navigate to ${tabId}`),
    children: (
      <View style={{ gap: 16 }}>
        <Typography variant="h3">School Overview</Typography>
        <Typography variant="body1" color="secondary">
          Monitor school performance and manage administrative tasks.
        </Typography>
        
        <Card variant="elevated" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Key Metrics
          </Typography>
          <Typography variant="body2" color="secondary">
            Total Students: 1,247
          </Typography>
          <Typography variant="body2" color="secondary">
            Active Teachers: 68
          </Typography>
          <Typography variant="body2" color="secondary">
            Attendance Rate: 94.2%
          </Typography>
        </Card>
        
        <View style={{ flexDirection: 'row', gap: 12 }}>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Alerts"
              icon="warning"
              iconColor="#ff9800"
              onPress={() => alert('View alerts')}
              badge={2}
            />
          </View>
          <View style={{ flex: 1 }}>
            <QuickAction
              title="Reports"
              icon="document-text"
              iconColor="#005e7a"
              onPress={() => alert('View reports')}
              badge={3}
            />
          </View>
        </View>
        
        <Card variant="default" padding="medium">
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Recent Activities
          </Typography>
          <Typography variant="body2" color="secondary">
            New teacher registration: Ms. Ahmed
          </Typography>
          <Typography variant="body2" color="secondary">
            Budget approval: Science Department
          </Typography>
        </Card>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Complete management dashboard example with role-specific content.',
      },
    },
  },
};

// Non-scrollable content
export const NonScrollable: Story = {
  args: {
    header: {
      title: 'Fixed Layout',
      rightActions: [
        {
          icon: 'settings',
          onPress: () => alert('Settings'),
        },
      ],
    },
    scrollable: false,
    children: (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Typography variant="h3" align="center">
          Fixed Content
        </Typography>
        <Typography variant="body1" color="secondary" align="center" style={{ marginTop: 8 }}>
          This content doesn't scroll
        </Typography>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template with non-scrollable content.',
      },
    },
  },
};

// Without content padding
export const NoContentPadding: Story = {
  args: {
    header: {
      title: 'Full Width Content',
      rightActions: [
        {
          icon: 'expand',
          onPress: () => alert('Full screen'),
        },
      ],
    },
    contentPadding: false,
    children: (
      <View style={{ gap: 0 }}>
        <Card variant="default" padding="large" style={{ borderRadius: 0 }}>
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Full Width Card
          </Typography>
          <Typography variant="body2" color="secondary">
            This card extends to the edges of the screen
          </Typography>
        </Card>
        <View style={{ height: 1, backgroundColor: '#e0e0e0' }} />
        <Card variant="default" padding="large" style={{ borderRadius: 0 }}>
          <Typography variant="h4" style={{ marginBottom: 8 }}>
            Another Full Width Card
          </Typography>
          <Typography variant="body2" color="secondary">
            Perfect for list-style layouts
          </Typography>
        </Card>
      </View>
    ),
  },
  parameters: {
    docs: {
      description: {
        story: 'Dashboard template without content padding for full-width layouts.',
      },
    },
  },
};
</file>

<file path="src/components/templates/DashboardTemplate/DashboardTemplate.test.tsx">
/**
 * DashboardTemplate Component Tests
 * Unit tests for the DashboardTemplate component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Text, View } from 'react-native';
import { DashboardTemplate } from './DashboardTemplate';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

// Sample content component
const SampleContent: React.FC = () => (
  <View>
    <Text>Sample dashboard content</Text>
  </View>
);

describe('DashboardTemplate Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with basic props', () => {
      const { getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Test Dashboard' }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Dashboard')).toBeTruthy();
      expect(getByText('Sample dashboard content')).toBeTruthy();
    });

    it('renders with subtitle', () => {
      const { getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ 
              title: 'Test Dashboard',
              subtitle: 'Welcome back!'
            }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByText('Test Dashboard')).toBeTruthy();
      expect(getByText('Welcome back!')).toBeTruthy();
    });

    it('renders with testID', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Test Dashboard' }}
            testID="test-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('test-dashboard')).toBeTruthy();
      expect(getByTestId('test-dashboard-header')).toBeTruthy();
    });

    it('renders with default testID', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Test Dashboard' }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('dashboard-template')).toBeTruthy();
      expect(getByTestId('dashboard-header')).toBeTruthy();
    });
  });

  // Header tests
  describe('Header', () => {
    it('renders header with title only', () => {
      const { getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Simple Header' }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByText('Simple Header')).toBeTruthy();
    });

    it('renders header with left action', () => {
      const mockLeftAction = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ 
              title: 'Dashboard',
              leftAction: {
                icon: 'arrow-back',
                onPress: mockLeftAction,
                accessibilityLabel: 'Go back'
              }
            }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const header = getByTestId('dashboard-header');
      expect(header).toBeTruthy();
    });

    it('renders header with right actions', () => {
      const mockAction1 = jest.fn();
      const mockAction2 = jest.fn();
      
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ 
              title: 'Dashboard',
              rightActions: [
                {
                  icon: 'notifications',
                  onPress: mockAction1,
                  badge: 5
                },
                {
                  icon: 'settings',
                  onPress: mockAction2
                }
              ]
            }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const header = getByTestId('dashboard-header');
      expect(header).toBeTruthy();
    });
  });

  // Tab bar tests
  describe('Tab Bar', () => {
    it('renders without tabs by default', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('dashboard-tabbar')).toBeNull();
    });

    it('renders with tabs', () => {
      const mockTabChange = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'profile', label: 'Profile', icon: 'person' }
            ]}
            activeTab="home"
            onTabChange={mockTabChange}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('dashboard-tabbar')).toBeTruthy();
    });

    it('renders tabs with badges', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'messages', label: 'Messages', icon: 'mail', badge: 3 }
            ]}
            activeTab="home"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('dashboard-tabbar')).toBeTruthy();
    });

    it('handles tab change', () => {
      const mockTabChange = jest.fn();
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'profile', label: 'Profile', icon: 'person' }
            ]}
            activeTab="home"
            onTabChange={mockTabChange}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const tabBar = getByTestId('dashboard-tabbar');
      expect(tabBar).toBeTruthy();
      // Note: Actual tab press testing would require more complex setup
    });

    it('uses first tab as default active tab', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'profile', label: 'Profile', icon: 'person' }
            ]}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('dashboard-tabbar')).toBeTruthy();
    });
  });

  // Content tests
  describe('Content', () => {
    it('renders children content', () => {
      const { getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
          >
            <Text>Custom content here</Text>
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByText('Custom content here')).toBeTruthy();
    });

    it('renders scrollable content by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            testID="scrollable-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('scrollable-dashboard-scroll')).toBeTruthy();
    });

    it('renders non-scrollable content when specified', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            scrollable={false}
            testID="non-scrollable-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('non-scrollable-dashboard-scroll')).toBeNull();
    });
  });

  // Background pattern tests
  describe('Background Pattern', () => {
    it('shows background pattern by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            testID="pattern-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('pattern-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('hides background pattern when disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            backgroundPattern={false}
            testID="no-pattern-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('no-pattern-dashboard');
      expect(dashboard).toBeTruthy();
    });
  });

  // Layout options tests
  describe('Layout Options', () => {
    it('uses SafeAreaView by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            testID="safe-area-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('safe-area-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('uses regular View when safeArea is disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            safeArea={false}
            testID="no-safe-area-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('no-safe-area-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('applies content padding by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            testID="padded-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('padded-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('removes content padding when disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            contentPadding={false}
            testID="no-padding-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('no-padding-dashboard');
      expect(dashboard).toBeTruthy();
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            backgroundColor="#ff0000"
            testID="custom-bg-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('custom-bg-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('applies custom content background color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            contentBackgroundColor="#00ff00"
            testID="custom-content-bg-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('custom-content-bg-dashboard');
      expect(dashboard).toBeTruthy();
    });

    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2 };
      const customHeaderStyle = { backgroundColor: 'blue' };
      const customContentStyle = { padding: 20 };
      const customTabBarStyle = { backgroundColor: 'green' };

      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            style={customStyle}
            headerStyle={customHeaderStyle}
            contentStyle={customContentStyle}
            tabBarStyle={customTabBarStyle}
            tabs={[{ id: 'home', label: 'Home', icon: 'home' }]}
            testID="styled-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('styled-dashboard');
      expect(dashboard).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has default accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            testID="accessible-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('accessible-dashboard');
      expect(dashboard.props.accessibilityLabel).toBe('Dashboard');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            accessibilityLabel="Custom dashboard label"
            testID="custom-accessible-dashboard"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      const dashboard = getByTestId('custom-accessible-dashboard');
      expect(dashboard.props.accessibilityLabel).toBe('Custom dashboard label');
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles empty tabs array', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[]}
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(queryByTestId('dashboard-tabbar')).toBeNull();
    });

    it('handles missing onTabChange', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'profile', label: 'Profile', icon: 'person' }
            ]}
            activeTab="home"
          >
            <SampleContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('dashboard-tabbar')).toBeTruthy();
    });

    it('handles complex content', () => {
      const ComplexContent = () => (
        <View>
          <Text>Title</Text>
          <View>
            <Text>Nested content</Text>
            <Text>More nested content</Text>
          </View>
        </View>
      );

      const { getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{ title: 'Dashboard' }}
          >
            <ComplexContent />
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByText('Title')).toBeTruthy();
      expect(getByText('Nested content')).toBeTruthy();
      expect(getByText('More nested content')).toBeTruthy();
    });
  });

  // Integration tests
  describe('Integration', () => {
    it('works with all features enabled', () => {
      const mockLeftAction = jest.fn();
      const mockRightAction = jest.fn();
      const mockTabChange = jest.fn();

      const { getByTestId, getByText } = render(
        <TestWrapper>
          <DashboardTemplate
            header={{
              title: 'Full Dashboard',
              subtitle: 'Complete example',
              leftAction: {
                icon: 'arrow-back',
                onPress: mockLeftAction
              },
              rightActions: [
                {
                  icon: 'notifications',
                  onPress: mockRightAction,
                  badge: 5
                }
              ]
            }}
            tabs={[
              { id: 'home', label: 'Home', icon: 'home' },
              { id: 'profile', label: 'Profile', icon: 'person', badge: 2 }
            ]}
            activeTab="home"
            onTabChange={mockTabChange}
            backgroundPattern={true}
            scrollable={true}
            safeArea={true}
            contentPadding={true}
            testID="full-dashboard"
          >
            <Text>Full featured content</Text>
          </DashboardTemplate>
        </TestWrapper>
      );

      expect(getByTestId('full-dashboard')).toBeTruthy();
      expect(getByTestId('full-dashboard-header')).toBeTruthy();
      expect(getByTestId('full-dashboard-scroll')).toBeTruthy();
      expect(getByTestId('full-dashboard-tabbar')).toBeTruthy();
      expect(getByText('Full Dashboard')).toBeTruthy();
      expect(getByText('Complete example')).toBeTruthy();
      expect(getByText('Full featured content')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/templates/ModalTemplate/ModalTemplate.tsx">
/**
 * ModalTemplate Component
 * Consistent modal template with header, content, and action areas
 */

import React from 'react';
import {
  View,
  ScrollView,
  ViewStyle,
  StyleSheet,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Modal } from '../../organisms/Modal';
import { Typography } from '../../atoms/Typography';
import { Button } from '../../atoms/Button';

// Action button interface
export interface ModalAction {
  label: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
  loading?: boolean;
  disabled?: boolean;
  icon?: keyof typeof Ionicons.glyphMap;
}

// ModalTemplate Props Interface
export interface ModalTemplateProps {
  // Modal visibility
  visible: boolean;
  onClose: () => void;
  
  // Header configuration
  title: string;
  subtitle?: string;
  showCloseButton?: boolean;
  
  // Content
  children: React.ReactNode;
  
  // Actions
  primaryAction?: ModalAction;
  secondaryAction?: ModalAction;
  actions?: ModalAction[];
  
  // Layout options
  size?: 'small' | 'medium' | 'large' | 'fullscreen';
  scrollable?: boolean;
  contentPadding?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  headerStyle?: ViewStyle;
  contentStyle?: ViewStyle;
  actionsStyle?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// ModalTemplate Component
export const ModalTemplate: React.FC<ModalTemplateProps> = ({
  visible,
  onClose,
  title,
  subtitle,
  showCloseButton = true,
  children,
  primaryAction,
  secondaryAction,
  actions,
  size = 'medium',
  scrollable = true,
  contentPadding = true,
  style,
  headerStyle,
  contentStyle,
  actionsStyle,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get header styles
  const getHeaderStyles = (): ViewStyle => {
    return {
      paddingHorizontal: theme.spacing.base.lg,
      paddingVertical: theme.spacing.base.md,
      borderBottomWidth: 1,
      borderBottomColor: colors.border.primary,
      backgroundColor: colors.surface.primary,
    };
  };

  // Get content styles
  const getContentStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      flex: 1,
      backgroundColor: colors.surface.primary,
    };

    if (contentPadding) {
      baseStyle.paddingHorizontal = theme.spacing.base.lg;
      baseStyle.paddingVertical = theme.spacing.base.md;
    }

    return baseStyle;
  };

  // Get actions styles
  const getActionsStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      alignItems: 'center',
      paddingHorizontal: theme.spacing.base.lg,
      paddingVertical: theme.spacing.base.md,
      borderTopWidth: 1,
      borderTopColor: colors.border.primary,
      backgroundColor: colors.surface.primary,
      gap: theme.spacing.base.sm,
    };
  };

  // Render header
  const renderHeader = () => {
    return (
      <View style={[getHeaderStyles(), headerStyle]}>
        <View style={styles.headerContent}>
          <View style={styles.headerText}>
            <Typography
              variant="h4"
              color="primary"
              weight="semibold"
            >
              {title}
            </Typography>
            {subtitle && (
              <Typography
                variant="body2"
                color="secondary"
                style={{ marginTop: 4 }}
              >
                {subtitle}
              </Typography>
            )}
          </View>
          
          {showCloseButton && (
            <Button
              variant="ghost"
              size="small"
              icon="close"
              onPress={onClose}
              accessibilityLabel="Close modal"
              testID={testID ? `${testID}-close-button` : 'modal-close-button'}
            >
              Close
            </Button>
          )}
        </View>
      </View>
    );
  };

  // Render content
  const renderContent = () => {
    const contentContainer = (
      <View style={[getContentStyles(), contentStyle]}>
        {children}
      </View>
    );

    if (scrollable) {
      return (
        <ScrollView
          style={{ flex: 1 }}
          contentContainerStyle={{ flexGrow: 1 }}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
          testID={testID ? `${testID}-scroll` : 'modal-scroll'}
        >
          {contentContainer}
        </ScrollView>
      );
    }

    return contentContainer;
  };

  // Render actions
  const renderActions = () => {
    // Combine primary/secondary actions with additional actions
    const allActions: ModalAction[] = [];
    
    if (secondaryAction) {
      allActions.push(secondaryAction);
    }
    
    if (primaryAction) {
      allActions.push(primaryAction);
    }
    
    if (actions) {
      allActions.push(...actions);
    }

    if (allActions.length === 0) return null;

    return (
      <View style={[getActionsStyles(), actionsStyle]}>
        {allActions.map((action, index) => (
          <Button
            key={index}
            variant={action.variant || (index === allActions.length - 1 ? 'primary' : 'outline')}
            size="medium"
            icon={action.icon}
            loading={action.loading}
            disabled={action.disabled}
            onPress={action.onPress}
            testID={testID ? `${testID}-action-${index}` : `modal-action-${index}`}
          >
            {action.label}
          </Button>
        ))}
      </View>
    );
  };

  return (
    <Modal
      visible={visible}
      onClose={onClose}
      size={size}
      style={style}
      accessibilityLabel={accessibilityLabel || `${title} modal`}
      testID={testID || 'modal-template'}
    >
      <View style={styles.container}>
        {renderHeader()}
        {renderContent()}
        {renderActions()}
      </View>
    </Modal>
  );
};

// Internal styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
  },
  headerText: {
    flex: 1,
    marginRight: 16,
  },
});

// Export default
export default ModalTemplate;
</file>

<file path="src/context/AuthContext.tsx">
import React, { createContext, useState, useEffect, useContext } from 'react';
import { Session, User } from '@supabase/supabase-js';
import { supabase } from '@/src/utils/supabase';
import { useRouter } from 'expo-router';
import { Profile } from '../types';

// Define the shape of the context
interface AuthContextType {
  session: Session | null;
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  signOut: () => Promise<void>;
  clearSession: () => Promise<void>;
}

// Create the context with a default value
const AuthContext = createContext<AuthContextType>({ 
  session: null, 
  user: null, 
  profile: null,
  loading: true, 
  signOut: async () => {},
  clearSession: async () => {}
});

// Custom hook to use the AuthContext
export const useAuth = () => {
  return useContext(AuthContext);
};

// AuthProvider component
export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // Function to fetch user profile from unified profiles table
  const fetchUserProfileAndNavigate = async (userId: string) => {
    try {
      const { data: userProfile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        console.error('Error fetching user profile:', error);
        router.replace('/(auth)/login');
        return;
      }

      if (userProfile?.role) {
        setProfile(userProfile as Profile);
        navigateBasedOnRole(userProfile.role, userProfile.school_id);
      } else {
        console.error('No role found for user');
        router.replace('/(auth)/login');
      }
    } catch (error) {
      console.error('Error in fetchUserProfileAndNavigate:', error);
      router.replace('/(auth)/login');
    }
  };

  // Function to navigate based on user role
  const navigateBasedOnRole = (role: string, schoolId?: string | number) => {
    console.log('🔐 Navigating based on role:', role, 'school_id:', schoolId);
    switch (role) {
      case 'teacher':
        router.replace('/(teacher)/dashboard');
        break;
      case 'management':
        if (schoolId) {
          router.replace('/(management)/dashboard');
        } else {
          router.replace('/(management)/setup');
        }
        break;
      case 'parent':
        router.replace('/(parent)/dashboard');
        break;
      case 'student':
        router.replace('/(student)/dashboard');
        break;
      default:
        console.error('Unknown role:', role);
        router.replace('/(auth)/login');
        break;
    }
  };

  // Function to clear session and force logout
  const clearSession = async () => {
    console.log('🚨 Clearing session and forcing logout');
    setLoading(true);
    
    try {
      setSession(null);
      setUser(null);
      setProfile(null);
      await supabase.auth.signOut();
      // Navigation handled by onAuthStateChange listener
    } catch (error) {
      console.error('🚨 Error during session clearing:', error);
      // Force redirect to login if signOut fails
      router.replace('/(auth)/login');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Get the initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      console.log('🔐 Initial session check:', session ? 'AUTHENTICATED' : 'NOT AUTHENTICATED');
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);
    });

    // Listen for changes in auth state
    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('🔐 Auth state change:', event, session ? 'AUTHENTICATED' : 'NOT AUTHENTICATED');
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);

      if (event === 'SIGNED_IN' && session?.user) {
        // Check role from user metadata and raw_user_meta_data
        const userMetadata = session.user.user_metadata || {};
        // Define a more specific type for the user object with raw metadata
        const rawMetadata = (session.user as { raw_user_meta_data?: Record<string, any> }).raw_user_meta_data || {};
        const userRole = userMetadata.role || rawMetadata.role;
        
        console.log('🔐 User role from metadata:', userRole);
        
        // If no role in auth metadata, fetch from profiles table
        if (!userRole) {
          await fetchUserProfileAndNavigate(session.user.id);
          return;
        }
        
        navigateBasedOnRole(userRole, rawMetadata.school_id || userMetadata.school_id);
      } else if (event === 'SIGNED_OUT') {
        console.log('🔐 User signed out - redirecting to login');
        setProfile(null);
        router.replace('/(auth)/login');
      }
    });

    // Cleanup the listener on component unmount
    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const signOut = async () => {
    console.log('🔐 User signing out');
    setProfile(null);
    await supabase.auth.signOut();
  };

  const value = {
    session,
    user,
    profile,
    loading,
    signOut,
    clearSession,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
</file>

<file path="src/services/incidents.ts">
import { supabase } from '../utils/supabase';
import { Incident } from '../types';

/**
 * Fetches the most recent incidents for a given school.
 * 
 * @param schoolId The ID of the school.
 * @param limit The maximum number of incidents to fetch.
 * @returns A promise that resolves with the incidents data and any potential error.
 */
export const fetchIncidentsForSchool = async (schoolId: number, limit: number = 5): Promise<{ data: Incident[] | null; error: any }> => {
  if (!schoolId) {
    return { data: null, error: new Error('School ID is required to fetch incidents.') };
  }

  const { data, error } = await supabase
    .from('incidents')
    .select(`
      id,
      incident_type,
      description,
      location,
      status,
      created_at,
      is_anonymous,
      student_id,
      profiles!incidents_student_id_fkey(full_name),
      reporter_id
    `)
    .eq('school_id', schoolId)
    .order('created_at', { ascending: false })
    .limit(limit);

  return { data, error };
};
</file>

<file path="src/services/subjectService.ts">
import { supabase } from '../utils/supabase';
import { z } from 'zod';

// Validation schemas
const SubjectSchema = z.object({
  subject_name: z.string().min(1, 'Subject name is required').max(100, 'Subject name too long'),
  subject_code: z.string().max(20, 'Subject code too long').optional(),
  grading_scale: z.enum(['points', 'percentage', 'standards']).default('percentage'),
  standards_alignment: z.string().max(1000, 'Standards alignment text is too long (max 1000 characters)').optional(),
});

const UpdateSubjectSchema = z.object({
  subject_name: z.string().min(1, 'Subject name is required').max(100, 'Subject name too long').optional(),
  subject_code: z.string().max(20, 'Subject code too long').optional(),
  grading_scale: z.enum(['points', 'percentage', 'standards']).optional(),
  standards_alignment: z.string().max(1000, 'Standards alignment text is too long (max 1000 characters)').optional(),
});

// Type definitions
export interface ClassSubject {
  id: number;
  class_id: number;
  subject_name: string;
  subject_code?: string;
  grading_scale: 'points' | 'percentage' | 'standards';
  standards_alignment?: string;
  created_at: string;
  updated_at: string;
}

export interface SubjectData {
  subject_name: string;
  subject_code?: string;
  grading_scale?: 'points' | 'percentage' | 'standards';
  standards_alignment?: string;
}

export interface SubjectUpdate {
  subject_name?: string;
  subject_code?: string;
  grading_scale?: 'points' | 'percentage' | 'standards';
  standards_alignment?: string;
}

export interface Subject {
  id: number;
  subject_name: string;
  subject_code?: string;
  grading_scale: 'points' | 'percentage' | 'standards';
  standards_alignment?: string;
}

export class SubjectServiceError extends Error {
  constructor(
    public code: string,
    message: string,
    public details?: any
  ) {
    super(message);
    this.name = 'SubjectServiceError';
  }
}

/**
 * SubjectService provides comprehensive subject management within classes
 */
export class SubjectService {
  /**
   * Get available predefined subjects
   */
  static async getAvailableSubjects(): Promise<Subject[]> {
    try {
      // Return a predefined list of common subjects
      // In a real implementation, this could come from a school curriculum database
      return [
        { id: -1, subject_name: 'Mathematics', subject_code: 'MATH', grading_scale: 'percentage' },
        { id: -2, subject_name: 'Science', subject_code: 'SCI', grading_scale: 'percentage' },
        { id: -3, subject_name: 'English', subject_code: 'ENG', grading_scale: 'percentage' },
        { id: -4, subject_name: 'History', subject_code: 'HIST', grading_scale: 'percentage' },
        { id: -5, subject_name: 'Geography', subject_code: 'GEO', grading_scale: 'percentage' },
        { id: -6, subject_name: 'Art', subject_code: 'ART', grading_scale: 'standards' },
        { id: -7, subject_name: 'Music', subject_code: 'MUS', grading_scale: 'standards' },
        { id: -8, subject_name: 'Physical Education', subject_code: 'PE', grading_scale: 'standards' },
        { id: -9, subject_name: 'Computer Science', subject_code: 'CS', grading_scale: 'percentage' },
        { id: -10, subject_name: 'Religious Studies', subject_code: 'REL', grading_scale: 'standards' },
        { id: -11, subject_name: 'Arabic', subject_code: 'ARB', grading_scale: 'percentage' },
        { id: -12, subject_name: 'Quran', subject_code: 'QUR', grading_scale: 'standards' },
      ];
    } catch (error) {
      throw new SubjectServiceError(
        'FETCH_FAILED',
        'Failed to fetch available subjects',
        error
      );
    }
  }

  /**
   * Get all subjects for a specific class
   */
  static async getClassSubjects(classId: number): Promise<ClassSubject[]> {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new SubjectServiceError(
          'NOT_AUTHENTICATED',
          'User not authenticated'
        );
      }

      // Verify teacher has access to this class
      const hasAccess = await SubjectService.verifyClassAccess(classId, user.id);
      if (!hasAccess) {
        throw new SubjectServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      const { data: subjects, error } = await supabase
        .from('class_subjects')
        .select('*')
        .eq('class_id', classId)
        .order('subject_name', { ascending: true });

      if (error) {
        throw new SubjectServiceError(
          'FETCH_FAILED',
          'Failed to fetch subjects',
          error
        );
      }

      return subjects || [];
    } catch (error) {
      if (error instanceof SubjectServiceError) {
        throw error;
      }
      throw new SubjectServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Add a subject to a class
   */
  static async addSubjectToClass(
    classId: number,
    subjectData: SubjectData
  ): Promise<ClassSubject> {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new SubjectServiceError(
          'NOT_AUTHENTICATED',
          'User not authenticated'
        );
      }

      // Validate input data
      const validatedData = SubjectSchema.parse(subjectData);

      // Verify teacher has access to this class
      const hasAccess = await this.verifyClassAccess(classId, user.id);
      if (!hasAccess) {
        throw new SubjectServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      // Check for duplicate subject within the class
      const existingSubject = await this.checkDuplicateSubjectName(
        validatedData.subject_name,
        classId
      );

      if (existingSubject) {
        throw new SubjectServiceError(
          'DUPLICATE_SUBJECT',
          'A subject with this name already exists in this class'
        );
      }

      // Insert subject record
      const { data: newSubject, error } = await supabase
        .from('class_subjects')
        .insert({
          ...validatedData,
          class_id: classId,
        })
        .select()
        .single();

      if (error) {
        throw new SubjectServiceError(
          'CREATE_FAILED',
          'Failed to add subject to class',
          error
        );
      }

      return newSubject!;
    } catch (error) {
      if (error instanceof SubjectServiceError) {
        throw error;
      }
      throw new SubjectServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Update a class subject
   */
  static async updateClassSubject(
    subjectId: number,
    updates: SubjectUpdate
  ): Promise<ClassSubject> {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new SubjectServiceError(
          'NOT_AUTHENTICATED',
          'User not authenticated'
        );
      }

      // Validate input data
      const validatedData = UpdateSubjectSchema.parse(updates);

      // Get the subject to determine which class it belongs to
      const { data: subject } = await supabase
        .from('class_subjects')
        .select('class_id')
        .eq('id', subjectId)
        .single();

      if (!subject) {
        throw new SubjectServiceError(
          'SUBJECT_NOT_FOUND',
          'Subject not found'
        );
      }

      // Verify teacher has access to this class
      const hasAccess = await this.verifyClassAccess(subject.class_id, user.id);
      if (!hasAccess) {
        throw new SubjectServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      // Check for duplicate subject name if name is being updated
      if (validatedData.subject_name) {
        const existingSubject = await this.checkDuplicateSubjectName(
          validatedData.subject_name,
          subject.class_id,
          subjectId
        );

        if (existingSubject) {
          throw new SubjectServiceError(
            'DUPLICATE_SUBJECT',
            'A subject with this name already exists in this class'
          );
        }
      }

      // Update subject record
      const { data: updatedSubject, error } = await supabase
        .from('class_subjects')
        .update({
          ...validatedData,
          updated_at: new Date().toISOString(),
        })
        .eq('id', subjectId)
        .select()
        .single();

      if (error) {
        throw new SubjectServiceError(
          'UPDATE_FAILED',
          'Failed to update subject',
          error
        );
      }

      return updatedSubject!;
    } catch (error) {
      if (error instanceof SubjectServiceError) {
        throw error;
      }
      throw new SubjectServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Remove a subject from a class
   */
  static async removeSubjectFromClass(subjectId: number): Promise<void> {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new SubjectServiceError(
          'NOT_AUTHENTICATED',
          'User not authenticated'
        );
      }

      // Get the subject to determine which class it belongs to
      const { data: subject } = await supabase
        .from('class_subjects')
        .select('class_id')
        .eq('id', subjectId)
        .single();

      if (!subject) {
        throw new SubjectServiceError(
          'SUBJECT_NOT_FOUND',
          'Subject not found'
        );
      }

      // Verify teacher has access to this class
      const hasAccess = await this.verifyClassAccess(subject.class_id, user.id);
      if (!hasAccess) {
        throw new SubjectServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      const { error } = await supabase
        .from('class_subjects')
        .delete()
        .eq('id', subjectId);

      if (error) {
        throw new SubjectServiceError(
          'DELETE_FAILED',
          'Failed to remove subject from class',
          error
        );
      }
    } catch (error) {
      if (error instanceof SubjectServiceError) {
        throw error;
      }
      throw new SubjectServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Validate subject data
   */
  static async validateSubjectData(
    subjectData: SubjectData,
    classId: number
  ): Promise<{ valid: boolean; errors: string[] }> {
    const errors: string[] = [];

    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        errors.push('User not authenticated');
        return { valid: false, errors };
      }

      // Validate input data
      SubjectSchema.parse(subjectData);

      // Check if teacher has access to the class
      const hasAccess = await this.verifyClassAccess(classId, user.id);
      if (!hasAccess) {
        errors.push('You do not have access to this class');
      }

      // Check for duplicate subject name
      const existingSubject = await this.checkDuplicateSubjectName(
        subjectData.subject_name,
        classId
      );

      if (existingSubject) {
        errors.push('A subject with this name already exists in this class');
      }

      // Validate standards alignment
      if (subjectData.standards_alignment) {
        if (subjectData.standards_alignment.length > 1000) {
          errors.push('Standards alignment text is too long (max 1000 characters)');
        }
      }

      // Validate subject code
      if (subjectData.subject_code) {
        if (subjectData.subject_code.length > 20) {
          errors.push('Subject code is too long (max 20 characters)');
        }
        if (!/^[A-Za-z0-9\-]+$/.test(subjectData.subject_code)) {
          errors.push('Subject code can only contain letters, numbers, and hyphens');
        }
      }

      return {
        valid: errors.length === 0,
        errors,
      };
    } catch (error) {
      if (error instanceof z.ZodError) {
        errors.push(...error.issues.map((err: z.ZodIssue) => err.message));
      }
      return {
        valid: false,
        errors,
      };
    }
  }

  /**
   * Get subjects by grading scale
   */
  static async getSubjectsByGradingScale(
    classId: number,
    gradingScale: 'points' | 'percentage' | 'standards'
  ): Promise<ClassSubject[]> {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new SubjectServiceError(
          'NOT_AUTHENTICATED',
          'User not authenticated'
        );
      }

      // Verify teacher has access to this class
      const hasAccess = await this.verifyClassAccess(classId, user.id);
      if (!hasAccess) {
        throw new SubjectServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      const { data: subjects, error } = await supabase
        .from('class_subjects')
        .select('*')
        .eq('class_id', classId)
        .eq('grading_scale', gradingScale)
        .order('subject_name', { ascending: true });

      if (error) {
        throw new SubjectServiceError(
          'FETCH_FAILED',
          'Failed to fetch subjects',
          error
        );
      }

      return subjects || [];
    } catch (error) {
      if (error instanceof SubjectServiceError) {
        throw error;
      }
      throw new SubjectServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Helper methods
   */
  private static async checkDuplicateSubjectName(
    subjectName: string,
    classId: number,
    excludeId?: number
  ): Promise<ClassSubject | null> {
    let query = supabase
      .from('class_subjects')
      .select('*')
      .eq('subject_name', subjectName)
      .eq('class_id', classId);

    if (excludeId) {
      query = query.neq('id', excludeId);
    }

    const { data: existingSubject } = await query.single();
    return existingSubject || null;
  }

  private static async verifyClassAccess(classId: number, teacherId: string): Promise<boolean> {
    const { data: profile } = await supabase
      .from('profiles')
      .select('role, school_id')
      .eq('id', teacherId)
      .single();

    if (!profile) return false;

    // Administrators have access to all classes
    if (profile.role === 'management') {
      return true;
    }

    // Check if teacher is assigned to this class
    const { data: teacherAssignment } = await supabase
      .from('class_teachers')
      .select('user_id')
      .eq('class_id', classId)
      .eq('user_id', teacherId)
      .single();

    return !!teacherAssignment;
  }
}
</file>

<file path="src/utils/idConversion.ts">
/**
 * Utility functions for safe ID conversion between string and number types.
 * This ensures type compatibility when interfacing between components that use
 * different ID formats (GlobalStudent uses string, local components use number).
 */

/**
 * Safely converts a string ID to a number.
 * @param id - The string ID to convert
 * @returns The numeric ID
 * @throws Error if the ID format is invalid
 */
export const convertStringToNumber = (id: string): number => {
  // Validate input is not empty or just whitespace
  if (!id || id.trim().length === 0) {
    throw new Error(`Invalid ID format: empty or whitespace-only string`);
  }
  
  const numId = parseInt(id, 10);
  if (isNaN(numId)) {
    throw new Error(`Invalid ID format: ${id}`);
  }
  return numId;
};

/**
 * Converts a number ID to a string.
 * @param id - The numeric ID to convert
 * @returns The string representation of the ID
 * @throws Error if the input is not a valid positive number
 */
export const convertNumberToString = (id: number): string => {
  // Validate input is a valid positive number
  if (typeof id !== 'number' || isNaN(id) || id <= 0) {
    throw new Error(`Invalid ID format: must be a positive number, received ${id}`);
  }
  
  return id.toString();
};

/**
 * Type guard to check if a value is a valid numeric ID.
 * @param value - The value to check
 * @returns True if the value is a valid numeric ID
 */
export const isValidNumericId = (value: unknown): value is number => {
  return typeof value === 'number' && !isNaN(value) && value > 0;
};

/**
 * Type guard to check if a value is a valid string ID.
 * @param value - The value to check
 * @returns True if the value is a valid string ID
 */
export const isValidStringId = (value: unknown): value is string => {
  if (typeof value !== 'string') {
    return false;
  }
  
  const trimmedValue = value.trim();
  return trimmedValue.length > 0 && !isNaN(parseInt(trimmedValue, 10));
};
</file>

<file path="src/utils/styleHelpers.ts">
/**
 * Style Helper Utilities
 * Common styling patterns and helper functions for consistent styling
 */

import { ViewStyle, TextStyle, ImageStyle } from 'react-native';
import { theme } from '../styles/theme';
import { getResponsiveValue } from './responsive';
import type { ShadowStyle } from '../styles/shadows';

// Type for all possible style objects
type Style = ViewStyle | TextStyle | ImageStyle;

// Helper function to create consistent margin styles
export const createMarginStyle = (
  size: keyof typeof theme.spacing.base,
  direction?: 'top' | 'bottom' | 'left' | 'right' | 'horizontal' | 'vertical'
): ViewStyle => {
  const value = theme.spacing.base[size];
  
  switch (direction) {
    case 'top':
      return { marginTop: value };
    case 'bottom':
      return { marginBottom: value };
    case 'left':
      return { marginLeft: value };
    case 'right':
      return { marginRight: value };
    case 'horizontal':
      return { marginHorizontal: value };
    case 'vertical':
      return { marginVertical: value };
    default:
      return { margin: value };
  }
};

// Helper function to create consistent padding styles
export const createPaddingStyle = (
  size: keyof typeof theme.spacing.base,
  direction?: 'top' | 'bottom' | 'left' | 'right' | 'horizontal' | 'vertical'
): ViewStyle => {
  const value = theme.spacing.base[size];
  
  switch (direction) {
    case 'top':
      return { paddingTop: value };
    case 'bottom':
      return { paddingBottom: value };
    case 'left':
      return { paddingLeft: value };
    case 'right':
      return { paddingRight: value };
    case 'horizontal':
      return { paddingHorizontal: value };
    case 'vertical':
      return { paddingVertical: value };
    default:
      return { padding: value };
  }
};

// Helper function to create typography styles
export const createTypographyStyle = (
  variant: keyof typeof theme.typography.variants,
  color?: string,
  align?: 'left' | 'center' | 'right' | 'justify'
): TextStyle => {
  const baseStyle = theme.typography.variants[variant];
  
  return {
    fontSize: baseStyle.fontSize,
    fontWeight: baseStyle.fontWeight as TextStyle['fontWeight'],
    lineHeight: baseStyle.lineHeight * baseStyle.fontSize,
    letterSpacing: baseStyle.letterSpacing,
    ...(color && { color }),
    ...(align && { textAlign: align }),
    ...((baseStyle as any).textTransform && { textTransform: (baseStyle as any).textTransform as TextStyle['textTransform'] }),
  };
};

// Helper function to create shadow styles
export const createShadowStyle = (shadowKey: keyof typeof theme.shadows): ShadowStyle => {
  return theme.shadows[shadowKey] as ShadowStyle;
};

// Helper function to create border radius styles
export const createBorderRadiusStyle = (
  size: keyof typeof theme.borderRadius,
  corners?: 'top' | 'bottom' | 'left' | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight'
): ViewStyle => {
  const value = theme.borderRadius[size];
  
  switch (corners) {
    case 'top':
      return { borderTopLeftRadius: value, borderTopRightRadius: value };
    case 'bottom':
      return { borderBottomLeftRadius: value, borderBottomRightRadius: value };
    case 'left':
      return { borderTopLeftRadius: value, borderBottomLeftRadius: value };
    case 'right':
      return { borderTopRightRadius: value, borderBottomRightRadius: value };
    case 'topLeft':
      return { borderTopLeftRadius: value };
    case 'topRight':
      return { borderTopRightRadius: value };
    case 'bottomLeft':
      return { borderBottomLeftRadius: value };
    case 'bottomRight':
      return { borderBottomRightRadius: value };
    default:
      return { borderRadius: value };
  }
};

// Helper function to create flex layout styles
export const createFlexStyle = (
  direction: 'row' | 'column' = 'column',
  justify: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' = 'flex-start',
  align: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline' = 'stretch',
  wrap: 'nowrap' | 'wrap' | 'wrap-reverse' = 'nowrap'
): ViewStyle => {
  return {
    display: 'flex',
    flexDirection: direction,
    justifyContent: justify,
    alignItems: align,
    flexWrap: wrap,
  };
};

// Helper function to create consistent button styles
export const createButtonStyle = (
  variant: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger',
  size: 'small' | 'medium' | 'large' = 'medium',
  disabled: boolean = false
): ViewStyle => {
  const baseStyle: ViewStyle = {
    borderRadius: theme.borderRadius.md,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  };

  // Size-specific styles
  const sizeStyles = {
    small: {
      minHeight: 32,
      paddingHorizontal: 12,
      paddingVertical: 6,
    },
    medium: {
      minHeight: 40,
      paddingHorizontal: 16,
      paddingVertical: 8,
    },
    large: {
      minHeight: 48,
      paddingHorizontal: 20,
      paddingVertical: 12,
    },
  };

  // Variant-specific styles
  const variantStyles = {
    primary: {
      backgroundColor: disabled ? theme.colors.interactive.disabled : theme.colors.primary.main,
      ...theme.shadows.button,
    },
    secondary: {
      backgroundColor: disabled ? theme.colors.interactive.disabled : theme.colors.secondary.main,
      ...theme.shadows.button,
    },
    outline: {
      backgroundColor: 'transparent',
      borderWidth: 1,
      borderColor: disabled ? theme.colors.interactive.disabled : theme.colors.primary.main,
    },
    ghost: {
      backgroundColor: 'transparent',
    },
    danger: {
      backgroundColor: disabled ? theme.colors.interactive.disabled : theme.colors.error.main,
      ...theme.shadows.button,
    },
  };

  return {
    ...baseStyle,
    ...sizeStyles[size],
    ...variantStyles[variant],
    opacity: disabled ? 0.6 : 1,
  };
};

// Helper function to create consistent card styles
export const createCardStyle = (
  variant: 'default' | 'elevated' | 'outlined' = 'default',
  padding: 'none' | 'small' | 'medium' | 'large' = 'medium'
): ViewStyle => {
  const baseStyle: ViewStyle = {
    borderRadius: theme.borderRadius.lg,
    backgroundColor: theme.colors.surface.primary,
  };

  // Padding styles
  const paddingStyles = {
    none: {},
    small: { padding: theme.spacing.base.sm },
    medium: { padding: theme.spacing.base.md },
    large: { padding: theme.spacing.base.lg },
  };

  // Variant styles
  const variantStyles = {
    default: {
      ...theme.shadows.card,
    },
    elevated: {
      ...theme.shadows.cardHover,
    },
    outlined: {
      borderWidth: 1,
      borderColor: theme.colors.border.primary,
    },
  };

  return {
    ...baseStyle,
    ...paddingStyles[padding],
    ...variantStyles[variant],
  };
};

// Helper function to create consistent input styles
export const createInputStyle = (
  focused: boolean = false,
  error: boolean = false,
  disabled: boolean = false
): ViewStyle => {
  return {
    borderRadius: theme.borderRadius.md,
    paddingHorizontal: theme.spacing.base.md,
    paddingVertical: theme.spacing.base.sm,
    minHeight: 40,
    borderWidth: 1,
    backgroundColor: disabled ? theme.colors.interactive.disabled : theme.colors.surface.primary,
    borderColor: error 
      ? theme.colors.border.error 
      : focused 
        ? theme.colors.border.focus 
        : theme.colors.border.primary,
    opacity: disabled ? 0.6 : 1,
  };
};

// Helper function to create consistent modal styles
export const createModalStyle = (size: 'small' | 'medium' | 'large' | 'fullscreen' = 'medium'): ViewStyle => {
  const baseStyle: ViewStyle = {
    backgroundColor: theme.colors.surface.primary,
    borderTopLeftRadius: theme.borderRadius['2xl'],
    borderTopRightRadius: theme.borderRadius['2xl'],
    padding: theme.spacing.base.lg,
    ...theme.shadows.modal,
  };

  const sizeStyles: Record<'small' | 'medium' | 'large' | 'fullscreen', ViewStyle> = {
    small: { maxHeight: '40%' },
    medium: { maxHeight: '60%' },
    large: { maxHeight: '80%' },
    fullscreen: { maxHeight: '100%', borderRadius: 0 },
  };

  return {
    ...baseStyle,
    ...sizeStyles[size],
  };
};

// Helper function to combine multiple styles
export const combineStyles = (...styles: (Style | undefined | null | false)[]): Style => {
  return Object.assign({}, ...styles.filter((s): s is Style => !!s));
};

// Helper function to create responsive styles
export const createResponsiveStyle = <T extends Style>(styles: {
  xs?: T;
  sm?: T;
  md?: T;
  lg?: T;
  xl?: T;
}): T => {
  return getResponsiveValue(styles) || ({} as T);
};

// Utility object with all helper functions
export const styleHelpers = {
  margin: createMarginStyle,
  padding: createPaddingStyle,
  typography: createTypographyStyle,
  shadow: createShadowStyle,
  borderRadius: createBorderRadiusStyle,
  flex: createFlexStyle,
  button: createButtonStyle,
  card: createCardStyle,
  input: createInputStyle,
  modal: createModalStyle,
  combine: combineStyles,
  responsive: createResponsiveStyle,
} as const;

// Export individual helpers for convenience
export {
  createMarginStyle as margin,
  createPaddingStyle as padding,
  createTypographyStyle as typography,
  createShadowStyle as shadow,
  createBorderRadiusStyle as borderRadius,
  createFlexStyle as flex,
  createButtonStyle as button,
  createCardStyle as card,
  createInputStyle as input,
  createModalStyle as modal,
  combineStyles as combine,
  createResponsiveStyle as responsive,
};
</file>

<file path="app/_layout.tsx">
import React, { useEffect, useCallback, useState } from 'react';
import { Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { AuthProvider, useAuth } from '../src/context/AuthContext';
import { ThemeProvider } from '../src/context/ThemeContext';
import * as SplashScreen from 'expo-splash-screen';
import AnimatedSplashScreen from '../src/components/organisms/AnimatedSplashScreen';

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

const RootLayoutNav = () => {
    const { loading: authLoading } = useAuth();
    const [splashAnimationComplete, setSplashAnimationComplete] = useState(false);

    const handleAnimationFinish = () => {
        requestAnimationFrame(() => {
            setSplashAnimationComplete(true);
        });
    };

    const onLayoutRootView = useCallback(async () => {
        if (!authLoading && splashAnimationComplete) {
            await SplashScreen.hideAsync();
        }
    }, [authLoading, splashAnimationComplete]);

    useEffect(() => {
        onLayoutRootView();
    }, [onLayoutRootView]);

    // Show animated splash screen until both auth loading and animation are complete
    if (authLoading || !splashAnimationComplete) {
        return <AnimatedSplashScreen onAnimationFinish={handleAnimationFinish} />;
    }

    return (
        <>
            <Stack screenOptions={{ headerShown: false }}>
                <Stack.Screen name="index" />
                <Stack.Screen name="(auth)" options={{ headerShown: false }} />
                <Stack.Screen name="(student)" options={{ headerShown: false }} />
                <Stack.Screen name="(teacher)" options={{ headerShown: false }} />
                <Stack.Screen name="(parent)" options={{ headerShown: false }} />
                <Stack.Screen name="(management)" options={{ headerShown: false }} />
            </Stack>
            <StatusBar style="light" />
        </>
    );
};

export default function RootLayout() {
    return (
        <ThemeProvider>
            <AuthProvider>
                <RootLayoutNav />
            </AuthProvider>
        </ThemeProvider>
    );
}
</file>

<file path="app/(teacher)/class/[id]/index.tsx">
import React from 'react';
import { Stack } from 'expo-router';
import ClassDetailView from '../../../../src/components/templates/ClassDetailView';

export default function ClassDetailIndex() {
  return (
    <>
      <Stack.Screen options={{
        headerShown: false,
        title: "Detail Kelas"
      }} />
      <ClassDetailView />
    </>
  );
}
</file>

<file path="src/components/atoms/LoadingSpinner/LoadingSpinner.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../../../context/ThemeContext';
import { LoadingSpinner } from './LoadingSpinner';

// Comprehensive theme mock that matches the actual structure
const mockTheme = {
  colors: {
    primary: {
      main: '#007bff',
      light: '#66b3ff',
      dark: '#0056b3',
      contrast: '#ffffff',
    },
    secondary: {
      main: '#6c757d',
      light: '#a8b3bd',
      dark: '#495057',
      contrast: '#ffffff',
    },
    success: {
      main: '#28a745',
      light: '#7dd87d',
      dark: '#1e7e34',
      contrast: '#ffffff',
    },
    warning: {
      main: '#ffc107',
      light: '#ffda6a',
      dark: '#c69500',
      contrast: '#212529',
    },
    error: {
      main: '#dc3545',
      light: '#f17a84',
      dark: '#a71d2a',
      contrast: '#ffffff',
    },
    info: {
      main: '#17a2b8',
      light: '#6edff6',
      dark: '#117a8b',
      contrast: '#ffffff',
    },
    background: {
      default: '#f8f9fa',
      paper: '#ffffff',
      secondary: '#e9ecef',
    },
    surface: {
      primary: '#ffffff',
      secondary: '#f8f9fa',
      tertiary: '#e9ecef',
      disabled: '#f8f9fa',
    },
    text: {
      primary: '#212529',
      secondary: '#6c757d',
      tertiary: '#adb5bd',
      disabled: '#ced4da',
      inverse: '#ffffff',
    },
    border: {
      primary: '#dee2e6',
      secondary: '#e9ecef',
      tertiary: '#f8f9fa',
      focus: '#007bff',
      error: '#dc3545',
    },
    interactive: {
      hover: '#e9ecef',
      active: '#dee2e6',
      selected: '#007bff',
      disabled: '#f8f9fa',
    },
    white: '#ffffff',
    black: '#000000',
  },
  typography: {
    variants: {
      h1: { fontSize: 32, fontWeight: '700', lineHeight: 40, fontFamily: 'System' },
      h2: { fontSize: 28, fontWeight: '600', lineHeight: 36, fontFamily: 'System' },
      h3: { fontSize: 24, fontWeight: '600', lineHeight: 32, fontFamily: 'System' },
      h4: { fontSize: 20, fontWeight: '600', lineHeight: 28, fontFamily: 'System' },
      h5: { fontSize: 18, fontWeight: '600', lineHeight: 24, fontFamily: 'System' },
      h6: { fontSize: 16, fontWeight: '600', lineHeight: 22, fontFamily: 'System' },
      body1: { fontSize: 16, fontWeight: '400', lineHeight: 24, fontFamily: 'System' },
      body2: { fontSize: 14, fontWeight: '400', lineHeight: 20, fontFamily: 'System' },
      button: { fontSize: 14, fontWeight: '600', lineHeight: 20, fontFamily: 'System' },
      buttonSmall: { fontSize: 12, fontWeight: '600', lineHeight: 16, fontFamily: 'System' },
      buttonLarge: { fontSize: 16, fontWeight: '600', lineHeight: 24, fontFamily: 'System' },
      caption: { fontSize: 12, fontWeight: '400', lineHeight: 16, fontFamily: 'System' },
      overline: { fontSize: 10, fontWeight: '600', lineHeight: 12, fontFamily: 'System' },
    },
  },
  spacing: {
    base: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 24,
      xl: 32,
      '2xl': 48,
      '3xl': 64,
    },
    semantic: {
      component: { xs: 4, sm: 8, md: 16, lg: 24 },
      layout: { xs: 8, sm: 16, md: 24, lg: 32, xl: 48, '2xl': 64 },
      container: { xs: 8, sm: 16, md: 24, lg: 32 },
      card: { xs: 8, sm: 16, md: 24, lg: 32 },
      button: { xs: 4, sm: 8, md: 16, lg: 24 },
      input: { xs: 8, sm: 16, md: 24 },
      listItem: { xs: 8, sm: 16, md: 24 },
    },
    grid: {
      gap: { xs: 4, sm: 8, md: 16, lg: 24 },
      column: { xs: 8, sm: 16, md: 24, lg: 32 },
    },
    screen: {
      horizontal: 16,
      vertical: 24,
      top: 24,
      bottom: 24,
    },
    component: {
      header: { horizontal: 16, vertical: 16, height: 60 },
      tabBar: { horizontal: 8, vertical: 8, height: 60 },
      modal: { padding: 24, margin: 16, borderRadius: 24 },
      quickAction: { gap: 16, padding: 16 },
      welcomeBanner: { padding: 24, margin: 16 },
      section: { marginBottom: 24, padding: 16 },
    },
  },
  shadows: {
    none: { shadowColor: '#000', shadowOffset: { width: 0, height: 0 }, shadowOpacity: 0, shadowRadius: 0, elevation: 0 },
    sm: { shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.1, shadowRadius: 2, elevation: 2 },
    md: { shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 4 },
    lg: { shadowColor: '#000', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.15, shadowRadius: 8, elevation: 8 },
    xl: { shadowColor: '#000', shadowOffset: { width: 0, height: 8 }, shadowOpacity: 0.2, shadowRadius: 16, elevation: 16 },
    card: { shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 8, elevation: 4 },
    modal: { shadowColor: '#000', shadowOffset: { width: 0, height: 8 }, shadowOpacity: 0.25, shadowRadius: 16, elevation: 16 },
    header: { shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 4 },
    tabBar: { shadowColor: '#000', shadowOffset: { width: 0, height: -2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 4 },
  },
  borderRadius: {
    none: 0,
    xs: 2,
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
    '2xl': 20,
    '3xl': 24,
    full: 9999,
  },
  duration: { fast: 150, normal: 300, slow: 500 },
  easing: { linear: 'linear', ease: 'ease', easeIn: 'ease-in', easeOut: 'ease-out', easeInOut: 'ease-in-out' },
  nativeEasing: { linear: jest.fn(), ease: jest.fn(), easeIn: jest.fn(), easeOut: jest.fn(), easeInOut: jest.fn() },
  breakpoints: { xs: 0, sm: 576, md: 768, lg: 992, xl: 1200 },
  zIndex: { hide: -1, base: 0, docked: 10, dropdown: 1000, sticky: 1100, banner: 1200, overlay: 1300, modal: 1400, popover: 1500, skipLink: 1600, toast: 1700, tooltip: 1800 },
  zIndexUtils: { auto: 'auto', getNumeric: jest.fn(), getAuto: jest.fn() },
  elevationLevels: { none: 0, sm: 2, md: 4, lg: 8, xl: 16 },
  componentThemes: {},
};

// Simplified mock that avoids Jest hoisting issues
jest.mock('../../../context/ThemeContext', () => ({
  useTheme: () => ({
    theme: mockTheme,
    currentRole: null,
    setRole: jest.fn(),
    isDarkMode: false,
    toggleDarkMode: jest.fn(),
  }),
  useColors: () => mockTheme.colors,
  useTypography: () => mockTheme.typography,
  useSpacing: () => mockTheme.spacing,
  ThemeProvider: ({ children }: { children: React.ReactNode }) => children,
}));

// Mock ActivityIndicator to provide proper testID and props
jest.mock('react-native/Libraries/Components/ActivityIndicator/ActivityIndicator', () => {
  const React = require('react');
  const { View } = require('react-native');
  return {
    __esModule: true,
    default: ({ size = 'small', color = '#007AFF', testID, ...props }: any) => {
      // Return a View that represents the ActivityIndicator
      return React.createElement(View, {
        ...props,
        testID: testID,
        size,
        color,
      });
    },
  };
});

// Mock Typography component
jest.mock('../../atoms/Typography/Typography', () => {
  const React = require('react');
  const { Text } = require('react-native');
  const TypographyComponent = ({ children, style, testID, ...props }: any) => {
    return React.createElement(Text, {
      ...props,
      style: style || {},
      testID: testID || 'typography',
    }, children);
  };
  
  return {
    __esModule: true,
    Typography: TypographyComponent,
    default: TypographyComponent,
  };
});

describe('LoadingSpinner', () => {
  it('renders correctly with default props', () => {
    render(
      <ThemeProvider>
        <LoadingSpinner />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('loading-spinner')).toBeTruthy();
  });

  it('renders with custom size', () => {
    const { getByTestId } = render(
      <ThemeProvider>
        <LoadingSpinner size="small" />
      </ThemeProvider>
    );
    
    const spinner = getByTestId('loading-spinner');
    expect(spinner).toBeTruthy();
    
    // Verify the ActivityIndicator has the correct size prop
    const activityIndicator = getByTestId('loading-spinner-spinner');
    expect(activityIndicator.props.size).toBe('small');
  });

  it('renders with large size', () => {
    const { getByTestId } = render(
      <ThemeProvider>
        <LoadingSpinner size="large" />
      </ThemeProvider>
    );
    
    const activityIndicator = getByTestId('loading-spinner-spinner');
    expect(activityIndicator.props.size).toBe('large');
  });

  it('applies spacing based on theme tokens', () => {
    const { getByTestId } = render(
      <ThemeProvider>
        <LoadingSpinner message="Loading..." />
      </ThemeProvider>
    );
    
    const spinnerContainer = getByTestId('loading-spinner');
    // Style is an array, so we need to check the first element or flatten it
    const containerStyle = Array.isArray(spinnerContainer.props.style) 
      ? spinnerContainer.props.style[0] 
      : spinnerContainer.props.style;
    expect(containerStyle.padding).toBe(24); // theme.spacing.base.lg
    
    const message = getByTestId('loading-message');
    const messageStyle = Array.isArray(message.props.style) 
      ? message.props.style[0] 
      : message.props.style;
    expect(messageStyle.marginTop).toBe(8); // theme.spacing.base.sm
  });

  it('renders with custom message', () => {
    render(
      <ThemeProvider>
        <LoadingSpinner message="Loading data..." />
      </ThemeProvider>
    );
    
    expect(screen.getByText('Loading data...')).toBeTruthy();
  });

  it('renders horizontally when vertical is false', () => {
    render(
      <ThemeProvider>
        <LoadingSpinner message="Loading" vertical={false} />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('loading-spinner')).toBeTruthy();
    expect(screen.getByText('Loading')).toBeTruthy();
  });

  it('applies custom accessibility label', () => {
    render(
      <ThemeProvider>
        <LoadingSpinner accessibilityLabel="Custom loading label" />
      </ThemeProvider>
    );
    
    expect(screen.getByLabelText('Custom loading label')).toBeTruthy();
  });

  it('applies custom testID', () => {
    render(
      <ThemeProvider>
        <LoadingSpinner testID="custom-spinner" />
      </ThemeProvider>
    );
    
    expect(screen.getByTestId('custom-spinner')).toBeTruthy();
    expect(screen.getByTestId('custom-spinner-spinner')).toBeTruthy();
  });
});
</file>

<file path="src/components/molecules/SkeletonCard/SkeletonCard.tsx">
/**
 * SkeletonCard Component
 * Content placeholder for cards with consistent loading states
 */

import React, { useMemo, useCallback } from 'react';
import { View, ViewStyle, StyleSheet } from 'react-native';
import { useTheme, useColors } from '../../../context/ThemeContext';

// SkeletonCard Props Interface
export interface SkeletonCardProps {
  // Size variants
  variant?: 'small' | 'medium' | 'large' | 'compact';
  
  // Layout
  horizontal?: boolean;
  
  // Number of lines for text placeholders
  lines?: number;
  
  // Show avatar placeholder
  showAvatar?: boolean;
  
  // Custom styling
  style?: ViewStyle;
  
  // Test ID
  testID?: string;
}

// SkeletonCard Component
export const SkeletonCard: React.FC<SkeletonCardProps> = ({
  variant = 'medium',
  horizontal = false,
  lines = 3,
  showAvatar = false,
  style,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get container styles based on variant - memoized
  const getContainerStyles = useMemo((): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: colors.surface.primary,
      borderRadius: theme.borderRadius.md,
      borderWidth: 1,
      borderColor: colors.border.primary,
      overflow: 'hidden',
    };

    switch (variant) {
      case 'small':
        return {
          ...baseStyle,
          padding: theme.spacing.base.sm,
          minHeight: 80,
        };
      case 'medium':
        return {
          ...baseStyle,
          padding: theme.spacing.base.md,
          minHeight: 120,
        };
      case 'large':
        return {
          ...baseStyle,
          padding: theme.spacing.base.lg,
          minHeight: 180,
        };
      case 'compact':
        return {
          ...baseStyle,
          padding: theme.spacing.base.xs,
          minHeight: 60,
        };
      default:
        return {
          ...baseStyle,
          padding: theme.spacing.base.md,
          minHeight: 120,
        };
    }
  }, [variant, colors.surface.primary, colors.border.primary, theme.borderRadius.md, theme.spacing.base]);

  // Get layout styles - memoized
  const getLayoutStyles = useMemo((): ViewStyle => {
    if (horizontal) {
      return {
        flexDirection: 'row',
        alignItems: 'center',
      };
    }
    return {
      flexDirection: 'column',
    };
  }, [horizontal]);

  // Get skeleton styles
  const getSkeletonStyles = (type: 'avatar' | 'title' | 'line' | 'action'): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: colors.surface.secondary,
      borderRadius: theme.borderRadius.sm,
    };

    switch (type) {
      case 'avatar':
        return {
          ...baseStyle,
          width: 40,
          height: 40,
          borderRadius: 20,
          marginRight: horizontal ? theme.spacing.base.md : 0,
          marginBottom: !horizontal ? theme.spacing.base.sm : 0,
        };
      case 'title':
        return {
          ...baseStyle,
          width: '60%',
          height: 16,
          marginBottom: theme.spacing.base.xs,
        };
      case 'line':
        return {
          ...baseStyle,
          width: '100%',
          height: 12,
          marginBottom: theme.spacing.base.xs,
        };
      case 'action':
        return {
          ...baseStyle,
          width: 80,
          height: 32,
          marginTop: theme.spacing.base.sm,
          alignSelf: horizontal ? 'flex-end' : 'flex-start',
        };
      default:
        return baseStyle;
    }
  };

  // Render skeleton lines
  const renderLines = () => {
    return Array.from({ length: lines }, (_, index) => (
      <View
        key={index}
        style={[
          getSkeletonStyles('line'),
          {
            width: index === 0 ? '100%' : `${100 - (index * 20)}%`,
          },
        ]}
      />
    ));
  };

  return (
    <View
      style={[
        getContainerStyles,
        getLayoutStyles,
        style,
      ]}
      testID={testID || 'skeleton-card'}
    >
      {/* Avatar placeholder */}
      {showAvatar && <View style={getSkeletonStyles('avatar')} />}
      
      {/* Content area */}
      <View style={{ flex: 1 }} testID={testID ? `${testID}-content` : 'skeleton-content'}>
        {/* Title placeholder */}
        <View style={getSkeletonStyles('title')} />
        
        {/* Text lines */}
        {renderLines()}
        
        {/* Action button placeholder */}
        <View style={getSkeletonStyles('action')} />
      </View>
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Export default
export default SkeletonCard;
</file>

<file path="src/components/organisms/ClassFormModal.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Modal, TouchableOpacity, TextInput, ScrollView, Alert, ActivityIndicator } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { ClassService } from '@/src/services/classService';
import { Class, CreateClassData, UpdateClassData } from '@/src/types/class';
import { ClassWithDetails } from '@/src/services/classService';
import { useAuth } from '@/src/context/AuthContext';

interface ClassFormModalProps {
  visible: boolean;
  onClose: () => void;
  onSuccess: () => void;
  classData?: ClassWithDetails | null;
  schoolId: number;
}

export default function ClassFormModal({
  visible,
  onClose,
  onSuccess,
  classData,
  schoolId,
}: ClassFormModalProps) {
  const { user } = useAuth();
  const [formData, setFormData] = useState<CreateClassData>({
    name: '',
    level: '',
    description: '',
    school_id: schoolId,
    student_capacity: 30,
    academic_year: new Date().getFullYear().toString(),
    semester: '1',
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (classData) {
      setFormData({
        name: classData.name,
        level: classData.level,
        description: classData.description || '',
        school_id: classData.school_id,
        student_capacity: classData.student_capacity,
        academic_year: classData.academic_year,
        semester: classData.semester,
      });
    } else {
      setFormData({
        name: '',
        level: '',
        description: '',
        school_id: schoolId,
        student_capacity: 30,
        academic_year: new Date().getFullYear().toString(),
        semester: '1',
      });
    }
    setErrors({});
  }, [classData, schoolId, visible]);

  const validateAcademicYear = (year: string): boolean => {
    // Validate format: YYYY or YYYY-YYYY
    const singleYear = /^\d{4}$/;
    const rangeYear = /^\d{4}-\d{4}$/;
    
    if (singleYear.test(year)) {
      const yearNum = parseInt(year);
      const currentYear = new Date().getFullYear();
      return yearNum >= 2000 && yearNum <= currentYear + 10;
    }
    
    if (rangeYear.test(year)) {
      const [startYear, endYear] = year.split('-').map(y => parseInt(y));
      return startYear < endYear && (endYear - startYear) === 1;
    }
    
    return false;
  };

  const formatAcademicYear = (value: string): string => {
    // Remove non-numeric and non-dash characters
    let cleanValue = value.replace(/[^\d-]/g, '');
    
    // Handle auto-formatting for range
    if (cleanValue.length > 4 && !cleanValue.includes('-')) {
      const year = cleanValue.substring(0, 4);
      const nextYear = (parseInt(year) + 1).toString();
      return `${year}-${nextYear}`;
    }
    
    return cleanValue;
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Nama kelas wajib diisi';
    }

    if (!formData.level.trim()) {
      newErrors.level = 'Tingkat kelas wajib diisi';
    }

    if (formData.student_capacity && formData.student_capacity < 1) {
      newErrors.student_capacity = 'Kapasitas siswa minimal 1';
    }

    if (!formData.academic_year.trim()) {
      newErrors.academic_year = 'Tahun akademik wajib diisi';
    } else if (!validateAcademicYear(formData.academic_year)) {
      newErrors.academic_year = 'Format tahun akademik tidak valid (YYYY atau YYYY-YYYY)';
    }

    if (!formData.semester.trim()) {
      newErrors.semester = 'Semester wajib diisi';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    if (!user?.id) {
      Alert.alert('Error', 'User tidak terautentikasi');
      return;
    }

    try {
      setLoading(true);

      if (classData) {
        // Update existing class
        const updateData: UpdateClassData = {
          name: formData.name,
          level: formData.level,
          description: formData.description,
          student_capacity: formData.student_capacity,
          academic_year: formData.academic_year,
          semester: formData.semester,
        };

        await ClassService.updateClass(classData.id, updateData, user.id);
        Alert.alert('Success', 'Kelas berhasil diperbarui');
        onSuccess();
      } else {
        // Create new class
        await ClassService.createClass(formData, user.id);
        Alert.alert('Success', 'Kelas berhasil dibuat');
        onSuccess();
      }
    } catch (error) {
      Alert.alert('Error', 'Terjadi kesalahan saat menyimpan kelas');
      console.error('Error saving class:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: keyof CreateClassData, value: string | number | '1' | '2') => {
    let processedValue = value;
    
    if (field === 'academic_year' && typeof value === 'string') {
      processedValue = formatAcademicYear(value);
    }
    
    setFormData(prev => ({ ...prev, [field]: processedValue }));
    setErrors(prev => ({ ...prev, [field]: '' }));
  };

  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent={true}
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>
              {classData ? 'Edit Kelas' : 'Tambah Kelas Baru'}
            </Text>
            <TouchableOpacity onPress={onClose} style={styles.closeButton}>
              <Ionicons name="close" size={24} color="#333333" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalBody} showsVerticalScrollIndicator={false}>
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Nama Kelas *</Text>
              <TextInput
                style={[styles.textInput, errors.name && styles.inputError]}
                value={formData.name}
                onChangeText={(value) => handleInputChange('name', value)}
                placeholder="Contoh: Tahfidz Al-Baqarah"
                placeholderTextColor="#999999"
                maxLength={100}
              />
              {errors.name && <Text style={styles.errorText}>{errors.name}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Tingkat *</Text>
              <TextInput
                style={[styles.textInput, errors.level && styles.inputError]}
                value={formData.level}
                onChangeText={(value) => handleInputChange('level', value)}
                placeholder="Contoh: Tingkat 1"
                placeholderTextColor="#999999"
                maxLength={50}
              />
              {errors.level && <Text style={styles.errorText}>{errors.level}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Deskripsi</Text>
              <TextInput
                style={[styles.textInput, styles.textArea, errors.description && styles.inputError]}
                value={formData.description}
                onChangeText={(value) => handleInputChange('description', value)}
                placeholder="Deskripsi kelas..."
                placeholderTextColor="#999999"
                multiline
                numberOfLines={4}
                maxLength={500}
              />
              {errors.description && <Text style={styles.errorText}>{errors.description}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Kapasitas Siswa *</Text>
              <TextInput
                style={[styles.textInput, errors.student_capacity && styles.inputError]}
                value={formData.student_capacity?.toString() || ''}
                onChangeText={(value) => handleInputChange('student_capacity', parseInt(value) || 0)}
                placeholder="30"
                placeholderTextColor="#999999"
                keyboardType="numeric"
                maxLength={3}
              />
              {errors.student_capacity && <Text style={styles.errorText}>{errors.student_capacity}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Tahun Akademik *</Text>
              <TextInput
                style={[styles.textInput, errors.academic_year && styles.inputError]}
                value={formData.academic_year}
                onChangeText={(value) => handleInputChange('academic_year', value)}
                placeholder="2024-2025"
                placeholderTextColor="#999999"
                keyboardType="numeric"
                maxLength={9}
              />
              
              <Text style={styles.inputHelp}>
                Format: YYYY atau YYYY-YYYY (contoh: 2024 atau 2024-2025)
              </Text>
              {errors.academic_year && <Text style={styles.errorText}>{errors.academic_year}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Semester *</Text>
              <View style={styles.semesterContainer}>
                {['1', '2'].map((semester) => (
                  <TouchableOpacity
                    key={semester}
                    style={[
                      styles.semesterOption,
                      formData.semester === semester && styles.selectedSemester,
                    ]}
                    onPress={() => handleInputChange('semester', semester as '1' | '2')}
                  >
                    <Text
                      style={[
                        styles.semesterText,
                        formData.semester === semester && styles.selectedSemesterText,
                      ]}
                    >
                      Semester {semester}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              {errors.semester && <Text style={styles.errorText}>{errors.semester}</Text>}
            </View>
          </ScrollView>

          <View style={styles.modalFooter}>
            <TouchableOpacity 
              style={[styles.cancelButton, loading && styles.disabledButton]}
              onPress={onClose}
              disabled={loading}
            >
              <Text style={styles.cancelButtonText}>Batal</Text>
            </TouchableOpacity>
            <TouchableOpacity 
              style={[styles.saveButton, loading && styles.disabledButton]}
              onPress={handleSubmit}
              disabled={loading}
            >
              {loading ? (
                <ActivityIndicator size="small" color="#ffffff" />
              ) : (
                <Text style={styles.saveButtonText}>
                  {classData ? 'Update' : 'Simpan'}
                </Text>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    maxHeight: '80%',
    backgroundColor: '#ffffff',
    borderRadius: 16,
    overflow: 'hidden',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 5,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
  },
  closeButton: {
    padding: 4,
  },
  modalBody: {
    padding: 20,
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#ffffff',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  inputError: {
    borderColor: '#ff3b30',
  },
  errorText: {
    fontSize: 14,
    color: '#ff3b30',
    marginTop: 4,
  },
  inputHelp: {
    fontSize: 12,
    color: '#666666',
    marginTop: 4,
  },
  semesterContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  semesterOption: {
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    backgroundColor: '#ffffff',
  },
  selectedSemester: {
    backgroundColor: '#005e7a',
    borderColor: '#005e7a',
  },
  semesterText: {
    fontSize: 14,
    color: '#333333',
  },
  selectedSemesterText: {
    color: '#ffffff',
  },
  modalFooter: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderRightWidth: 0.5,
    borderRightColor: '#e0e0e0',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    backgroundColor: '#005e7a',
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  disabledButton: {
    opacity: 0.5,
  },
});
</file>

<file path="src/components/organisms/NavigationPanel/NavigationPanel.test.tsx">
/**
 * NavigationPanel Component Tests
 * Unit tests for the NavigationPanel component functionality and accessibility
 */

import React from 'react';
import { render, fireEvent, act } from '@testing-library/react-native';
import { NavigationPanel } from './NavigationPanel';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

// Mock data
const mockNotifications = [
  {
    id: '1',
    title: 'Test Notification 1',
    message: 'Test message 1',
    type: 'info' as const,
    timestamp: '1 hour ago',
    read: false,
    onPress: jest.fn(),
    onDismiss: jest.fn(),
  },
  {
    id: '2',
    title: 'Test Notification 2',
    message: 'Test message 2',
    type: 'success' as const,
    timestamp: '2 hours ago',
    read: true,
    onPress: jest.fn(),
    onDismiss: jest.fn(),
  },
];

const mockNavigationItems = [
  {
    id: '1',
    title: 'Dashboard',
    subtitle: 'Overview',
    icon: 'home' as const,
    onPress: jest.fn(),
  },
  {
    id: '2',
    title: 'Messages',
    subtitle: 'View messages',
    icon: 'mail' as const,
    badge: 3,
    onPress: jest.fn(),
  },
];

describe('NavigationPanel Component', () => {
  beforeEach(() => {
    jest.useFakeTimers();
    // Clear all mocks
    jest.clearAllMocks();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  // Helper function to run timers
  const runTimers = () => {
    act(() => {
      jest.advanceTimersByTime(1000); // Advance by 1 second instead of running all timers
    });
  };

  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel testID="test-panel" />
        </TestWrapper>
      );

      const panel = getByTestId('test-panel');
      expect(panel).toBeTruthy();
    });

    it('renders with title and subtitle', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            title="Test Panel"
            subtitle="Test subtitle"
          />
        </TestWrapper>
      );

      expect(getByText('Test Panel')).toBeTruthy();
      expect(getByText('Test subtitle')).toBeTruthy();
    });

    it('renders notifications panel', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="notifications"
            notifications={mockNotifications}
          />
        </TestWrapper>
      );

      expect(getByText('Test Notification 1')).toBeTruthy();
      expect(getByText('Test Notification 2')).toBeTruthy();
    });

    it('renders navigation panel', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      expect(getByText('Dashboard')).toBeTruthy();
      expect(getByText('Messages')).toBeTruthy();
    });
  });

  // Type tests
  describe('Panel Types', () => {
    it('renders notifications type correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="notifications"
            notifications={mockNotifications}
          />
        </TestWrapper>
      );

      expect(getByText('Notifications')).toBeTruthy();
    });

    it('renders navigation type correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      expect(getByText('Navigation')).toBeTruthy();
    });

    it('renders mixed type correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="mixed"
            notifications={mockNotifications.slice(0, 1)}
            navigationItems={mockNavigationItems.slice(0, 1)}
          />
        </TestWrapper>
      );

      expect(getByText('Dashboard')).toBeTruthy();
      expect(getByText('Test Notification 1')).toBeTruthy();
    });
  });

  // Variant tests
  describe('Variants', () => {
    it('renders default variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            variant="default"
            testID="default-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('default-panel');
      expect(panel).toBeTruthy();
    });

    it('renders elevated variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            variant="elevated"
            testID="elevated-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('elevated-panel');
      expect(panel).toBeTruthy();
    });

    it('renders transparent variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            variant="transparent"
            testID="transparent-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('transparent-panel');
      expect(panel).toBeTruthy();
    });
  });

  // Header tests
  describe('Header', () => {
    it('shows header by default', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel title="Test Header" />
        </TestWrapper>
      );

      expect(getByText('Test Header')).toBeTruthy();
    });

    it('hides header when showHeader is false', () => {
      const { queryByText } = render(
        <TestWrapper>
          <NavigationPanel
            title="Hidden Header"
            showHeader={false}
          />
        </TestWrapper>
      );

      expect(queryByText('Hidden Header')).toBeNull();
    });

    it('shows unread count for notifications', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="notifications"
            notifications={mockNotifications}
          />
        </TestWrapper>
      );

      expect(getByText('1 unread')).toBeTruthy();
    });
  });

  // Action buttons tests
  describe('Action Buttons', () => {
    it('shows action buttons by default', () => {
      const mockOnRefresh = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            onRefresh={mockOnRefresh}
          />
        </TestWrapper>
      );

      const refreshButton = getByLabelText('Refresh');
      expect(refreshButton).toBeTruthy();
    });

    it('hides action buttons when showActions is false', () => {
      const mockOnRefresh = jest.fn();
      const { queryByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            onRefresh={mockOnRefresh}
            showActions={false}
          />
        </TestWrapper>
      );

      const refreshButton = queryByLabelText('Refresh');
      expect(refreshButton).toBeNull();
    });

    it('handles refresh action', () => {
      const mockOnRefresh = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            onRefresh={mockOnRefresh}
          />
        </TestWrapper>
      );

      const refreshButton = getByLabelText('Refresh');
      fireEvent.press(refreshButton);
      expect(mockOnRefresh).toHaveBeenCalledTimes(1);
    });

    it('handles mark all read action', () => {
      const mockOnMarkAllRead = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            type="notifications"
            notifications={mockNotifications}
            onMarkAllRead={mockOnMarkAllRead}
          />
        </TestWrapper>
      );

      const markAllReadButton = getByLabelText('Mark all as read');
      fireEvent.press(markAllReadButton);
      expect(mockOnMarkAllRead).toHaveBeenCalledTimes(1);
    });

    it('handles clear all action', () => {
      const mockOnClearAll = jest.fn();
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            onClearAll={mockOnClearAll}
          />
        </TestWrapper>
      );

      const clearAllButton = getByLabelText('Clear all');
      fireEvent.press(clearAllButton);
      expect(mockOnClearAll).toHaveBeenCalledTimes(1);
    });

    it('does not show mark all read when no unread notifications', () => {
      const readNotifications = mockNotifications.map(n => ({ ...n, read: true }));
      const { queryByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            type="notifications"
            notifications={readNotifications}
            onMarkAllRead={() => {}}
          />
        </TestWrapper>
      );

      const markAllReadButton = queryByLabelText('Mark all as read');
      expect(markAllReadButton).toBeNull();
    });
  });

  // Navigation item tests
  describe('Navigation Items', () => {
    it('renders navigation items correctly', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      expect(getByText('Dashboard')).toBeTruthy();
      expect(getByText('Overview')).toBeTruthy();
      expect(getByText('Messages')).toBeTruthy();
      expect(getByText('View messages')).toBeTruthy();
    });

    it('handles navigation item press', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      const dashboardItem = getByText('Dashboard');
      fireEvent.press(dashboardItem);
      expect(mockNavigationItems[0].onPress).toHaveBeenCalledTimes(1);
    });

    it('shows badges on navigation items', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      expect(getByText('3')).toBeTruthy();
    });

    it('handles disabled navigation items', () => {
      const disabledItems = [
        { ...mockNavigationItems[0], disabled: true },
      ];

      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={disabledItems}
          />
        </TestWrapper>
      );

      const dashboardItem = getByText('Dashboard');
      fireEvent.press(dashboardItem);
      expect(mockNavigationItems[0].onPress).not.toHaveBeenCalled();
    });
  });

  // Empty state tests
  describe('Empty State', () => {
    it('shows empty state when no content', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={[]}
            navigationItems={[]}
          />
        </TestWrapper>
      );

      expect(getByText('No items')).toBeTruthy();
      expect(getByText('There are no items to display')).toBeTruthy();
    });

    it('shows custom empty state', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={[]}
            navigationItems={[]}
            emptyTitle="Custom Empty Title"
            emptyMessage="Custom empty message"
          />
        </TestWrapper>
      );

      expect(getByText('Custom Empty Title')).toBeTruthy();
      expect(getByText('Custom empty message')).toBeTruthy();
    });

    it('shows refresh button in empty state', () => {
      const mockOnRefresh = jest.fn();
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={[]}
            navigationItems={[]}
            onRefresh={mockOnRefresh}
          />
        </TestWrapper>
      );

      const refreshButton = getByText('Refresh');
      fireEvent.press(refreshButton);
      expect(mockOnRefresh).toHaveBeenCalledTimes(1);
    });
  });

  // Loading state tests
  describe('Loading State', () => {
    it('shows loading state', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            loading={true}
            notifications={[]}
            navigationItems={[]}
          />
        </TestWrapper>
      );

      expect(getByText('Loading...')).toBeTruthy();
    });

    it('shows content when loading with existing items', () => {
      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            loading={true}
            notifications={mockNotifications}
          />
        </TestWrapper>
      );

      expect(getByText('Test Notification 1')).toBeTruthy();
    });

    it('handles loading animation', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            loading={true}
            notifications={[]}
            testID="loading-panel"
          />
        </TestWrapper>
      );
      runTimers();

      const panel = getByTestId('loading-panel');
      expect(panel).toBeTruthy();
    });
  });

  // Scrollable content tests
  describe('Scrollable Content', () => {
    it('renders scrollable content by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            scrollable={true}
            testID="scrollable-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('scrollable-panel');
      expect(panel).toBeTruthy();
    });

    it('renders non-scrollable content', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            scrollable={false}
            testID="non-scrollable-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('non-scrollable-panel');
      expect(panel).toBeTruthy();
    });
  });

  // Max height tests
  describe('Max Height', () => {
    it('applies custom max height', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            maxHeight={300}
            testID="max-height-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('max-height-panel');
      expect(panel).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has correct accessibility role', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel testID="accessible-panel" />
        </TestWrapper>
      );

      const panel = getByTestId('accessible-panel');
      expect(panel.props.accessibilityRole).toBe('region');
    });

    it('applies custom accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            accessibilityLabel="Custom panel label"
            testID="custom-label-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('custom-label-panel');
      expect(panel.props.accessibilityLabel).toBe('Custom panel label');
    });

    it('uses title as default accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            title="Test Panel Title"
            testID="title-label-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('title-label-panel');
      expect(panel.props.accessibilityLabel).toBe('Test Panel Title');
    });

    it('provides proper accessibility for action buttons', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            onRefresh={() => {}}
            onMarkAllRead={() => {}}
            onClearAll={() => {}}
          />
        </TestWrapper>
      );

      const refreshButton = getByLabelText('Refresh');
      const markAllReadButton = getByLabelText('Mark all as read');
      const clearAllButton = getByLabelText('Clear all');

      expect(refreshButton.props.accessibilityRole).toBe('button');
      expect(markAllReadButton.props.accessibilityRole).toBe('button');
      expect(clearAllButton.props.accessibilityRole).toBe('button');
    });

    it('provides proper accessibility for navigation items', () => {
      const { getByLabelText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={mockNavigationItems}
          />
        </TestWrapper>
      );

      const dashboardItem = getByLabelText('Dashboard');
      expect(dashboardItem.props.accessibilityRole).toBe('button');
    });
  });

  // Custom styling tests
  describe('Custom Styling', () => {
    it('applies custom panel styles', () => {
      const customStyle = { borderWidth: 2 };
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            style={customStyle}
            testID="custom-styled-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('custom-styled-panel');
      expect(panel).toBeTruthy();
    });

    it('applies custom header styles', () => {
      const customHeaderStyle = { backgroundColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            title="Custom Header"
            headerStyle={customHeaderStyle}
            testID="custom-header-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('custom-header-panel');
      expect(panel).toBeTruthy();
    });

    it('applies custom content styles', () => {
      const customContentStyle = { padding: 20 };
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={mockNotifications}
            contentStyle={customContentStyle}
            testID="custom-content-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('custom-content-panel');
      expect(panel).toBeTruthy();
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles empty arrays gracefully', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <NavigationPanel
            notifications={[]}
            navigationItems={[]}
            testID="empty-arrays-panel"
          />
        </TestWrapper>
      );

      const panel = getByTestId('empty-arrays-panel');
      expect(panel).toBeTruthy();
    });

    it('handles missing onPress handlers', () => {
      const itemsWithoutHandlers = [
        { id: '1', title: 'No Handler', icon: 'home' as const, onPress: jest.fn() },
      ];

      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={itemsWithoutHandlers}
          />
        </TestWrapper>
      );

      const item = getByText('No Handler');
      expect(item).toBeTruthy();
    });

    it('handles large badge numbers', () => {
      const itemsWithLargeBadge = [
        { ...mockNavigationItems[0], badge: 150 },
      ];

      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={itemsWithLargeBadge}
          />
        </TestWrapper>
      );

      expect(getByText('99+')).toBeTruthy();
    });

    it('handles long titles gracefully', () => {
      const longTitleItems = [
        {
          id: '1',
          title: 'This is a very long navigation item title that should be handled gracefully',
          subtitle: 'This is also a very long subtitle that should not break the layout',
          icon: 'home' as const,
          onPress: jest.fn(),
        },
      ];

      const { getByText } = render(
        <TestWrapper>
          <NavigationPanel
            type="navigation"
            navigationItems={longTitleItems}
          />
        </TestWrapper>
      );

      expect(getByText('This is a very long navigation item title that should be handled gracefully')).toBeTruthy();
    });
  });
});
</file>

<file path="src/components/templates/ClassDetailView.tsx">
import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { useAuth } from '@/src/context/AuthContext';
import { ClassService } from '@/src/services/classService';
import { Class } from '@/src/types/class';
import { ClassWithDetails } from '@/src/services/classService';
import SubjectManager from '@/src/components/organisms/SubjectManager';
import ClassFormModal from '@/src/components/organisms/ClassFormModal';

export default function ClassDetailView() {
  const router = useRouter();
  const { id, tab } = useLocalSearchParams();
  const { user, profile } = useAuth();
  const [classData, setClassData] = useState<ClassWithDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [activeTab, setActiveTab] = useState<'details' | 'subjects' | 'students' | 'reports'>('details');

  // Handle edit modal when school_id is missing
  useEffect(() => {
    if (showEditModal && !profile?.school_id) {
      Alert.alert(
        'Error',
        'School ID is required to edit class. Please contact administrator.',
        [{ text: 'OK', onPress: () => setShowEditModal(false) }]
      );
    }
  }, [showEditModal, profile?.school_id]);

  const fetchClassDetails = useCallback(async () => {
    if (!id) return;

    try {
      setLoading(true);
      setError(null);

      const parsedId = parseInt(id as string);
      if (isNaN(parsedId)) {
        setError('Invalid class ID provided');
        return;
      }

      if (!user?.id) {
        setError('User not authenticated');
        return;
      }

      const classData = await ClassService.getClassById(parsedId, user.id);
      setClassData(classData);
    } catch (error: any) {
      setError(error.message || 'Failed to load class details');
      console.error('Error fetching class details:', error);
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    fetchClassDetails();
  }, [fetchClassDetails]);

  // Handle tab parameter from navigation
  useEffect(() => {
    if (tab) {
      const validTabs = ['details', 'subjects', 'students', 'reports'];
      if (validTabs.includes(tab as string)) {
        setActiveTab(tab as 'details' | 'subjects' | 'students' | 'reports');
      }
    }
  }, [tab]);

  const handleEditClass = () => {
    setShowEditModal(true);
  };

  const handleArchiveClass = async () => {
    if (!classData) return;

    Alert.alert(
      'Archive Class',
      'Are you sure you want to archive this class? This action can be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Archive',
          style: 'destructive',
          onPress: async () => {
            try {
              if (!user?.id) {
                Alert.alert('Error', 'User not authenticated');
                return;
              }
              await ClassService.updateClass(classData.id, { status: 'archived' }, user.id);
              Alert.alert('Success', 'Class has been archived');
              fetchClassDetails();
            } catch (error: any) {
              Alert.alert('Error', error.message || 'Failed to archive class');
            }
          },
        },
      ]
    );
  };

  const handleActivateClass = async () => {
    if (!classData) return;

    try {
      if (!user?.id) {
        Alert.alert('Error', 'User not authenticated');
        return;
      }
      await ClassService.updateClass(classData.id, { status: 'active' }, user.id);
      Alert.alert('Success', 'Class has been activated');
      fetchClassDetails();
    } catch (error: any) {
      Alert.alert('Error', error.message || 'Failed to activate class');
    }
  };

  const handleDeleteClass = async () => {
    if (!classData) return;

    Alert.alert(
      'Delete Class',
      'Are you sure you want to permanently delete this class? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              if (!user?.id) {
                Alert.alert('Error', 'User not authenticated');
                return;
              }
              await ClassService.deleteClass(classData.id, user.id);
              Alert.alert('Success', 'Class has been deleted');
              router.back();
            } catch (error: any) {
              Alert.alert('Error', error.message || 'Failed to delete class');
            }
          },
        },
      ]
    );
  };

  const handleTabChange = (tab: 'details' | 'subjects' | 'students' | 'reports') => {
    setActiveTab(tab);
  };

  const handleFormSuccess = () => {
    setShowEditModal(false);
    fetchClassDetails();
  };

  const handleSubjectCountChange = (count: number) => {
    if (classData) {
      setClassData({ ...classData, subject_count: count });
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#005e7a" />
        </View>
      </SafeAreaView>
    );
  }

  if (error || !classData) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.errorContainer}>
          <Ionicons name="alert-circle-outline" size={48} color="#ff3b30" />
          <Text style={styles.errorText}>{error || 'Class not found'}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={fetchClassDetails}>
            <Text style={styles.retryButtonText}>Retry</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  const renderDetails = () => (
    <ScrollView style={styles.content}>
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Informasi Kelas</Text>
        <View style={styles.infoCard}>
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Nama Kelas</Text>
            <Text style={styles.infoValue}>{classData.name}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Tingkat</Text>
            <Text style={styles.infoValue}>{classData.level}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Status</Text>
            <View style={[styles.statusBadge, styles[`status_${classData.status}`]]}>
              <Text style={styles.statusText}>{classData.status.toUpperCase()}</Text>
            </View>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Kapasitas Siswa</Text>
            <Text style={styles.infoValue}>
              {classData.student_count} / {classData.student_capacity}
            </Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Tahun Akademik</Text>
            <Text style={styles.infoValue}>{classData.academic_year}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Semester</Text>
            <Text style={styles.infoValue}>{classData.semester}</Text>
          </View>
          
          {classData.description && (
            <View style={styles.descriptionSection}>
              <Text style={styles.infoLabel}>Deskripsi</Text>
              <Text style={styles.descriptionText}>{classData.description}</Text>
            </View>
          )}
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Statistik</Text>
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Ionicons name="people" size={24} color="#005e7a" />
            <Text style={styles.statNumber}>{classData.student_count || 0}</Text>
            <Text style={styles.statLabel}>Siswa</Text>
          </View>
          
          <View style={styles.statCard}>
            <Ionicons name="book" size={24} color="#005e7a" />
            <Text style={styles.statNumber}>{classData.subject_count || 0}</Text>
            <Text style={styles.statLabel}>Mata Pelajaran</Text>
          </View>
          
          <View style={styles.statCard}>
            <Ionicons name="person" size={24} color="#005e7a" />
            <Text style={styles.statNumber}>{classData.teacher_count || 0}</Text>
            <Text style={styles.statLabel}>Guru</Text>
          </View>
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Informasi Tambahan</Text>
        <View style={styles.infoCard}>
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Dibuat pada</Text>
            <Text style={styles.infoValue}>{new Date(classData.created_at).toLocaleDateString('id-ID')}</Text>
          </View>
          
          <View style={styles.infoRow}>
            <Text style={styles.infoLabel}>Terakhir diperbarui</Text>
            <Text style={styles.infoValue}>{new Date(classData.updated_at).toLocaleDateString('id-ID')}</Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        
        <Text style={styles.headerTitle}>{classData.name}</Text>
        
        <View style={styles.headerActions}>
          <TouchableOpacity onPress={handleEditClass} style={styles.actionButton}>
            <Ionicons name="create-outline" size={20} color="#005e7a" />
          </TouchableOpacity>
          
          {classData.status === 'active' && (
            <TouchableOpacity onPress={handleArchiveClass} style={styles.actionButton}>
              <Ionicons name="archive-outline" size={20} color="#ff9500" />
            </TouchableOpacity>
          )}
          
          {classData.status === 'archived' && (
            <TouchableOpacity onPress={handleActivateClass} style={styles.actionButton}>
              <Ionicons name="refresh-outline" size={20} color="#4CAF50" />
            </TouchableOpacity>
          )}
          
          <TouchableOpacity onPress={handleDeleteClass} style={styles.actionButton}>
            <Ionicons name="trash-outline" size={20} color="#ff3b30" />
          </TouchableOpacity>
        </View>
      </View>

      {/* Tabs */}
      <View style={styles.tabs}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'details' && styles.activeTab]}
          onPress={() => handleTabChange('details')}
        >
          <Text style={[styles.tabText, activeTab === 'details' && styles.activeTabText]}>
            Detail
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.tab, activeTab === 'subjects' && styles.activeTab]}
          onPress={() => handleTabChange('subjects')}
        >
          <Text style={[styles.tabText, activeTab === 'subjects' && styles.activeTabText]}>
            Mata Pelajaran ({classData.subject_count || 0})
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.tab, activeTab === 'students' && styles.activeTab]}
          onPress={() => handleTabChange('students')}
        >
          <Text style={[styles.tabText, activeTab === 'students' && styles.activeTabText]}>
            Siswa
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.tab, activeTab === 'reports' && styles.activeTab]}
          onPress={() => handleTabChange('reports')}
        >
          <Text style={[styles.tabText, activeTab === 'reports' && styles.activeTabText]}>
            Laporan
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      {activeTab === 'details' && renderDetails()}
      {activeTab === 'subjects' && (
        <SubjectManager
          classId={classData.id}
          onSubjectCountChange={handleSubjectCountChange}
        />
      )}
      {activeTab === 'students' && (
        <View style={styles.content}>
          <Text style={styles.comingSoon}>Fitur Manajemen Siswa akan segera hadir</Text>
        </View>
      )}
      {activeTab === 'reports' && (
        <View style={styles.content}>
          <Text style={styles.comingSoon}>Fitur Laporan akan segera hadir</Text>
        </View>
      )}

      {/* Edit Modal */}
      {profile?.school_id && (
        <ClassFormModal
          visible={showEditModal}
          onClose={() => setShowEditModal(false)}
          onSuccess={handleFormSuccess}
          classData={classData}
          schoolId={profile.school_id}
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  backButton: {
    padding: 4,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    marginHorizontal: 16,
  },
  headerActions: {
    flexDirection: 'row',
    gap: 16,
  },
  actionButton: {
    padding: 4,
  },
  tabs: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#005e7a',
  },
  tabText: {
    fontSize: 14,
    color: '#666666',
  },
  activeTabText: {
    color: '#005e7a',
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#ff3b30',
    textAlign: 'center',
    marginVertical: 16,
  },
  retryButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginHorizontal: 16,
    marginVertical: 12,
  },
  infoCard: {
    backgroundColor: '#ffffff',
    marginHorizontal: 16,
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  descriptionSection: {
    marginTop: 16,
  },
  descriptionText: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
    marginTop: 4,
  },
  infoLabel: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '600',
  },
  infoValue: {
    fontSize: 14,
    color: '#333333',
    fontWeight: '600',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  status_active: {
    backgroundColor: '#e8f5e8',
  },
  status_inactive: {
    backgroundColor: '#fff3e0',
  },
  status_archived: {
    backgroundColor: '#f5f5f5',
  },
  statusText: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginHorizontal: 16,
  },
  statCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
    flex: 1,
    marginHorizontal: 4,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#005e7a',
    marginTop: 8,
  },
  statLabel: {
    fontSize: 12,
    color: '#666666',
    marginTop: 4,
  },
  comingSoon: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    marginTop: 50,
  },
});
</file>

<file path="src/components/templates/FormTemplate/FormTemplate.tsx">
/**
 * FormTemplate Component
 * Consistent form template with header, form fields, and action buttons
 */

import React from 'react';
import {
    View,
    ScrollView,
    ViewStyle,
    StyleSheet,
    KeyboardAvoidingView,
    Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Button } from '../../atoms/Button';
import { Card } from '../../molecules/Card';

// Form section interface
export interface FormSection {
    id: string;
    title?: string;
    description?: string;
    children: React.ReactNode;
}

// Form action interface
export interface FormAction {
    label: string;
    onPress: () => void;
    variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
    loading?: boolean;
    disabled?: boolean;
    icon?: keyof typeof Ionicons.glyphMap;
    fullWidth?: boolean;
}

// FormTemplate Props Interface
export interface FormTemplateProps {
    // Header configuration
    title: string;
    subtitle?: string;
    description?: string;

    // Form content
    children?: React.ReactNode;
    sections?: FormSection[];

    // Actions
    primaryAction?: FormAction;
    secondaryAction?: FormAction;
    actions?: FormAction[];

    // Layout options
    variant?: 'default' | 'card' | 'modal';
    scrollable?: boolean;
    keyboardAvoiding?: boolean;
    contentPadding?: boolean;

    // Custom styling
    style?: ViewStyle;
    headerStyle?: ViewStyle;
    contentStyle?: ViewStyle;
    actionsStyle?: ViewStyle;

    // Accessibility
    accessibilityLabel?: string;

    // Test ID
    testID?: string;
}

// FormTemplate Component
export const FormTemplate: React.FC<FormTemplateProps> = ({
    title,
    subtitle,
    description,
    children,
    sections,
    primaryAction,
    secondaryAction,
    actions,
    variant = 'default',
    scrollable = true,
    keyboardAvoiding = true,
    contentPadding = true,
    style,
    headerStyle,
    contentStyle,
    actionsStyle,
    accessibilityLabel,
    testID,
}) => {
    const { theme } = useTheme();
    const colors = useColors();

    // Get container styles
    const getContainerStyles = (): ViewStyle => {
        const baseStyle: ViewStyle = {
            flex: 1,
            backgroundColor: colors.background.primary,
        };

        if (variant === 'card') {
            baseStyle.padding = theme.spacing.base.lg;
            baseStyle.backgroundColor = colors.background.secondary;
        }

        return baseStyle;
    };

    // Get header styles
    const getHeaderStyles = (): ViewStyle => {
        const baseStyle: ViewStyle = {
            marginBottom: theme.spacing.base.lg,
        };

        if (contentPadding && variant !== 'card') {
            baseStyle.paddingHorizontal = theme.spacing.base.lg;
            baseStyle.paddingTop = theme.spacing.base.lg;
        }

        return baseStyle;
    };

    // Get content styles
    const getContentStyles = (): ViewStyle => {
        const baseStyle: ViewStyle = {
            flex: 1,
        };

        if (contentPadding && variant !== 'card') {
            baseStyle.paddingHorizontal = theme.spacing.base.lg;
        }

        return baseStyle;
    };

    // Get actions styles
    const getActionsStyles = (): ViewStyle => {
        const baseStyle: ViewStyle = {
            marginTop: theme.spacing.base.xl,
            gap: theme.spacing.base.sm,
        };

        if (contentPadding && variant !== 'card') {
            baseStyle.paddingHorizontal = theme.spacing.base.lg;
            baseStyle.paddingBottom = theme.spacing.base.lg;
        }

        return baseStyle;
    };

    // Render header
    const renderHeader = () => {
        return (
            <View style={[getHeaderStyles(), headerStyle]}>
                <Typography
                    variant="h2"
                    color="primary"
                    weight="bold"
                    style={{ marginBottom: subtitle || description ? theme.spacing.base.xs : 0 }}
                >
                    {title}
                </Typography>

                {subtitle && (
                    <Typography
                        variant="h4"
                        color="secondary"
                        weight="medium"
                        style={{ marginBottom: description ? theme.spacing.base.xs : 0 }}
                    >
                        {subtitle}
                    </Typography>
                )}

                {description && (
                    <Typography
                        variant="body1"
                        color="secondary"
                    >
                        {description}
                    </Typography>
                )}
            </View>
        );
    };

    // Render form sections
    const renderSections = () => {
        if (!sections || sections.length === 0) return null;

        return (
            <View style={{ gap: theme.spacing.base.lg }}>
                {sections.map((section, index) => (
                    <View key={section.id} style={styles.section}>
                        {section.title && (
                            <Typography
                                variant="h4"
                                color="primary"
                                weight="semibold"
                                style={{ marginBottom: theme.spacing.base.sm }}
                            >
                                {section.title}
                            </Typography>
                        )}

                        {section.description && (
                            <Typography
                                variant="body2"
                                color="secondary"
                                style={{ marginBottom: theme.spacing.base.md }}
                            >
                                {section.description}
                            </Typography>
                        )}

                        {section.children}
                    </View>
                ))}
            </View>
        );
    };

    // Render content
    const renderContent = () => {
        const content = (
            <View style={[getContentStyles(), contentStyle]}>
                {children}
                {renderSections()}
            </View>
        );

        if (variant === 'card') {
            return (
                <Card variant="elevated" padding="large">
                    {content}
                </Card>
            );
        }

        return content;
    };

    // Render actions
    const renderActions = () => {
        // Combine primary/secondary actions with additional actions
        const allActions: FormAction[] = [];

        if (secondaryAction) {
            allActions.push(secondaryAction);
        }

        if (primaryAction) {
            allActions.push(primaryAction);
        }

        if (actions) {
            allActions.push(...actions);
        }

        if (allActions.length === 0) return null;

        // Check if any action is full width
        const hasFullWidthAction = allActions.some(action => action.fullWidth);

        return (
            <View style={[getActionsStyles(), actionsStyle]}>
                {hasFullWidthAction ? (
                    // Stack actions vertically for full width
                    allActions.map((action, index) => (
                        <Button
                            key={index}
                            variant={action.variant || (index === allActions.length - 1 ? 'primary' : 'outline')}
                            size="large"
                            icon={action.icon}
                            loading={action.loading}
                            disabled={action.disabled}
                            fullWidth={action.fullWidth}
                            onPress={action.onPress}
                            testID={testID ? `${testID}-action-${index}` : `form-action-${index}`}
                        >
                            {action.label}
                        </Button>
                    ))
                ) : (
                    // Horizontal layout for regular actions
                    <View style={styles.actionsRow}>
                        {allActions.map((action, index) => (
                            <Button
                                key={index}
                                variant={action.variant || (index === allActions.length - 1 ? 'primary' : 'outline')}
                                size="large"
                                icon={action.icon}
                                loading={action.loading}
                                disabled={action.disabled}
                                onPress={action.onPress}
                                style={{ flex: 1 }}
                                testID={testID ? `${testID}-action-${index}` : `form-action-${index}`}
                            >
                                {action.label}
                            </Button>
                        ))}
                    </View>
                )}
            </View>
        );
    };

    // Main content
    const mainContent = (
        <View style={[getContainerStyles(), style]}>
            {renderHeader()}
            {scrollable ? (
                <ScrollView
                    style={{ flex: 1 }}
                    contentContainerStyle={{ flexGrow: 1 }}
                    showsVerticalScrollIndicator={false}
                    keyboardShouldPersistTaps="handled"
                    testID={testID ? `${testID}-scroll` : 'form-scroll'}
                >
                    {renderContent()}
                    {renderActions()}
                </ScrollView>
            ) : (
                <>
                    {renderContent()}
                    {renderActions()}
                </>
            )}
        </View>
    );

    // Wrap with KeyboardAvoidingView if needed
    if (keyboardAvoiding) {
        return (
            <KeyboardAvoidingView
                style={{ flex: 1 }}
                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
                accessibilityLabel={accessibilityLabel || `${title} form`}
                testID={testID || 'form-template'}
            >
                {mainContent}
            </KeyboardAvoidingView>
        );
    }

    return (
        <View
            style={{ flex: 1 }}
            accessibilityLabel={accessibilityLabel || `${title} form`}
            testID={testID || 'form-template'}
        >
            {mainContent}
        </View>
    );
};

// Internal styles
const styles = StyleSheet.create({
    section: {
        // Section styles
    },
    actionsRow: {
        flexDirection: 'row',
        gap: 12,
    },
});

// Export default
export default FormTemplate;
</file>

<file path="src/components/templates/StudentDetailTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, TextInput, Alert } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { Student as GlobalStudent } from '../../types';
import { convertStringToNumber } from '../../utils/idConversion';

// Types
interface Memorization {
  id: number;
  range: string;
  date: string;
  note?: string;
  status: 'baik' | 'cukup' | 'kurang';
}

interface Note {
  id: number;
  date: string;
  content: string;
}

// Types - extending global Student type for local component needs
interface Student extends Omit<GlobalStudent, 'id'> {
  id: number; // Local component uses number for internal operations
  name: string; // Alias for full_name for backward compatibility
  class: string;
  memorizedVerses: number;
  totalVerses: number;
  progress: number;
  memorizations: Memorization[];
  notes: Note[];
  parentName?: string;
  parentPhone?: string;
  joinDate?: string;
}

// Sample Data
const sampleStudents: Student[] = [
  {
    id: 1,
    name: 'Ahmad Fauzi',
    full_name: 'Ahmad Fauzi',
    role: 'student' as const,
    school_id: 1,
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-15T00:00:00Z',
    class: 'Tahfidz Al-Baqarah',
    memorizedVerses: 150,
    totalVerses: 200,
    progress: 75,
    parentName: 'Bapak Fauzi',
    parentPhone: '081234567890',
    joinDate: '2023-09-01',
    memorizations: [
      { id: 1, range: 'Ayat 1-10', date: '2024-01-15', status: 'baik', note: 'Hafalan lancar' },
      { id: 2, range: 'Ayat 11-20', date: '2024-01-10', status: 'cukup', note: 'Perlu perbaikan tajwid' },
      { id: 3, range: 'Ayat 21-30', date: '2024-01-05', status: 'baik' },
    ],
    notes: [
      { id: 1, date: '2024-01-15', content: 'Ahmad menunjukkan kemajuan yang baik dalam hafalan.' },
      { id: 2, date: '2024-01-10', content: 'Perlu latihan tambahan untuk tajwid.' },
    ],
  },
  {
    id: 2,
    name: 'Fatimah Zahra',
    full_name: 'Fatimah Zahra',
    role: 'student' as const,
    school_id: 1,
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-14T00:00:00Z',
    class: 'Tahfidz Al-Baqarah',
    memorizedVerses: 180,
    totalVerses: 200,
    progress: 90,
    parentName: 'Ibu Zahra',
    parentPhone: '081234567891',
    joinDate: '2023-09-01',
    memorizations: [
      { id: 4, range: 'Ayat 1-15', date: '2024-01-14', status: 'baik', note: 'Sangat baik' },
    ],
    notes: [
      { id: 3, date: '2024-01-14', content: 'Fatimah adalah siswa yang sangat rajin.' },
    ],
  },
];

export default function StudentDetail() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  const studentId = convertStringToNumber(id || '0');
  
  const [student, setStudent] = useState<Student | null>(null);
  const [activeTab, setActiveTab] = useState('hafalan');
  const [showAddModal, setShowAddModal] = useState(false);
  const [newMemoRange, setNewMemoRange] = useState('');
  const [newMemoDate, setNewMemoDate] = useState(new Date().toISOString().split('T')[0]);
  const [newMemoNote, setNewMemoNote] = useState('');
  const [newNote, setNewNote] = useState('');
  
  // Fetch student data
  useEffect(() => {
    const foundStudent = sampleStudents.find(s => s.id === studentId);
    if (foundStudent) {
      setStudent(foundStudent);
    }
  }, [studentId]);
  
  if (!student) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Detail Siswa</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Memuat data siswa...</Text>
        </View>
      </SafeAreaView>
    );
  }

  const handleAddMemorization = () => {
    if (!newMemoRange || !newMemoDate) {
      Alert.alert('Error', 'Mohon isi range dan tanggal hafalan');
      return;
    }

    const newMemorization: Memorization = {
      id: Date.now(),
      range: newMemoRange,
      date: newMemoDate,
      note: newMemoNote || undefined,
      status: 'baik',
    };

    setStudent(prev => prev ? {
      ...prev,
      memorizations: [newMemorization, ...prev.memorizations]
    } : null);

    setNewMemoRange('');
    setNewMemoDate(new Date().toISOString().split('T')[0]);
    setNewMemoNote('');
    setShowAddModal(false);
  };

  const handleAddNote = () => {
    if (!newNote.trim()) {
      Alert.alert('Error', 'Mohon isi catatan');
      return;
    }

    const note: Note = {
      id: Date.now(),
      date: new Date().toISOString().split('T')[0],
      content: newNote,
    };

    setStudent(prev => prev ? {
      ...prev,
      notes: [note, ...prev.notes]
    } : null);

    setNewNote('');
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'baik': return '#4CAF50';
      case 'cukup': return '#FF9800';
      case 'kurang': return '#f44336';
      default: return '#666666';
    }
  };

  const renderHafalanTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Riwayat Hafalan</Text>
        <TouchableOpacity 
          style={styles.addButton}
          onPress={() => setShowAddModal(true)}
        >
          <Ionicons name="add" size={20} color="#ffffff" />
          <Text style={styles.addButtonText}>Tambah</Text>
        </TouchableOpacity>
      </View>
      
      {student.memorizations.map((memo) => (
        <View key={memo.id} style={styles.memorizationItem}>
          <View style={styles.memorizationHeader}>
            <Text style={styles.memorizationRange}>{memo.range}</Text>
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(memo.status) }]}>
              <Text style={styles.statusText}>{memo.status.toUpperCase()}</Text>
            </View>
          </View>
          <Text style={styles.memorizationDate}>{new Date(memo.date).toLocaleDateString('id-ID')}</Text>
          {memo.note && <Text style={styles.memorizationNote}>{memo.note}</Text>}
        </View>
      ))}
    </View>
  );

  const renderCatatanTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.addNoteContainer}>
        <TextInput
          style={styles.noteInput}
          value={newNote}
          onChangeText={setNewNote}
          placeholder="Tambah catatan baru..."
          placeholderTextColor="#999999"
          multiline
        />
        <TouchableOpacity 
          style={styles.addNoteButton}
          onPress={handleAddNote}
        >
          <Ionicons name="send" size={20} color="#ffffff" />
        </TouchableOpacity>
      </View>
      
      {student.notes.map((note) => (
        <View key={note.id} style={styles.noteItem}>
          <Text style={styles.noteDate}>{new Date(note.date).toLocaleDateString('id-ID')}</Text>
          <Text style={styles.noteContent}>{note.content}</Text>
        </View>
      ))}
    </View>
  );

  const renderInfoTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.infoSection}>
        <Text style={styles.sectionTitle}>Informasi Siswa</Text>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Nama Lengkap</Text>
          <Text style={styles.infoValue}>{student.name}</Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Kelas</Text>
          <Text style={styles.infoValue}>{student.class}</Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Progress Hafalan</Text>
          <Text style={styles.infoValue}>{student.memorizedVerses}/{student.totalVerses} ayat ({student.progress || 0}%)</Text>
        </View>
        {student.parentName && (
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Nama Orang Tua</Text>
            <Text style={styles.infoValue}>{student.parentName}</Text>
          </View>
        )}
        {student.parentPhone && (
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>No. Telepon Orang Tua</Text>
            <Text style={styles.infoValue}>{student.parentPhone}</Text>
          </View>
        )}
        {student.joinDate && (
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Tanggal Bergabung</Text>
            <Text style={styles.infoValue}>{new Date(student.joinDate).toLocaleDateString('id-ID')}</Text>
          </View>
        )}
      </View>
    </View>
  );

  const tabs = [
    { id: 'hafalan', label: 'Hafalan', icon: 'book-outline' },
    { id: 'catatan', label: 'Catatan', icon: 'document-text-outline' },
    { id: 'info', label: 'Info', icon: 'information-circle-outline' },
  ];

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>{student.name}</Text>
        <TouchableOpacity>
          <Ionicons name="ellipsis-vertical" size={24} color="#333333" />
        </TouchableOpacity>
      </View>

      {/* Student Summary */}
      <View style={styles.summaryContainer}>
        <View style={styles.studentAvatar}>
          <Text style={styles.studentInitial}>
            {student.name.charAt(0).toUpperCase()}
          </Text>
        </View>
        <View style={styles.summaryInfo}>
          <Text style={styles.summaryName}>{student.name}</Text>
          <Text style={styles.summaryClass}>{student.class}</Text>
          <View style={styles.progressContainer}>
            <View style={styles.progressBar}>
              <View style={[styles.progressFill, { width: `${student.progress || 0}%` }]} />
            </View>
            <Text style={styles.progressText}>{student.progress || 0}%</Text>
          </View>
        </View>
      </View>

      {/* Tabs */}
      <View style={styles.tabsContainer}>
        {tabs.map((tab) => (
          <TouchableOpacity
            key={tab.id}
            style={[styles.tab, activeTab === tab.id && styles.activeTab]}
            onPress={() => setActiveTab(tab.id)}
          >
            <Ionicons 
              name={tab.icon as any} 
              size={20} 
              color={activeTab === tab.id ? '#005e7a' : '#666666'} 
            />
            <Text style={[
              styles.tabText,
              activeTab === tab.id && styles.activeTabText
            ]}>
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {activeTab === 'hafalan' && renderHafalanTab()}
        {activeTab === 'catatan' && renderCatatanTab()}
        {activeTab === 'info' && renderInfoTab()}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  summaryContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  studentAvatar: {
    width: 64,
    height: 64,
    borderRadius: 32,
    backgroundColor: '#005e7a',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  studentInitial: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  summaryInfo: {
    flex: 1,
  },
  summaryName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  summaryClass: {
    fontSize: 16,
    color: '#005e7a',
    marginBottom: 8,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  progressBar: {
    flex: 1,
    height: 8,
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
    marginRight: 12,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '600',
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 8,
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#005e7a',
  },
  tabText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 6,
  },
  activeTabText: {
    color: '#005e7a',
    fontWeight: '600',
  },
  content: {
    flex: 1,
  },
  tabContent: {
    padding: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#005e7a',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  addButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 4,
  },
  memorizationItem: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  memorizationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  memorizationRange: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  memorizationDate: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 4,
  },
  memorizationNote: {
    fontSize: 14,
    color: '#666666',
    fontStyle: 'italic',
  },
  addNoteContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    marginBottom: 20,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 12,
  },
  noteInput: {
    flex: 1,
    fontSize: 16,
    color: '#333333',
    maxHeight: 100,
    marginRight: 12,
  },
  addNoteButton: {
    backgroundColor: '#005e7a',
    borderRadius: 20,
    padding: 8,
  },
  noteItem: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  noteDate: {
    fontSize: 12,
    color: '#666666',
    marginBottom: 8,
  },
  noteContent: {
    fontSize: 16,
    color: '#333333',
    lineHeight: 22,
  },
  infoSection: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
  },
  infoItem: {
    marginBottom: 16,
  },
  infoLabel: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 4,
  },
  infoValue: {
    fontSize: 16,
    color: '#333333',
    fontWeight: '500',
  },
});
</file>

<file path="src/components/templates/StudentIncidentReportTemplate.tsx">
import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';
import { useRouter } from 'expo-router';

import DateTimePicker from '@react-native-community/datetimepicker';

interface IncidentType {
  id: string;
  label: string;
  icon: React.ComponentProps<typeof FontAwesome5>['name'];
}

export default function StudentIncidentReport() {
  const router = useRouter();
  const [incidentDate, setIncidentDate] = useState(new Date());
const [showDatePicker, setShowDatePicker] = useState(false);
  const [incidentType, setIncidentType] = useState('');
  const [location, setLocation] = useState('');
  const [description, setDescription] = useState('');
  const [anonymous, setAnonymous] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const incidentTypes: IncidentType[] = [
    { id: 'bullying', label: 'Perundungan', icon: 'user-injured' },
    { id: 'safety', label: 'Masalah Keamanan', icon: 'exclamation-triangle' },
    { id: 'property', label: 'Kerusakan Properti', icon: 'hammer' },
    { id: 'other', label: 'Lainnya', icon: 'question-circle' },
  ];

  const handleSubmit = async () => {
    if (!incidentType || !location || !description) {
      Alert.alert(
        'Informasi Tidak Lengkap',
        'Mohon isi semua kolom yang wajib diisi sebelum mengirim.',
        [{ text: 'OK' }]
      );
      return;
    }

    setIsLoading(true);
    
    try {
      // In a real app, this would send the report to the backend
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call
      setSubmitted(true);
      
      // Reset form after 3 seconds and navigate back
      setTimeout(() => {
        router.back();
      }, 3000);
    } catch (error) {
      Alert.alert(
        'Error',
        'Terjadi kesalahan saat mengirim laporan. Silakan coba lagi.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsLoading(false);
    }
  };

  const renderIncidentTypeOption = (type: IncidentType) => (
    <TouchableOpacity
      key={type.id}
      style={[
        styles.incidentTypeOption,
        incidentType === type.id && styles.selectedIncidentType
      ]}
      onPress={() => setIncidentType(type.id)}
    >
      <FontAwesome5 
        name={type.icon} 
        size={20} 
        color={incidentType === type.id ? '#ffffff' : '#005e7a'} 
      />
      <Text style={[
        styles.incidentTypeText,
        incidentType === type.id && styles.selectedIncidentTypeText
      ]}>
        {type.label}
      </Text>
    </TouchableOpacity>
  );

  if (submitted) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.successContainer}>
          <Ionicons name="checkmark-circle" size={80} color="#4CAF50" />
          <Text style={styles.successTitle}>Laporan Berhasil Dikirim!</Text>
          <Text style={styles.successMessage}>
            Terima kasih telah melaporkan insiden ini. Laporan Anda akan ditangani dengan serius 
            dan kerahasiaan terjamin. Tim sekolah akan menindaklanjuti sesuai prosedur.
          </Text>
          <Text style={styles.successNote}>
            Kembali ke dashboard dalam beberapa detik...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Lapor Masalah</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Info Section */}
        <View style={styles.infoSection}>
          <View style={styles.infoHeader}>
            <Ionicons name="shield-checkmark" size={24} color="#4CAF50" />
            <Text style={styles.infoTitle}>Laporan Aman & Terpercaya</Text>
          </View>
          <Text style={styles.infoText}>
            Laporkan masalah atau insiden yang kamu alami atau saksikan. Identitas kamu akan dilindungi 
            dan laporan akan ditangani dengan serius oleh tim sekolah.
          </Text>
        </View>

        {/* Form Section */}
        <View style={styles.formSection}>
          <Text style={styles.sectionTitle}>Detail Laporan</Text>
          
          {/* Date */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Tanggal Kejadian *</Text>
            <TouchableOpacity 
  style={styles.datePickerButton}
  onPress={() => setShowDatePicker(true)}
>
  <Text style={styles.dateText}>{incidentDate.toLocaleDateString('id-ID')}</Text>
  <MaterialIcons name="event" size={24} color="#005e7a" />
</TouchableOpacity>
{showDatePicker && (
  <DateTimePicker
    value={incidentDate}
    mode="date"
    display="default"
    onChange={(event, selectedDate) => {
      setShowDatePicker(false);
      if (selectedDate) {
        setIncidentDate(selectedDate);
      }
    }}
  />
)}
          </View>

          {/* Incident Type */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Jenis Masalah *</Text>
            <View style={styles.incidentTypesContainer}>
              {incidentTypes.map(renderIncidentTypeOption)}
            </View>
          </View>

          {/* Location */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Lokasi Kejadian *</Text>
            <TextInput
              style={styles.textInput}
              value={location}
              onChangeText={setLocation}
              placeholder="Contoh: Kelas 5A, Kantin, Taman Bermain"
              placeholderTextColor="#999999"
            />
          </View>

          {/* Description */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Deskripsi Kejadian *</Text>
            <TextInput
              style={styles.textArea}
              value={description}
              onChangeText={setDescription}
              placeholder="Jelaskan secara detail apa yang terjadi, kapan, dan siapa saja yang terlibat..."
              placeholderTextColor="#999999"
              multiline
              numberOfLines={6}
              textAlignVertical="top"
            />
          </View>

          {/* Anonymous Option */}
          <TouchableOpacity 
            style={styles.anonymousOption}
            onPress={() => setAnonymous(!anonymous)}
          >
            <Ionicons 
              name={anonymous ? "checkbox" : "square-outline"} 
              size={24} 
              color="#005e7a" 
            />
            <View style={styles.anonymousTextContainer}>
              <Text style={styles.anonymousTitle}>Laporan Anonim</Text>
              <Text style={styles.anonymousDescription}>
                Identitas saya tidak akan diungkapkan kepada siapapun
              </Text>
            </View>
          </TouchableOpacity>

          {/* Guidelines */}
          <View style={styles.guidelinesSection}>
            <Text style={styles.guidelinesTitle}>Panduan Melaporkan:</Text>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Berikan informasi sejelas dan selengkap mungkin</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Sertakan waktu dan lokasi yang tepat</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Hindari tuduhan tanpa bukti yang jelas</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Laporan akan ditangani dalam 1-3 hari kerja</Text>
            </View>
          </View>
        </View>

        {/* Submit Button */}
        <TouchableOpacity 
          style={[
            styles.submitButton,
            (!incidentType || !location || !description || isLoading) && styles.submitButtonDisabled
          ]}
          onPress={handleSubmit}
          disabled={!incidentType || !location || !description || isLoading}
        >
          {isLoading ? (
            <Text style={styles.submitButtonText}>Mengirim...</Text>
          ) : (
            <Text style={styles.submitButtonText}>Kirim Laporan</Text>
          )}
        </TouchableOpacity>

        {/* Bottom Spacing */}
        <View style={{ height: 50 }} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  infoSection: {
    backgroundColor: '#e8f5e8',
    borderRadius: 8,
    padding: 16,
    marginTop: 20,
    marginBottom: 20,
  },
  infoHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginLeft: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#2E7D32',
    lineHeight: 20,
  },
  formSection: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  datePickerButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    backgroundColor: '#ffffff',
  },
  dateText: {
    fontSize: 16,
    color: '#333333',
  },
  incidentTypesContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  incidentTypeOption: {
    width: '48%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#005e7a',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    backgroundColor: '#ffffff',
  },
  selectedIncidentType: {
    backgroundColor: '#005e7a',
  },
  incidentTypeText: {
    fontSize: 14,
    color: '#005e7a',
    marginLeft: 8,
    textAlign: 'center',
  },
  selectedIncidentTypeText: {
    color: '#ffffff',
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#ffffff',
  },
  textArea: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    minHeight: 120,
    textAlignVertical: 'top',
    backgroundColor: '#ffffff',
  },
  anonymousOption: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 16,
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  anonymousTextContainer: {
    marginLeft: 12,
    flex: 1,
  },
  anonymousTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  anonymousDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 18,
  },
  guidelinesSection: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  guidelinesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  guidelineItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  guidelineText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 8,
    flex: 1,
  },
  submitButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginTop: 20,
    marginHorizontal: 20,
  },
  submitButtonDisabled: {
    backgroundColor: '#cccccc',
  },
  submitButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  successContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  successMessage: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 16,
  },
  successNote: {
    fontSize: 14,
    color: '#999999',
    textAlign: 'center',
    fontStyle: 'italic',
  },
});
</file>

<file path="src/utils/backgroundPattern.ts">
/**
 * Background Pattern System Utilities
 * Helper functions to integrate background patterns with design tokens
 */

import { useTheme, useColors } from '../context/ThemeContext';
import { PatternVariant, PatternIntensity } from '../components/atoms/BackgroundPattern';

// Pattern configuration for different contexts
export interface PatternConfig {
  variant: PatternVariant;
  intensity: PatternIntensity;
  color?: string;
  opacity?: number;
}

// Predefined pattern configurations
export const patternConfigs = {
  // Dashboard patterns
  dashboard: {
    default: {
      variant: 'geometric' as PatternVariant,
      intensity: 'subtle' as PatternIntensity,
    },
    teacher: {
      variant: 'geometric' as PatternVariant,
      intensity: 'light' as PatternIntensity,
      color: 'success' as const,
    },
    student: {
      variant: 'geometric' as PatternVariant,
      intensity: 'subtle' as PatternIntensity,
      color: 'primary' as const,
    },
    parent: {
      variant: 'geometric' as PatternVariant,
      intensity: 'light' as PatternIntensity,
      color: 'warning' as const,
    },
    management: {
      variant: 'geometric' as PatternVariant,
      intensity: 'medium' as PatternIntensity,
      color: 'error' as const,
    },
  },
  
  // Modal patterns
  modal: {
    variant: 'minimal' as PatternVariant,
    intensity: 'subtle' as PatternIntensity,
  },
  
  // Form patterns
  form: {
    variant: 'dots' as PatternVariant,
    intensity: 'light' as PatternIntensity,
  },
  
  // Minimal patterns
  minimal: {
    variant: 'minimal' as PatternVariant,
    intensity: 'subtle' as PatternIntensity,
  },
  
  // No pattern
  none: {
    variant: 'none' as PatternVariant,
    intensity: 'subtle' as PatternIntensity,
  },
};

// Hook to get pattern configuration with theme integration
export const usePatternConfig = (configKey: keyof typeof patternConfigs, role?: string) => {
  const { theme } = useTheme();
  const colors = useColors();
  
  let config: PatternConfig;
  
  // Handle dashboard configurations with role-based colors
  if (configKey === 'dashboard' && role) {
    const dashboardConfig = patternConfigs.dashboard;
    const roleConfig = dashboardConfig[role as keyof typeof dashboardConfig] || dashboardConfig.default;
    
    // Resolve color values for role-specific configurations
    let patternColor: string | undefined;
    switch (role) {
      case 'student':
        patternColor = colors.primary.main;
        break;
      case 'teacher':
        patternColor = colors.success.main;
        break;
      case 'parent':
        patternColor = colors.warning.main;
        break;
      case 'management':
        patternColor = colors.error.main;
        break;
      default:
        patternColor = colors.primary.main;
        break;
    }
    
    config = {
      ...roleConfig,
      color: patternColor,
    };
  } else {
    // Handle other pattern types
    const baseConfig = patternConfigs[configKey];
    if (baseConfig && typeof baseConfig === 'object' && 'variant' in baseConfig) {
      config = {
        ...baseConfig,
        color: colors.primary.main,
      };
    } else {
      // Fallback to default config
      config = {
        variant: 'geometric' as PatternVariant,
        intensity: 'subtle' as PatternIntensity,
        color: colors.primary.main,
      };
    }
  }
  
  return config;
};

// Helper function to get role-specific pattern with resolved colors
export const getRolePatternConfig = (role: string, colors?: any): PatternConfig => {
  const baseConfig = {
    variant: 'geometric' as PatternVariant,
    intensity: 'subtle' as PatternIntensity,
  };

  // Use provided colors or fallback to default hex values
  const colorMap = colors ? {
    primary: colors.primary?.main || '#3B82F6',
    success: colors.success?.main || '#10B981',
    warning: colors.warning?.main || '#F59E0B',
    error: colors.error?.main || '#EF4444',
  } : {
    primary: '#3B82F6',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444',
  };

  switch (role) {
    case 'student':
      return { ...baseConfig, color: colorMap.primary };
    case 'teacher':
      return { ...baseConfig, color: colorMap.success, intensity: 'light' as PatternIntensity };
    case 'parent':
      return { ...baseConfig, color: colorMap.warning, intensity: 'light' as PatternIntensity };
    case 'management':
      return { ...baseConfig, color: colorMap.error, intensity: 'medium' as PatternIntensity };
    default:
      return baseConfig;
  }
};

// Utility to create pattern variants
export const createPatternVariant = (
  variant: PatternVariant,
  intensity: PatternIntensity,
  color?: string,
  opacity?: number
): PatternConfig => ({
  variant,
  intensity,
  color,
  opacity,
});
</file>

<file path="src/components/templates/CCTVAccessRequestTemplate.tsx">
import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Picker } from '@react-native-picker/picker';

interface Camera {
  id: string;
  name: string;
}

export default function CCTVAccessRequest() {
  const router = useRouter();
  const [selectedCamera, setSelectedCamera] = useState('hallway');
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [showStartDatePicker, setShowStartDatePicker] = useState(false);
  const [showEndDatePicker, setShowEndDatePicker] = useState(false);
  const [justification, setJustification] = useState('');
  const [submitted, setSubmitted] = useState(false);

  // Mock camera locations
  const cameraLocations: Camera[] = [
    { id: 'hallway', name: 'Koridor Utama' },
    { id: 'playground', name: 'Taman Bermain' },
    { id: 'cafeteria', name: 'Kantin' },
    { id: 'entrance', name: 'Pintu Masuk Utama' },
    { id: 'library', name: 'Perpustakaan' },
  ];

  // Validation constants - single source of truth
  const VALIDATION_RULES = {
    JUSTIFICATION: {
      MIN_LENGTH: 10,
      MAX_LENGTH: 500,
    },
    DATE_RANGE: {
      MIN_DAYS: 1,
      MAX_DAYS: 7, // Align with UI guidelines
    },
  } as const;

  const DAY_IN_MS = 24 * 60 * 60 * 1000;

  const validateDateRange = (start: Date | null, end: Date | null) => {
    if (!start || !end) return { isValid: false, error: null };
    
    const daysDifference = Math.ceil((end.getTime() - start.getTime()) / DAY_IN_MS);
    
    if (daysDifference <= 0) {
      return { isValid: false, error: 'Tanggal selesai harus setelah tanggal mulai' };
    }
    if (daysDifference > VALIDATION_RULES.DATE_RANGE.MAX_DAYS) {
      return { isValid: false, error: `Maksimal ${VALIDATION_RULES.DATE_RANGE.MAX_DAYS} hari akses diperbolehkan` };
    }
    // Ensure both dates are in the past (CCTV access is for historical footage)
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    if (start.getTime() >= today.getTime()) {
      return { isValid: false, error: 'Tanggal mulai harus di masa lalu' };
    }
    if (end.getTime() >= today.getTime()) {
      return { isValid: false, error: 'Tanggal selesai harus di masa lalu' };
    }
    
    return { isValid: true, error: null };
  };

  const validateJustification = (text: string) => {
    const trimmed = text.trim();
    return trimmed.length >= VALIDATION_RULES.JUSTIFICATION.MIN_LENGTH && 
           trimmed.length <= VALIDATION_RULES.JUSTIFICATION.MAX_LENGTH;
  };

  const isFormValid = () => {
    if (!validateJustification(justification)) return false;
    if (!selectedCamera) return false;
    
    const dateValidation = validateDateRange(startDate, endDate);
    return dateValidation.isValid;
  };

  const getDateError = () => {
    const dateValidation = validateDateRange(startDate, endDate);
    return dateValidation.error;
  };

  const handleSubmit = () => {
    if (!isFormValid()) return;
    
    // In a real app, this would send the request to the backend
    setSubmitted(true);
    
    // Reset form after 3 seconds and navigate back
    setTimeout(() => {
      router.back();
    }, 3000);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('id-ID', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('id-ID', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (submitted) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.successContainer}>
          <Ionicons name="checkmark-circle" size={80} color="#4CAF50" />
          <Text style={styles.successTitle}>Permintaan Berhasil Dikirim!</Text>
          <Text style={styles.successMessage}>
            Permintaan akses CCTV Anda telah diterima dan akan diproses oleh tim keamanan sekolah.
            Anda akan mendapat notifikasi melalui aplikasi ketika permintaan telah disetujui atau ditolak.
          </Text>
          <Text style={styles.successNote}>
            Kembali ke dashboard dalam beberapa detik...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Permintaan Akses CCTV</Text>
        <View style={{ width: 24 }} />
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Info Section */}
        <View style={styles.infoSection}>
          <View style={styles.infoHeader}>
            <Ionicons name="information-circle" size={24} color="#2196F3" />
            <Text style={styles.infoTitle}>Informasi Penting</Text>
          </View>
          <Text style={styles.infoText}>
            Permintaan akses CCTV hanya dapat diajukan untuk keperluan yang berkaitan dengan keamanan dan kesejahteraan anak Anda di sekolah. 
            Semua permintaan akan ditinjau oleh tim keamanan sekolah.
          </Text>
        </View>

        {/* Form Section */}
        <View style={styles.formSection}>
          <Text style={styles.sectionTitle}>Detail Permintaan</Text>
          
          {/* Camera Selection */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Lokasi Kamera *</Text>
            <View style={styles.pickerContainer}>
              <Picker
                selectedValue={selectedCamera}
                onValueChange={(itemValue: string) => setSelectedCamera(itemValue)}
                style={styles.picker}
              >
                {cameraLocations.map((camera) => (
                  <Picker.Item key={camera.id} label={camera.name} value={camera.id} />
                ))}
              </Picker>
            </View>
          </View>

          {/* Date Range */}
          <View style={styles.dateRangeContainer}>
            <View style={styles.dateInputGroup}>
              <Text style={styles.inputLabel}>Tanggal Mulai *</Text>
              <TouchableOpacity 
                style={styles.dateInput}
                onPress={() => setShowStartDatePicker(true)}
              >
                <Text style={styles.dateText}>{formatDate(startDate)}</Text>
                <Ionicons name="calendar" size={20} color="#666666" />
              </TouchableOpacity>
            </View>

            <View style={styles.dateInputGroup}>
              <Text style={styles.inputLabel}>Tanggal Selesai *</Text>
              <TouchableOpacity 
                style={styles.dateInput}
                onPress={() => setShowEndDatePicker(true)}
              >
                <Text style={styles.dateText}>{formatDate(endDate)}</Text>
                <Ionicons name="calendar" size={20} color="#666666" />
              </TouchableOpacity>
            </View>
          </View>

          {/* Justification */}
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Alasan Permintaan *</Text>
            <TextInput
              style={styles.textArea}
              value={justification}
              onChangeText={setJustification}
              placeholder={`Jelaskan alasan Anda memerlukan akses rekaman CCTV (minimal ${VALIDATION_RULES.JUSTIFICATION.MIN_LENGTH}, maksimal ${VALIDATION_RULES.JUSTIFICATION.MAX_LENGTH} karakter)...`}
              placeholderTextColor="#999999"
              multiline
              numberOfLines={4}
              textAlignVertical="top"
              maxLength={VALIDATION_RULES.JUSTIFICATION.MAX_LENGTH}
            />
            <Text style={styles.characterCount}>
              {justification.trim().length}/{VALIDATION_RULES.JUSTIFICATION.MAX_LENGTH} karakter (minimal {VALIDATION_RULES.JUSTIFICATION.MIN_LENGTH})
            </Text>
          </View>

          {/* Guidelines */}
          <View style={styles.guidelinesSection}>
            <Text style={styles.guidelinesTitle}>Panduan Permintaan:</Text>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Permintaan harus berkaitan dengan keamanan anak</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Maksimal rentang waktu {VALIDATION_RULES.DATE_RANGE.MAX_DAYS} hari</Text>
            </View>
            <View style={styles.guidelineItem}>
              <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
              <Text style={styles.guidelineText}>Proses persetujuan 1-3 hari kerja</Text>
            </View>
          </View>
        </View>

        {/* Submit Button */}
        <TouchableOpacity 
          style={[
            styles.submitButton,
            !isFormValid() && styles.submitButtonDisabled
          ]}
          onPress={handleSubmit}
          disabled={!isFormValid()}
        >
          <Text style={styles.submitButtonText}>Kirim Permintaan</Text>
        </TouchableOpacity>

        {/* Bottom Spacing */}
        <View style={{ height: 50 }} />
      </ScrollView>

      {/* Date Pickers */}
      {showStartDatePicker && (
        <DateTimePicker
          value={startDate}
          mode="date"
          display="default"
          onChange={(event: any, selectedDate?: Date) => {
            setShowStartDatePicker(false);
            if (selectedDate) {
              setStartDate(selectedDate);
            }
          }}
        />
      )}

      {showEndDatePicker && (
        <DateTimePicker
          value={endDate}
          mode="date"
          display="default"
          onChange={(event: any, selectedDate?: Date) => {
            setShowEndDatePicker(false);
            if (selectedDate) {
              setEndDate(selectedDate);
            }
          }}
        />
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  infoSection: {
    backgroundColor: '#e6f7ff',
    borderRadius: 8,
    padding: 16,
    marginTop: 20,
    marginBottom: 20,
  },
  infoHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2196F3',
    marginLeft: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#005e7a',
    lineHeight: 20,
  },
  formSection: {
    backgroundColor: '#ffffff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  pickerContainer: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    backgroundColor: '#ffffff',
  },
  picker: {
    height: 50,
  },
  dateRangeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  dateInputGroup: {
    flex: 0.48,
  },
  dateInput: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    backgroundColor: '#ffffff',
  },
  dateText: {
    fontSize: 14,
    color: '#333333',
  },
  textArea: {
    borderWidth: 1,
    borderColor: '#dddddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    minHeight: 100,
    textAlignVertical: 'top',
    backgroundColor: '#ffffff',
  },
  guidelinesSection: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
  },
  guidelinesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  guidelineItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  guidelineText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 8,
    flex: 1,
  },
  submitButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginTop: 20,
    marginHorizontal: 20,
  },
  submitButtonDisabled: {
    backgroundColor: '#cccccc',
  },
  submitButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  successContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  successMessage: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 16,
  },
  successNote: {
    fontSize: 14,
    color: '#999999',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  characterCount: {
    fontSize: 12,
    color: '#666',
    textAlign: 'right',
  },
});
</file>

<file path="src/components/templates/ClassStudentsTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, TextInput } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { Student as GlobalStudent } from '../../types';
import { convertStringToNumber, convertNumberToString } from '../../utils/idConversion';
import { mockClassData, ClassData as MockClassData, Student as MockStudent } from '../../mocks/classData';

// Types - extending global Student type for local component needs
interface Student extends Omit<GlobalStudent, 'id'> {
  id: number; // Local component uses number for internal operations
  name: string; // Alias for full_name for backward compatibility
  memorizedVerses: number;
  totalVerses: number;
  lastActivity?: string;
  progress?: number;
}

interface ClassData {
  id: number;
  name: string;
  level: string;
  studentCount: number;
  students?: Student[];
}



export default function ClassStudents() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  
  // Validate and parse class ID
  const parsedId = parseInt(id || '0', 10);
  const classId = !isNaN(parsedId) && parsedId > 0 ? parsedId : null;
  
  const [classData, setClassData] = useState<ClassData | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  
  // Fetch class data
  useEffect(() => {
    if (classId) {
      const foundClass = mockClassData.find(c => c.id === classId);
      if (foundClass) {
        setClassData(foundClass);
      }
    }
  }, [classId]);
  
  // Handle invalid class ID
  if (classId === null) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Error</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.errorContainer}>
          <Ionicons name="alert-circle-outline" size={64} color="#ff4444" />
          <Text style={styles.errorTitle}>ID Kelas Tidak Valid</Text>
          <Text style={styles.errorMessage}>ID kelas yang diberikan tidak valid atau tidak ditemukan.</Text>
          <TouchableOpacity 
            style={styles.errorButton}
            onPress={() => router.back()}
          >
            <Text style={styles.errorButtonText}>Kembali</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }
  
  if (!classData) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Siswa Kelas</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Memuat data kelas...</Text>
        </View>
      </SafeAreaView>
    );
  }
  
  const filteredStudents = classData.students?.filter(
    (student) => student.name.toLowerCase().includes(searchQuery.toLowerCase())
  ) || [];

  const renderStudentItem = ({ item }: { item: Student }) => (
    <TouchableOpacity 
      style={styles.studentCard}
      onPress={() => router.push({
        pathname: '/(teacher)/students/[id]',
        params: { id: convertNumberToString(item.id) }
      })}
    >
      <View style={styles.studentHeader}>
        <View style={styles.studentAvatar}>
          <Text style={styles.studentInitial}>
            {item.name.charAt(0).toUpperCase()}
          </Text>
        </View>
        <View style={styles.studentInfo}>
          <Text style={styles.studentName}>{item.name}</Text>
          <Text style={styles.studentProgress}>
            {item.memorizedVerses}/{item.totalVerses} ayat ({item.progress || 0}%)
          </Text>
          {item.lastActivity && (
            <Text style={styles.studentActivity}>
              Aktivitas terakhir: {item.lastActivity}
            </Text>
          )}
        </View>
        <View style={styles.studentActions}>
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={() => {
              // Handle quick action
            }}
          >
            <Ionicons name="create-outline" size={20} color="#005e7a" />
          </TouchableOpacity>
        </View>
      </View>
      
      <View style={styles.progressContainer}>
        <View style={styles.progressBar}>
          <View style={[styles.progressFill, { width: `${item.progress || 0}%` }]} />
        </View>
        <Text style={styles.progressText}>{item.progress || 0}%</Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Siswa - {classData.name}</Text>
        <TouchableOpacity>
          <Ionicons name="ellipsis-vertical" size={24} color="#333333" />
        </TouchableOpacity>
      </View>

      {/* Search and Add */}
      <View style={styles.actionContainer}>
        <View style={styles.searchContainer}>
          <Ionicons name="search" size={20} color="#666666" />
          <TextInput
            style={styles.searchInput}
            placeholder="Cari siswa..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#999999"
          />
        </View>
        <TouchableOpacity 
          style={styles.addButton}
          onPress={() => router.push({
            pathname: '/(teacher)/students/add',
            params: { classId: convertNumberToString(classId) }
          })}
        >
          <Ionicons name="add" size={24} color="#ffffff" />
        </TouchableOpacity>
      </View>

      {/* Stats */}
      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>{classData.studentCount}</Text>
          <Text style={styles.statLabel}>Total Siswa</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>{filteredStudents.length}</Text>
          <Text style={styles.statLabel}>Ditampilkan</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>
            {Math.round(filteredStudents.reduce((acc, student) => acc + (student.progress || 0), 0) / filteredStudents.length) || 0}%
          </Text>
          <Text style={styles.statLabel}>Rata-rata Progress</Text>
        </View>
      </View>

      {/* Students List */}
      {filteredStudents.length > 0 ? (
        <FlatList
          data={filteredStudents}
          renderItem={renderStudentItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="people-outline" size={64} color="#cccccc" />
          <Text style={styles.emptyStateTitle}>
            {searchQuery ? 'Siswa tidak ditemukan' : 'Belum ada siswa'}
          </Text>
          <Text style={styles.emptyStateMessage}>
            {searchQuery 
              ? 'Coba ubah kata kunci pencarian'
              : 'Tambahkan siswa pertama ke kelas ini'
            }
          </Text>
          {!searchQuery && (
            <TouchableOpacity 
              style={styles.emptyStateButton}
              onPress={() => router.push({
                pathname: '/(teacher)/students/add',
                params: { classId: convertNumberToString(classId) }
              })}
            >
              <Text style={styles.emptyStateButtonText}>Tambah Siswa</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  actionContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  searchContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginRight: 12,
  },
  searchInput: {
    flex: 1,
    marginLeft: 8,
    fontSize: 16,
    color: '#333333',
  },
  addButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    padding: 10,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#666666',
    textAlign: 'center',
  },
  listContainer: {
    padding: 20,
  },
  studentCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  studentHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  studentAvatar: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#005e7a',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  studentInitial: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  studentInfo: {
    flex: 1,
  },
  studentName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  studentProgress: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  studentActivity: {
    fontSize: 12,
    color: '#999999',
  },
  studentActions: {
    flexDirection: 'row',
  },
  actionButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#f8f9fa',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  progressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#e0e0e0',
    borderRadius: 3,
    marginRight: 12,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 3,
  },
  progressText: {
    fontSize: 12,
    color: '#666666',
    fontWeight: '600',
    minWidth: 35,
    textAlign: 'right',
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyStateMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  emptyStateButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  emptyStateButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  errorTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#ff4444',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  errorMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  errorButton: {
    backgroundColor: '#ff4444',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  errorButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="src/components/templates/StudentsListTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, TextInput, Modal, ActivityIndicator } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { convertNumberToString } from '../../utils/idConversion';
// Local interface for StudentsList display purposes
interface StudentsListItem {
  id: number;
  name: string;
  class: string;
  memorizedVerses: number;
  totalVerses: number;
  progress: number;
  lastActivity?: string;
}

// Sample Data
const sampleStudents: StudentsListItem[] = [
  {
    id: 1,
    name: 'Ahmad Fauzi',
    class: 'Tahfidz Al-Baqarah',
    memorizedVerses: 150,
    totalVerses: 200,
    progress: 75,
    lastActivity: '2024-01-15'
  },
  {
    id: 2,
    name: 'Fatimah Zahra',
    class: 'Tahfidz Al-Baqarah',
    memorizedVerses: 180,
    totalVerses: 200,
    progress: 90,
    lastActivity: '2024-01-14'
  },
  {
    id: 3,
    name: 'Muhammad Ali',
    class: 'Tahfidz Al-Imran',
    memorizedVerses: 120,
    totalVerses: 150,
    progress: 80,
    lastActivity: '2024-01-13'
  },
  {
    id: 4,
    name: 'Siti Aisyah',
    class: 'Tahfidz Al-Baqarah',
    memorizedVerses: 160,
    totalVerses: 200,
    progress: 80,
    lastActivity: '2024-01-15'
  },
  {
    id: 5,
    name: 'Omar bin Khattab',
    class: 'Tahfidz Al-Imran',
    memorizedVerses: 100,
    totalVerses: 150,
    progress: 67,
    lastActivity: '2024-01-12'
  },
];

const classes = ['Semua', 'Tahfidz Al-Baqarah', 'Tahfidz Al-Imran'];
const sortOptions = ['Nama (A-Z)', 'Nama (Z-A)', 'Progress (Tinggi)', 'Progress (Rendah)'];

export default function StudentsList() {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');
  const [filterVisible, setFilterVisible] = useState(false);
  const [selectedClass, setSelectedClass] = useState('Semua');
  const [selectedSort, setSelectedSort] = useState('Nama (A-Z)');
  const [students, setStudents] = useState<StudentsListItem[]>(sampleStudents);
  const [isLoading, setIsLoading] = useState(false);

  // Filter and sort students
  const filteredAndSortedStudents = students
    .filter((student: StudentsListItem) => {
      const matchesSearch = student.name.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesClass = selectedClass === 'Semua' || student.class === selectedClass;
      return matchesSearch && matchesClass;
    })
    .sort((a: StudentsListItem, b: StudentsListItem) => {
      switch (selectedSort) {
        case 'Nama (A-Z)':
          return a.name.localeCompare(b.name);
        case 'Nama (Z-A)':
          return b.name.localeCompare(a.name);
        case 'Progress (Tinggi)':
          return b.progress - a.progress;
        case 'Progress (Rendah)':
          return a.progress - b.progress;
        default:
          return 0;
      }
    });

  const renderStudentItem = ({ item }: { item: StudentsListItem }) => (
    <TouchableOpacity 
      style={styles.studentCard}
      onPress={() => router.push({
        pathname: '/(teacher)/students/[id]',
        params: { id: convertNumberToString(item.id) }
      })}
    >
      <View style={styles.studentHeader}>
        <View style={styles.studentAvatar}>
          <Text style={styles.studentInitial}>
            {item.name.charAt(0).toUpperCase()}
          </Text>
        </View>
        <View style={styles.studentInfo}>
          <Text style={styles.studentName}>{item.name}</Text>
          <Text style={styles.studentClass}>{item.class}</Text>
          <Text style={styles.studentProgress}>
            {item.memorizedVerses}/{item.totalVerses} ayat
          </Text>
          {item.lastActivity && (
            <Text style={styles.studentActivity}>
              Terakhir aktif: {item.lastActivity}
            </Text>
          )}
        </View>
        <View style={styles.studentStats}>
          <View style={styles.progressContainer}>
            <View style={styles.progressBar}>
              <View style={[styles.progressFill, { width: `${item.progress || 0}%` }]} />
            </View>
            <Text style={styles.progressText}>{item.progress || 0}%</Text>
          </View>
          
        </View>
      </View>
    </TouchableOpacity>
  );

  const renderFilterModal = () => (
    filterVisible && (
      <View style={styles.filterModal}>
        <View style={styles.filterContent}>
          <View style={styles.filterHeader}>
            <Text style={styles.filterTitle}>Filter & Urutkan</Text>
            <TouchableOpacity onPress={() => setFilterVisible(false)}>
              <Ionicons name="close" size={24} color="#333333" />
            </TouchableOpacity>
          </View>
          
          <View style={styles.filterSection}>
            <Text style={styles.filterSectionTitle}>Kelas</Text>
            {classes.map((className) => (
              <TouchableOpacity
                key={className}
                style={styles.filterOption}
                onPress={() => setSelectedClass(className)}
              >
                <Ionicons 
                  name={selectedClass === className ? "radio-button-on" : "radio-button-off"} 
                  size={20} 
                  color="#005e7a" 
                />
                <Text style={styles.filterOptionText}>{className}</Text>
              </TouchableOpacity>
            ))}
          </View>
          
          <View style={styles.filterSection}>
            <Text style={styles.filterSectionTitle}>Urutkan</Text>
            {sortOptions.map((sortOption) => (
              <TouchableOpacity
                key={sortOption}
                style={styles.filterOption}
                onPress={() => setSelectedSort(sortOption)}
              >
                <Ionicons 
                  name={selectedSort === sortOption ? "radio-button-on" : "radio-button-off"} 
                  size={20} 
                  color="#005e7a" 
                />
                <Text style={styles.filterOptionText}>{sortOption}</Text>
              </TouchableOpacity>
            ))}
          </View>
          
          <TouchableOpacity 
            style={styles.applyFilterButton}
            onPress={() => setFilterVisible(false)}
          >
            <Text style={styles.applyFilterButtonText}>Terapkan</Text>
          </TouchableOpacity>
        </View>
      </View>
    )
  );

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#005e7a" />
          <Text style={styles.loadingText}>Memuat data siswa...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Daftar Siswa</Text>
        <TouchableOpacity onPress={() => router.push('/(teacher)/students/add')}>
          <Ionicons name="add" size={24} color="#005e7a" />
        </TouchableOpacity>
      </View>

      {/* Search and Filter */}
      <View style={styles.searchContainer}>
        <View style={styles.searchInputContainer}>
          <Ionicons name="search" size={20} color="#666666" />
          <TextInput
            style={styles.searchInput}
            placeholder="Cari siswa..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#999999"
          />
        </View>
        <TouchableOpacity 
          style={styles.filterButton}
          onPress={() => setFilterVisible(true)}
        >
          <Ionicons name="filter" size={20} color="#005e7a" />
        </TouchableOpacity>
      </View>

      {/* Stats */}
      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>{students.length}</Text>
          <Text style={styles.statLabel}>Total Siswa</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>{filteredAndSortedStudents.length}</Text>
          <Text style={styles.statLabel}>Ditampilkan</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statNumber}>
            {Math.round(filteredAndSortedStudents.reduce((acc, student) => acc + student.progress, 0) / filteredAndSortedStudents.length) || 0}%
          </Text>
          <Text style={styles.statLabel}>Rata-rata Progress</Text>
        </View>
      </View>

      {/* Students List */}
      {filteredAndSortedStudents.length > 0 ? (
        <FlatList
          data={filteredAndSortedStudents}
          renderItem={renderStudentItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="people-outline" size={64} color="#cccccc" />
          <Text style={styles.emptyStateTitle}>
            {searchQuery || selectedClass !== 'Semua' ? 'Siswa tidak ditemukan' : 'Belum ada siswa'}
          </Text>
          <Text style={styles.emptyStateMessage}>
            {searchQuery || selectedClass !== 'Semua' 
              ? 'Coba ubah kata kunci pencarian atau filter'
              : 'Tambahkan siswa pertama'
            }
          </Text>
          {!searchQuery && selectedClass === 'Semua' && (
            <TouchableOpacity 
              style={styles.emptyStateButton}
              onPress={() => router.push('/(teacher)/students/add')}
            >
              <Text style={styles.emptyStateButtonText}>Tambah Siswa</Text>
            </TouchableOpacity>
          )}
        </View>
      )}

      {/* Filter Modal */}
      {renderFilterModal()}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
    marginTop: 12,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  searchInputContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginRight: 12,
  },
  searchInput: {
    flex: 1,
    marginLeft: 8,
    fontSize: 16,
    color: '#333333',
  },
  filterButton: {
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 10,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#005e7a',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#666666',
    textAlign: 'center',
  },
  listContainer: {
    padding: 20,
  },
  studentCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  studentHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  studentAvatar: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#005e7a',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  studentInitial: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  studentInfo: {
    flex: 1,
  },
  studentName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 2,
  },
  studentClass: {
    fontSize: 14,
    color: '#005e7a',
    marginBottom: 2,
  },
  studentProgress: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  studentActivity: {
    fontSize: 12,
    color: '#999999',
  },
  studentStats: {
    alignItems: 'flex-end',
  },
  progressContainer: {
    alignItems: 'flex-end',
    marginBottom: 8,
  },
  progressBar: {
    width: 80,
    height: 6,
    backgroundColor: '#e0e0e0',
    borderRadius: 3,
    marginBottom: 4,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 3,
  },
  progressText: {
    fontSize: 12,
    color: '#666666',
    fontWeight: '600',
  },
  actionButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#f8f9fa',
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyStateMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  emptyStateButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  emptyStateButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  filterModal: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  filterContent: {
    width: '90%',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    maxHeight: '80%',
  },
  filterHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  filterTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  filterSection: {
    marginBottom: 20,
  },
  filterSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  filterOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  filterOptionText: {
    fontSize: 16,
    color: '#333333',
    marginLeft: 12,
  },
  applyFilterButton: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
  },
  applyFilterButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
</file>

<file path="app/(management)/dashboard.tsx">
import React, { useState, useEffect } from 'react';
import { View, ScrollView, Alert, TouchableOpacity } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { SvgXml } from 'react-native-svg';

// Design System Components
import { DashboardTemplate } from '../../src/components/templates/DashboardTemplate';
import { Card } from '../../src/components/molecules/Card';
import { QuickAction } from '../../src/components/molecules/QuickAction';
import { ListItem } from '../../src/components/molecules/ListItem';
import { Typography } from '../../src/components/atoms/Typography';
import { LoadingSpinner } from '../../src/components/atoms/LoadingSpinner/LoadingSpinner';
import { ErrorMessage } from '../../src/components/molecules/ErrorMessage/ErrorMessage';
import { EmptyState } from '../../src/components/molecules/EmptyState/EmptyState';
import { SkeletonCard } from '../../src/components/molecules/SkeletonCard/SkeletonCard';

// Context and Services
import { useAuth } from '../../src/context/AuthContext';
import { fetchIncidentsForSchool } from '../../src/services/incidents';
import { fetchDashboardMetrics, DashboardMetrics } from '../../src/services/dashboard';
import { logoSvg } from '../../src/utils/svgPatterns';
import { colors } from '../../src/styles/colors';
import { Incident } from '../../src/types';

// Icon types for proper typing
type IoniconsIcon = keyof typeof Ionicons.glyphMap;

// Updated interface to match Supabase query result
// Incident interface now imported from centralized types

export default function ManagementDashboard() {
  const router = useRouter();
  const { user, profile, signOut, loading: authLoading } = useAuth();
  const [schoolName, setSchoolName] = useState('Zaid Bin Tsabit');
  const [activeTab, setActiveTab] = useState('dashboard');
  const [incidents, setIncidents] = useState<Incident[]>([]);
  const [dashboardMetrics, setDashboardMetrics] = useState<DashboardMetrics | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [dashboardLoading, setDashboardLoading] = useState(true);

  // Function to get incident priority color based on type
  const getIncidentPriorityColor = (type: string) => {
    switch(type) {
      case 'bullying':
        return colors.error.main; // Red for bullying
      case 'safety':
        return colors.warning.main; // Orange for safety issues
      case 'property':
        return colors.info.main; // Blue for property damage
      default:
        return colors.secondary.main; // Purple for other issues
    }
  };

  // Function to format relative time (e.g. "2 hours ago")
  const getRelativeTime = (dateString: string) => {
    const now = new Date();
    const past = new Date(dateString);
    const diffMs = now.getTime() - past.getTime();
    
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMins < 60) {
      return `${diffMins} menit yang lalu`;
    } else if (diffHours < 24) {
      return `${diffHours} jam yang lalu`;
    } else {
      return `${diffDays} hari yang lalu`;
    }
  };

  // Unified data fetching function to prevent loading state race conditions
  const fetchDashboardData = async () => {
    if (!user) {
      setError('User not authenticated.');
      return;
    }

    // Check both user metadata and profile for school_id
    const rawSchoolId = user.user_metadata?.school_id || profile?.school_id;
    if (rawSchoolId === undefined || rawSchoolId === null) {
      setError('School ID not found for this user.');
      return;
    }

    // Normalize school_id to ensure it's a number, handling all input types
    let schoolId: number;
    if (typeof rawSchoolId === 'string') {
      schoolId = parseInt(rawSchoolId, 10);
    } else if (typeof rawSchoolId === 'number') {
      schoolId = rawSchoolId;
    } else {
      setError('Invalid School ID format for this user.');
      return;
    }

    // Check if the conversion resulted in a valid number (including 0)
    if (isNaN(schoolId) || schoolId < 0) {
      setError('Invalid School ID for this user.');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      console.log('Fetching dashboard data for school ID:', schoolId);

      // Fetch both incidents and metrics concurrently using Promise.all
      const [incidentsResponse, metricsResponse] = await Promise.all([
        fetchIncidentsForSchool(schoolId, 5),
        fetchDashboardMetrics(schoolId)
      ]);

      console.log('Incidents response:', incidentsResponse);
      console.log('Metrics response:', metricsResponse);

      // Handle incidents response
      if (incidentsResponse.data && !incidentsResponse.error) {
        setIncidents(incidentsResponse.data);
      } else {
        console.error('Failed to fetch incidents:', incidentsResponse.error);
        setError(incidentsResponse.error?.message || 'Failed to fetch incidents');
      }

      // Handle metrics response
      if (metricsResponse.data && !metricsResponse.error) {
        setDashboardMetrics(metricsResponse.data);
      } else {
        console.error('Failed to fetch dashboard metrics:', metricsResponse.error);
        // Don't set error for metrics failure, just log it
        console.warn('Dashboard metrics unavailable, continuing with incidents only');
      }

    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      setError('Failed to load dashboard data. Please try again.');
    } finally {
      setIsLoading(false);
      setDashboardLoading(false);
    }
  };

  // Navigate to incident detail
  const navigateToIncidentDetail = (incidentId: number) => {
    console.log('Navigating to incident detail:', incidentId);
    Alert.alert('Info', `Detail insiden #${incidentId} akan segera tersedia`);
  };

  // Handle navigation
  const handleNavigate = (route: string) => {
    router.push(route as Parameters<typeof router.push>[0]);
  };

  // Tab configuration
  const tabs = [
    {
      id: 'dashboard',
      label: 'Dashboard',
      icon: 'home-outline' as IoniconsIcon,
    },
    {
      id: 'profile',
      label: 'Profil',
      icon: 'person-outline' as IoniconsIcon,
    },
  ];

  // Header actions
  const headerActions = [
    {
      icon: 'notifications-outline' as IoniconsIcon,
      onPress: () => console.log('Notifications pressed'),
      badge: 3,
      accessibilityLabel: 'Notifikasi',
    },
    {
      icon: 'person-outline' as IoniconsIcon,
      onPress: () => setActiveTab('profile'),
      accessibilityLabel: 'Profil',
    },
  ];

  // Quick actions configuration
  const quickActions = [
    {
      title: 'Tambah Insiden',
      icon: 'add-circle-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/management/incident/create'),
      variant: 'primary' as const,
    },
    {
      title: 'Kelola Pengguna',
      icon: 'people-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/management/users'),
      variant: 'primary' as const,
    },
    {
      title: 'Laporan',
      icon: 'stats-chart-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/management/reports'),
      variant: 'secondary' as const,
    },
    {
      title: 'Pengaturan',
      icon: 'settings-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/management/settings'),
      variant: 'primary' as const,
    },
  ];

  // Load data when component mounts or user/profile changes
  useEffect(() => {
    if (user && !authLoading) {
      fetchDashboardData();
    }
  }, [user, profile, authLoading]);

  // No additional refresh needed - data loads on mount and user change

  const renderDashboard = () => {
    if (isLoading && dashboardLoading) {
      return (
        <ScrollView showsVerticalScrollIndicator={false}>
          {/* Welcome Section Skeleton */}
          <SkeletonCard style={{ marginBottom: 20, height: 100 }} />
          
          {/* Metrics Skeleton */}
          <View style={{ marginBottom: 20 }}>
            <SkeletonCard style={{ width: 200, height: 30, marginBottom: 15 }} />
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 12 }}>
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 120 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 120 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 120 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 120 }} />
            </View>
          </View>

          {/* Quick Actions Skeleton */}
          <View style={{ marginBottom: 20 }}>
            <SkeletonCard style={{ width: 150, height: 30, marginBottom: 15 }} />
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 12 }}>
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 80 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 80 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 80 }} />
              <SkeletonCard style={{ flex: 1, minWidth: '45%', height: 80 }} />
            </View>
          </View>

          {/* Recent Incidents Skeleton */}
          <View style={{ marginBottom: 20 }}>
            <SkeletonCard style={{ width: 180, height: 30, marginBottom: 15 }} />
            <SkeletonCard style={{ height: 300 }} />
          </View>
        </ScrollView>
      );
    }

    if (error) {
      return (
        <ScrollView showsVerticalScrollIndicator={false}>
          <ErrorMessage
            message={error}
            onRetry={fetchDashboardData}
          />
        </ScrollView>
      );
    }

    return (
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Welcome Section */}
        <Card variant="elevated" style={{ marginBottom: 20 }}>
          <View style={{ flexDirection: 'row', alignItems: 'center' }}>
            <View style={{ flex: 1 }}>
              <Typography variant="h4" color="textSecondary" style={{ marginBottom: 4 }}>
                Selamat datang,
              </Typography>
              <Typography variant="h3" weight="bold" color="primary">
                {profile?.full_name || 'Pengguna'}
              </Typography>
            </View>
            <SvgXml xml={logoSvg} width={60} height={60} />
          </View>
        </Card>

        {/* Dashboard Metrics */}
        {dashboardMetrics && (
          <View style={{ marginBottom: 20 }}>
            <Typography variant="h4" style={{ marginBottom: 15 }}>
              Ringkasan Sekolah
            </Typography>
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 12 }}>
              <Card variant="default" style={{ flex: 1, minWidth: '45%', alignItems: 'center', padding: 20 }}>
                <Typography variant="h2" weight="bold" color="primary">
                  {dashboardMetrics.studentEnrollment}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Total Siswa
                </Typography>
              </Card>
              <Card variant="default" style={{ flex: 1, minWidth: '45%', alignItems: 'center', padding: 20 }}>
                <Typography variant="h2" weight="bold" color="primary">
                  {dashboardMetrics.teacherCount}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Total Guru
                </Typography>
              </Card>
              <Card variant="default" style={{ flex: 1, minWidth: '45%', alignItems: 'center', padding: 20 }}>
                <Typography variant="h2" weight="bold" color="error">
                  {dashboardMetrics.incidentSummary.total}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Total Insiden
                </Typography>
              </Card>
              <Card variant="default" style={{ flex: 1, minWidth: '45%', alignItems: 'center', padding: 20 }}>
                <Typography variant="h2" weight="bold" color="warning">
                  {dashboardMetrics.incidentSummary.pending}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Insiden Pending
                </Typography>
              </Card>
            </View>
          </View>
        )}

        {/* Quick Actions */}
        <View style={{ marginBottom: 20 }}>
          <Typography variant="h4" style={{ marginBottom: 15 }}>
            Aksi Cepat
          </Typography>
          <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 12 }}>
            {quickActions.map((action, index) => (
              <QuickAction
                key={index}
                title={action.title}
                icon={action.icon}
                onPress={action.onPress}
                style={{ flex: 1, minWidth: '45%' }}
                variant={action.variant}
              />
            ))}
          </View>
        </View>

        {/* Recent Incidents */}
        <View style={{ marginBottom: 20 }}>
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 15 }}>
            <Typography variant="h4">Insiden Terbaru</Typography>
            <TouchableOpacity>
              <Typography variant="body2" color="primary">Lihat Semua</Typography>
            </TouchableOpacity>
          </View>
          
          <Card variant="default">
            {incidents.length === 0 ? (
              <EmptyState
                title="Tidak ada insiden terbaru"
                message="Insiden baru akan muncul di sini"
                icon="document-outline"
              />
            ) : (
              incidents.slice(0, 5).map((incident, index) => (
                <View key={incident.id}>
                  <ListItem
                    title={incident.incident_type.charAt(0).toUpperCase() + incident.incident_type.slice(1)}
                    subtitle={incident.description}
                    leftComponent={
                      <View style={{
                        width: 4,
                        height: 40,
                        backgroundColor: getIncidentPriorityColor(incident.incident_type),
                        borderRadius: 2,
                      }} />
                    }
                    rightComponent={
                      <Typography variant="caption" color="textSecondary">
                        {getRelativeTime(incident.created_at)} • {incident.location}
                      </Typography>
                    }
                    onPress={() => navigateToIncidentDetail(incident.id)}
                  />
                  {index < incidents.slice(0, 5).length - 1 && (
                    <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
                  )}
                </View>
              ))
            )}
          </Card>
        </View>
      </ScrollView>
    );
  };

  const renderProfile = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      <Card variant="elevated" style={{ marginBottom: 20, alignItems: 'center', padding: 40 }}>
        <Ionicons name="person-circle" size={80} color={colors.primary.main} />
        <Typography variant="h3" weight="bold" color="primary" style={{ marginTop: 12 }}>
          {profile?.full_name || 'Nama Pengguna'}
        </Typography>
        <Typography variant="body1" color="textSecondary" style={{ marginTop: 4 }}>
          {profile?.role === 'management' ? 'Manajemen Sekolah' : 'Pengguna'}
        </Typography>
        <Typography variant="body2" color="textSecondary" style={{ marginTop: 2 }}>
          {schoolName}
        </Typography>
      </Card>

      <Card variant="default" style={{ marginBottom: 16 }}>
        <Typography variant="h4" style={{ marginBottom: 16 }}>
          Pengaturan Akun
        </Typography>
        
        <ListItem
          title="Edit Profil"
          leftIcon="person-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur edit profil akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Pengaturan Notifikasi"
          leftIcon="notifications-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur pengaturan notifikasi akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Bahasa"
          leftIcon="language-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur pengaturan bahasa akan segera hadir!')}
        />
      </Card>
      
      <Card variant="default" style={{ marginBottom: 16 }}>
        <Typography variant="h4" style={{ marginBottom: 16 }}>
          Bantuan
        </Typography>
        
        <ListItem
          title="Pusat Bantuan"
          leftIcon="help-circle-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur pusat bantuan akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Syarat & Ketentuan"
          leftIcon="document-text-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur syarat & ketentuan akan segera hadir!')}
        />
        <View style={{ height: 1, backgroundColor: colors.neutral[200], marginHorizontal: 16 }} />
        
        <ListItem
          title="Kebijakan Privasi"
          leftIcon="shield-checkmark-outline"
          rightIcon="chevron-forward"
          onPress={() => Alert.alert('Info', 'Fitur kebijakan privasi akan segera hadir!')}
        />
      </Card>
    </ScrollView>
  );

  // Content mapping based on active tab
  const getContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboard();
      case 'profile':
        return renderProfile();
      default:
        return renderDashboard();
    }
  };

  return (
    <DashboardTemplate
      header={{
        title: 'Dashboard Manajemen',
        subtitle: schoolName,
        leftAction: {
          icon: 'arrow-back-outline' as IoniconsIcon,
          onPress: () => router.replace('/login'),
          accessibilityLabel: 'Kembali ke login',
        },
        rightActions: headerActions,
      }}
      tabs={tabs}
      activeTab={activeTab}
      onTabChange={setActiveTab}
      backgroundPattern={true}
      contentPadding={true}
      testID="management-dashboard"
    >
      {getContent()}
    </DashboardTemplate>
  );
}
</file>

<file path="app/(student)/dashboard.tsx">
import React, { useState } from 'react';
import { View, StyleSheet, ScrollView } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import { Stack, useRouter } from 'expo-router';
import { SvgXml } from 'react-native-svg';
import LogoutButton from '@/src/components/molecules/LogoutButton';
import BoardingInfoModal from '@/src/components/organisms/StudentBoardingInfoModal';
import CommunicationModal from '@/src/components/organisms/StudentCommunicationModal';
import IncidentReportModal from '@/src/components/organisms/StudentIncidentReportModal';
import { useAuth } from '@/src/context/AuthContext';
import { DashboardTemplate } from '@/src/components/templates/DashboardTemplate';
import type { TabConfig, HeaderAction } from '@/src/components/templates/DashboardTemplate';
import { Card } from '@/src/components/molecules/Card';
import { QuickAction } from '@/src/components/molecules/QuickAction';
import { ProgressBar } from '@/src/components/molecules/ProgressBar';
import { ListItem } from '@/src/components/molecules/ListItem';
import { Button } from '@/src/components/atoms/Button';
import { Typography } from '@/src/components/atoms/Typography';
import { Modal } from '@/src/components/organisms/Modal';
import { colors } from '@/src/styles/colors';
import { spacing } from '@/src/styles/spacing';

export default function StudentDashboard() {
  const router = useRouter();
  const { profile, loading } = useAuth();
  const [modalVisible, setModalVisible] = useState(false);
  const [modalContent, setModalContent] = useState<{
    title: string;
    content: React.ReactNode;
  }>({ title: '', content: null });
  const [activeTab, setActiveTab] = useState('dashboard');

  // Header configuration
  const headerConfig = {
    title: 'Dashboard Siswa',
    rightActions: [
      {
        icon: 'notifications-outline' as keyof typeof Ionicons.glyphMap,
        onPress: () => {
          // TODO: Implement notification handling
          console.log('Notifications pressed');
        },
        accessibilityLabel: 'Notifikasi',
        testID: 'notifications-button',
      },
    ] as HeaderAction[],
  };

  // Tab configuration
  const tabsConfig: TabConfig[] = [
    {
      id: 'dashboard',
      label: 'Beranda',
      icon: 'home-outline',
      accessibilityLabel: 'Beranda',
      testID: 'tab-dashboard',
    },
    {
      id: 'messages',
      label: 'Pesan',
      icon: 'chatbubble-outline',
      accessibilityLabel: 'Pesan',
      testID: 'tab-messages',
    },
    {
      id: 'schedule',
      label: 'Jadwal',
      icon: 'calendar-outline',
      accessibilityLabel: 'Jadwal',
      testID: 'tab-schedule',
    },
    {
      id: 'profile',
      label: 'Profil',
      icon: 'person-outline',
      accessibilityLabel: 'Profil',
      testID: 'tab-profile',
    },
  ];
  
  const navigateToQuranProgress = () => {
    router.push('/(student)/quran-progress');
  };

  const navigateToSchedule = () => {
    router.push('/(student)/schedule');
  };

  const navigateToBoardingInfo = () => {
    router.push('/(student)/boarding-info');
  };

  const navigateToIncidentReport = () => {
    router.push('/(student)/incident-report');
  };

  const navigateToAntiBullying = () => {
    router.push('/(student)/anti-bullying');
  };

  const openModal = (title: string, content: React.ReactNode) => {
    setModalContent({ title, content });
    setModalVisible(true);
  };
  
  // Components are now imported from separate files
  
  const renderDashboard = () => (
    <ScrollView style={styles.contentContainer}>
      {/* Welcome Banner */}
      <Card 
        variant="default" 
        padding="large"
        style={styles.welcomeBanner}
      >
        <View style={styles.welcomeContent}>
          <Typography variant="body2" color={colors.text.inverse}>
            Assalamu'alaikum,
          </Typography>
          <Typography variant="h3" color={colors.text.inverse} weight="bold" style={{ marginVertical: spacing.xs }}>
            {profile?.full_name || 'Ahmad Fauzi'}
          </Typography>
          <Typography variant="body2" color={colors.secondary.light}>
            Semangat menghafal Al-Quran hari ini!
          </Typography>
        </View>
        <View style={styles.logoContainer}>
          <SvgXml xml={logoSvg} width={80} height={80} />
        </View>
      </Card>
      
      {/* Progress Section */}
      <View style={styles.sectionContainer}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
          Progress Hafalan
        </Typography>
        <Card variant="default" padding="medium">
          <View style={styles.progressHeader}>
            <Typography variant="body1" weight="bold" color="primary">
              Al-Baqarah
            </Typography>
            <Typography variant="body1" weight="bold" color={colors.primary.main}>
              60%
            </Typography>
          </View>
          <ProgressBar
            value={60}
            variant="default"
            size="medium"
            animated={true}
            style={{ marginVertical: spacing.md }}
          />
          <Typography variant="body2" color="secondary" align="center">
            120 dari 200 ayat
          </Typography>
        </Card>
      </View>
      
      {/* Quick Actions */}
      <View style={styles.sectionContainer}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
          Aksi Cepat
        </Typography>
        <View style={styles.quickActionsContainer}>
          <QuickAction
            title="Hafalan"
            icon="book"
            variant="primary"
            size="medium"
            onPress={navigateToQuranProgress}
            style={{ width: '23%' }}
            testID="quick-action-hafalan"
          />
          
          <QuickAction
            title="Jadwal"
            icon="calendar"
            variant="secondary"
            size="medium"
            onPress={navigateToSchedule}
            style={{ width: '23%' }}
            testID="quick-action-jadwal"
          />
          
          <QuickAction
            title="Komunikasi"
            icon="chatbubbles"
            variant="primary"
            size="medium"
            onPress={() => openModal('Komunikasi', <CommunicationModal />)}
            style={{ width: '23%' }}
            testID="quick-action-komunikasi"
          />
          
          <QuickAction
            title="Profil"
            icon="person"
            variant="primary"
            size="medium"
            onPress={() => setActiveTab('profile')}
            style={{ width: '23%' }}
            testID="quick-action-profil"
          />
        </View>
      </View>

      {/* New Feature Section */}
      <View style={styles.sectionContainer}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
          Fitur Tambahan
        </Typography>
        <View style={styles.quickActionsContainer}>
          <QuickAction
            title="Info Asrama"
            icon="home"
            variant="default"
            size="medium"
            onPress={navigateToBoardingInfo}
            style={{ width: '23%' }}
            testID="quick-action-info-asrama"
          />
          
          <QuickAction
            title="Lapor Masalah"
            icon="warning"
            variant="default"
            size="medium"
            onPress={navigateToIncidentReport}
            style={{ width: '23%' }}
            testID="quick-action-lapor-masalah"
          />
          
          <QuickAction
            title="Anti-Perundungan"
            icon="shield"
            variant="default"
            size="medium"
            onPress={navigateToAntiBullying}
            style={{ width: '23%' }}
            testID="quick-action-anti-perundungan"
          />
          
          <QuickAction
            title="Izin Keluar"
            icon="document-text"
            variant="default"
            size="medium"
            onPress={() => alert('Fitur izin keluar akan segera hadir!')}
            style={{ width: '23%' }}
            testID="quick-action-izin-keluar"
          />
        </View>
      </View>
      
      {/* Upcoming Schedule */}
      <View style={styles.sectionContainer}>
        <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
          Jadwal Mendatang
        </Typography>
        <Card variant="default" padding="medium">
          <View style={styles.scheduleHeader}>
            <View style={styles.scheduleDay}>
              <Typography variant="body2" color={colors.text.inverse} weight="bold">
                Senin
              </Typography>
            </View>
            <View style={styles.scheduleInfo}>
              <Typography variant="body1" color="primary" weight="bold" style={{ marginBottom: spacing.xs }}>
                08:00 - 10:00
              </Typography>
              <Typography variant="body2" color="secondary">
                Setoran Hafalan
              </Typography>
            </View>
          </View>
          <Typography variant="body2" color="tertiary" style={{ fontStyle: 'italic' }}>
            Persiapkan hafalan Al-Baqarah ayat 255-257
          </Typography>
        </Card>
      </View>
    </ScrollView>
  );

  const renderMessages = () => (
    <View style={styles.centeredContainer}>
      <MaterialIcons name="message" size={80} color={colors.neutral[400]} />
      <Typography variant="h4" color="secondary" weight="bold" style={{ marginTop: spacing.md }}>
        Fitur Pesan Segera Hadir
      </Typography>
      <Typography variant="body2" color="tertiary" align="center" style={{ marginTop: spacing.sm, paddingHorizontal: spacing.lg }}>
        Anda akan dapat berkomunikasi dengan guru dan orang tua di sini.
      </Typography>
    </View>
  );

  const renderSchedule = () => (
    <View style={styles.centeredContainer}>
      <MaterialIcons name="event-note" size={80} color={colors.neutral[400]} />
      <Typography variant="h4" color="secondary" weight="bold" style={{ marginTop: spacing.md }}>
        Jadwal Lengkap Segera Hadir
      </Typography>
      <Typography variant="body2" color="tertiary" align="center" style={{ marginTop: spacing.sm, paddingHorizontal: spacing.lg }}>
        Anda akan dapat melihat jadwal harian, mingguan, dan bulanan di sini.
      </Typography>
    </View>
  );

  const renderProfile = () => {
    if (loading) {
      return (
        <ScrollView style={styles.contentContainer}>
          <View style={styles.profileHeader}>
            <Ionicons name="person-circle-outline" size={80} color={colors.role.student.primary} />
            <Typography variant="h3" color="primary" weight="bold" style={{ marginTop: spacing.md }}>
              Loading...
            </Typography>
            <Typography variant="body1" color="secondary" style={{ marginTop: spacing.xs }}>
              Loading...
            </Typography>
          </View>
        </ScrollView>
      );
    }

    return (
      <ScrollView style={styles.contentContainer}>
        <View style={styles.profileHeader}>
          <Ionicons name="person-circle-outline" size={80} color={colors.role.student.primary} />
          <Typography variant="h3" color="primary" weight="bold" style={{ marginTop: spacing.md }}>
            {profile?.full_name || 'Nama Siswa'}
          </Typography>
          <Typography variant="body1" color="secondary" style={{ marginTop: spacing.xs }}>
            {profile?.role === 'student' ? 'Siswa' : profile?.role || 'Role tidak diketahui'}
          </Typography>
        </View>
      
        <View style={styles.profileSection}>
          <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
            Pengaturan Akun
          </Typography>
          
          <Card variant="default" padding="none" style={{ marginBottom: spacing.xs }}>
            <ListItem
              title="Edit Profil"
              leftIcon="person"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur edit profil akan segera hadir!')}
              testID="profile-edit"
            />
            <ListItem
              title="Ubah Password"
              leftIcon="lock-closed"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur ubah password akan segera hadir!')}
              showDivider={true}
              testID="profile-password"
            />
            <ListItem
              title="Pengaturan Notifikasi"
              leftIcon="notifications"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur pengaturan notifikasi akan segera hadir!')}
              showDivider={true}
              testID="profile-notifications"
            />
            <ListItem
              title="Bahasa"
              leftIcon="language"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur pengaturan bahasa akan segera hadir!')}
              showDivider={true}
              testID="profile-language"
            />
          </Card>
        </View>
        
        <View style={styles.profileSection}>
          <Typography variant="h4" color="primary" weight="bold" style={{ marginBottom: spacing.md }}>
            Bantuan
          </Typography>
          
          <Card variant="default" padding="none" style={{ marginBottom: spacing.xs }}>
            <ListItem
              title="Pusat Bantuan"
              leftIcon="help-circle"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur pusat bantuan akan segera hadir!')}
              testID="profile-help"
            />
            <ListItem
              title="Syarat & Ketentuan"
              leftIcon="document-text"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur syarat & ketentuan akan segera hadir!')}
              showDivider={true}
              testID="profile-terms"
            />
            <ListItem
              title="Kebijakan Privasi"
              leftIcon="shield-checkmark"
              rightIcon="chevron-forward"
              onPress={() => alert('Fitur kebijakan privasi akan segera hadir!')}
              showDivider={true}
              testID="profile-privacy"
            />
          </Card>
        </View>
        
        <View style={styles.profileSection}>
          <LogoutButton variant="button" style={styles.logoutButton} />
        </View>
      </ScrollView>
    );
  };
  
  // Render current tab content
  const renderCurrentTabContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboard();
      case 'messages':
        return renderMessages();
      case 'schedule':
        return renderSchedule();
      case 'profile':
        return renderProfile();
      default:
        return renderDashboard();
    }
  };

  return (
    <>
      <Stack.Screen options={{ 
        headerShown: false,
        title: "Dashboard Siswa" 
      }} />
      
      <DashboardTemplate
        header={headerConfig}
        tabs={tabsConfig}
        activeTab={activeTab}
        onTabChange={setActiveTab}
        backgroundPattern={true}
        scrollable={false}
        contentPadding={false}
        testID="student-dashboard"
      >
        {renderCurrentTabContent()}
      </DashboardTemplate>

      {/* Modal for detailed views */}
      <Modal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        title={modalContent.title}
        size="large"
        animationType="slide"
        scrollable={true}
        closeOnBackdrop={true}
        showCloseButton={true}
        testID="student-dashboard-modal"
      >
        {modalContent.content}
      </Modal>
    </>
  );
}

// Background Pattern SVG
const backgroundPatternSvg = `
<svg width="100%" height="100%" viewBox="0 0 800 1600" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="800" height="1600" fill="${colors.background.primary}"/>
  
  <!-- Islamic Geometric Pattern -->
  <!-- Pattern 1: Top section -->
  <g opacity="0.05">
    <g transform="translate(0, 0)">
      ${generateGeometricPattern(8, 8, 50)}
    </g>
  </g>
  
  <!-- Pattern 2: Middle section -->
  <g opacity="0.05">
    <g transform="translate(0, 800)">
      ${generateStarPattern(8, 4, 100)}
    </g>
  </g>
  
  <!-- Pattern 3: Bottom section -->
  <g opacity="0.05">
    <g transform="translate(0, 1200)">
      ${generateArabicPattern(8, 4, 100)}
    </g>
  </g>
</svg>
`;

// Helper function to generate geometric pattern
function generateGeometricPattern(rows: number, cols: number, size: number): string {
  let pattern = '';
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const x = j * size;
      const y = i * size;
      pattern += `
        <path d="M${x} ${y} L${x + size/2} ${y + size/2} L${x} ${y + size} L${x - size/2} ${y + size/2} Z" fill="${colors.role.student.primary}"/>
        <path d="M${x + size} ${y} L${x + size/2} ${y + size/2} L${x + size} ${y + size} L${x + size*1.5} ${y + size/2} Z" fill="${colors.role.student.primary}"/>
        <path d="M${x} ${y + size} L${x + size/2} ${y + size/2} L${x + size} ${y + size} L${x + size/2} ${y + size*1.5} Z" fill="${colors.role.student.primary}"/>
        <path d="M${x} ${y} L${x + size/2} ${y + size/2} L${x + size} ${y} L${x + size/2} ${y - size/2} Z" fill="${colors.role.student.primary}"/>
      `;
    }
  }
  return pattern;
}

// Helper function to generate star pattern
function generateStarPattern(rows: number, cols: number, size: number): string {
  let pattern = '';
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const x = j * size * 2;
      const y = i * size * 2;
      const centerX = x + size;
      const centerY = y + size;
      
      // 8-point star
      pattern += `
        <path d="M${centerX} ${centerY - size} L${centerX + size/3} ${centerY - size/3} L${centerX + size} ${centerY} L${centerX + size/3} ${centerY + size/3} L${centerX} ${centerY + size} L${centerX - size/3} ${centerY + size/3} L${centerX - size} ${centerY} L${centerX - size/3} ${centerY - size/3} Z" fill="${colors.role.student.primary}"/>
      `;
      
      // Connecting lines
      pattern += `
        <path d="M${centerX - size} ${centerY} L${centerX - size*2} ${centerY}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX + size} ${centerY} L${centerX + size*2} ${centerY}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX} ${centerY - size} L${centerX} ${centerY - size*2}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX} ${centerY + size} L${centerX} ${centerY + size*2}" stroke="${colors.role.student.primary}" stroke-width="1"/>
      `;
    }
  }
  return pattern;
}

// Helper function to generate Arabic-inspired pattern
function generateArabicPattern(rows: number, cols: number, size: number): string {
  let pattern = '';
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      const centerX = j * size * 3 + size * 1.5;
      const centerY = i * size * 3 + size * 1.5;
      
      pattern += `
        <path d="M${centerX - size} ${centerY - size} L${centerX} ${centerY - size*1.5} L${centerX + size} ${centerY - size} L${centerX + size} ${centerY + size/2} L${centerX} ${centerY + size} L${centerX - size} ${centerY + size/2} Z" stroke="${colors.role.student.primary}" stroke-width="1" fill="none"/>
        <path d="M${centerX - size} ${centerY - size} L${centerX - size} ${centerY + size/2}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX + size} ${centerY - size} L${centerX + size} ${centerY + size/2}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX - size} ${centerY + size/2} L${centerX - size} ${centerY + size}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX + size} ${centerY + size/2} L${centerX + size} ${centerY + size}" stroke="${colors.role.student.primary}" stroke-width="1"/>
        <path d="M${centerX - size} ${centerY + size} Q${centerX} ${centerY + size*1.2}, ${centerX + size} ${centerY + size}" stroke="${colors.role.student.primary}" stroke-width="1" fill="none"/>
      `;
    }
  }
  return pattern;
}

// Logo SVG
const logoSvg = `
<svg width="80" height="80" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="60" cy="60" r="60" fill="${colors.role.student.primary}"/>
  <circle cx="60" cy="60" r="50" fill="${colors.role.student.primary}" stroke="${colors.secondary.main}" stroke-width="2"/>
  
  <!-- Open Book -->
  <path d="M30 45 L30 75 L60 65 L90 75 L90 45 L60 35 L30 45Z" fill="${colors.secondary.main}"/>
  <path d="M30 45 L60 35 L60 65 L30 75 L30 45Z" fill="${colors.secondary.main}" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M60 35 L90 45 L90 75 L60 65 L60 35Z" fill="${colors.white}" stroke="${colors.role.student.primary}" stroke-width="1"/>
  
  <!-- Book Pages Lines -->
  <path d="M40 48 L50 45" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M40 53 L50 50" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M40 58 L50 55" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M70 45 L80 48" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M70 50 L80 53" stroke="${colors.role.student.primary}" stroke-width="1"/>
  <path d="M70 55 L80 58" stroke="${colors.role.student.primary}" stroke-width="1"/>
  
  <!-- Decorative Elements -->
  <circle cx="60" cy="85" r="5" fill="${colors.secondary.main}"/>
  <path d="M55 25 Q60 15 65 25" stroke="${colors.secondary.main}" stroke-width="2" fill="none"/>
  <path d="M50 28 Q60 15 70 28" stroke="${colors.secondary.main}" stroke-width="2" fill="none"/>
</svg>
`;

const styles = StyleSheet.create({
  // Core layout styles
  contentContainer: {
    flex: 1,
    padding: spacing.md,
  },
  
  // Welcome banner styles (custom styling for Card component)
  welcomeBanner: {
    backgroundColor: colors.role.student.primary,
    flexDirection: 'row',
    alignItems: 'center',
  },
  welcomeContent: {
    flex: 1,
  },
  logoContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  // Section layout styles
  sectionContainer: {
    marginBottom: spacing.lg,
  },
  
  // Progress section styles
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  
  // Quick actions layout
  quickActionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  
  // Schedule section styles
  scheduleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  scheduleDay: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: colors.secondary.main,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: spacing.md,
  },
  scheduleInfo: {
    flex: 1,
  },
  
  // Placeholder content styles
  centeredContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: spacing.md,
  },
  
  // Profile section styles
  profileHeader: {
    alignItems: 'center',
    padding: spacing.md,
  },
  profileSection: {
    marginBottom: spacing.lg,
  },
  logoutButton: {
    backgroundColor: colors.error.main,
    borderRadius: spacing.sm,
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.md,
    marginHorizontal: spacing.md,
    marginTop: spacing.md,
    marginBottom: spacing.lg,
    shadowColor: colors.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
});
</file>

<file path="app/(teacher)/dashboard.tsx">
import React, { useState, useEffect } from 'react';
import { View, ScrollView } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { SvgXml } from 'react-native-svg';

// Design System Components
import { DashboardTemplate } from '../../src/components/templates/DashboardTemplate';
import { Card } from '../../src/components/molecules/Card';
import { QuickAction } from '../../src/components/molecules/QuickAction';
import { ListItem } from '../../src/components/molecules/ListItem';
import { Typography } from '../../src/components/atoms/Typography';
import { LoadingSpinner } from '../../src/components/atoms/LoadingSpinner/LoadingSpinner';
import { ErrorMessage } from '../../src/components/molecules/ErrorMessage/ErrorMessage';
import { EmptyState } from '../../src/components/molecules/EmptyState/EmptyState';
import { SkeletonCard } from '../../src/components/molecules/SkeletonCard/SkeletonCard';

// Context and Services
import { useAuth } from '../../src/context/AuthContext';
import { supabase } from '../../src/utils/supabase';
import { logoSvg } from '../../src/utils/svgPatterns';
import { colors } from '../../src/styles/colors';

// Modal Components
import TeacherProfileView from '../../src/components/organisms/TeacherProfileView';

// Icon types for proper typing
type IoniconsIcon = keyof typeof Ionicons.glyphMap;

export default function TeacherDashboard() {
  const router = useRouter();
  const { profile, loading: authLoading } = useAuth();
  const [schoolName, setSchoolName] = useState('Zaid Bin Tsabit');
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activities, setActivities] = useState<ActivityItem[]>([]);
  const [upcomingSchedule, setUpcomingSchedule] = useState<TeacherScheduleItem | null>(null);

  // Data interfaces
  interface ActivityItem {
    id: number;
    title: string;
    detail: string;
    time: string;
    icon: IoniconsIcon;
  }

  interface TeacherScheduleItem {
    day: string;
    date: string;
    time: string;
    activity: string;
    note: string;
  }

  const [teacherData] = useState({
    name: profile?.full_name || 'Ustadz Guru',
  });

  // Fetch data from database
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        // Fetch school name
        if (profile?.school_id) {
          const { data: schoolData, error: schoolError } = await supabase
            .from('schools')
            .select('name')
            .eq('id', profile.school_id)
            .single();
           
          if (schoolData && !schoolError) {
            setSchoolName(schoolData.name);
          }
        }

        // Mock activities - replace with actual API calls
        setActivities([
          {
            id: 1,
            title: 'Ahmad Fauzi menyelesaikan hafalan Al-Baqarah 255-257',
            detail: 'Al-Baqarah 255-257',
            time: '10 menit yang lalu',
            icon: 'checkmark-circle-outline' as IoniconsIcon,
          },
          {
            id: 2,
            title: 'Budi Santoso belum menyetorkan hafalan minggu ini',
            detail: 'Minggu ini',
            time: '2 jam yang lalu',
            icon: 'alert-circle-outline' as IoniconsIcon,
          },
          {
            id: 3,
            title: 'Jadwal kelas Tahfidz Al-Baqarah telah diperbarui',
            detail: 'Jadwal Tahfidz',
            time: '1 hari yang lalu',
            icon: 'calendar-outline' as IoniconsIcon,
          },
        ]);

        // Mock upcoming schedule
        setUpcomingSchedule({
          day: 'Senin',
          date: new Date().toLocaleDateString('id-ID', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
          }),
          time: '08:00 - 10:00',
          activity: 'Kelas Tahfidz Al-Baqarah',
          note: 'Setoran hafalan Al-Baqarah ayat 255-257',
        });

      } catch (err) {
        console.error('Error fetching data:', err);
        setError('Gagal memuat data. Silakan coba lagi.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [profile?.school_id]);

  // Handle navigation
  const handleNavigate = (route: string) => {
    router.push(route as any);
  };

  // Handle modal opening
  const handleOpenModal = (modalType: string) => {
    console.log('Opening modal:', modalType);
  };

  // Handle retry
  const handleRetry = () => {
    setError(null);
    setIsLoading(true);
  };

  // Tab configuration
  const tabs = [
    {
      id: 'dashboard',
      label: 'Dashboard',
      icon: 'home-outline' as IoniconsIcon,
    },
    {
      id: 'students',
      label: 'Siswa',
      icon: 'people-outline' as IoniconsIcon,
    },
    {
      id: 'classes',
      label: 'Kelas',
      icon: 'school-outline' as IoniconsIcon,
    },
    {
      id: 'hafalan',
      label: 'Hafalan',
      icon: 'book-outline' as IoniconsIcon,
    },
  ];

  // Header actions
  const headerActions = [
    {
      icon: 'notifications-outline' as IoniconsIcon,
      onPress: () => console.log('Notifications pressed'),
      badge: 3,
      accessibilityLabel: 'Notifikasi',
    },
    {
      icon: 'person-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/'),
      accessibilityLabel: 'Profil',
    },
  ];

  // Quick actions configuration
  const quickActions = [
    {
      title: 'Siswa',
      icon: 'people-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/students'),
      variant: 'primary' as const,
    },
    {
      title: 'Kelas',
      icon: 'school-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/class'),
      variant: 'secondary' as const,
    },
    {
      title: 'Hafalan',
      icon: 'book-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/hafalan'),
      variant: 'primary' as const,
    },
    {
      title: 'Komunikasi',
      icon: 'chatbubbles-outline' as IoniconsIcon,
      onPress: () => handleOpenModal('communication'),
      variant: 'primary' as const,
    },
    {
      title: 'Info Asrama',
      icon: 'home-outline' as IoniconsIcon,
      onPress: () => handleOpenModal('boarding'),
      variant: 'primary' as const,
    },
    {
      title: 'Laporan Insiden',
      icon: 'warning-outline' as IoniconsIcon,
      onPress: () => handleOpenModal('incident'),
      variant: 'secondary' as const,
    },
    {
      title: 'Laporan',
      icon: 'document-text-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/reports'),
      variant: 'primary' as const,
    },
    {
      title: 'Profil',
      icon: 'person-outline' as IoniconsIcon,
      onPress: () => handleNavigate('/'),
      variant: 'primary' as const,
    },
  ];

  // Loading state renderer
  const renderLoadingState = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      <SkeletonCard variant="large" style={{ marginBottom: 20 }} />
      <Typography variant="h4" style={{ marginBottom: 15 }}>Aksi Cepat</Typography>
      <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
        {[...Array(8)].map((_, index) => (
          <SkeletonCard key={index} variant="medium" style={{ width: '48%', marginBottom: 12 }} />
        ))}
      </View>
      <Typography variant="h4" style={{ marginBottom: 15 }}>Aktivitas Terbaru</Typography>
      <SkeletonCard variant="large" />
    </ScrollView>
  );

  // Error state renderer
  const renderErrorState = () => (
    <ErrorMessage
      title="Gagal Memuat Data"
      message={error || "Terjadi kesalahan saat memuat data dashboard"}
      onRetry={handleRetry}
    />
  );

  // Empty state renderer
  const renderEmptyState = () => (
    <EmptyState
      title="Belum Ada Aktivitas"
      message="Belum ada aktivitas terbaru untuk ditampilkan"
      icon="time-outline"
    />
  );

  // Loading state
  if (authLoading || isLoading) {
    return (
      <DashboardTemplate
        header={{
          title: 'Dashboard Guru',
          subtitle: schoolName,
          leftAction: {
            icon: 'arrow-back-outline' as IoniconsIcon,
            onPress: () => router.replace('/login'),
            accessibilityLabel: 'Kembali ke login',
          },
          rightActions: headerActions,
        }}
        tabs={tabs}
        activeTab={activeTab}
        onTabChange={setActiveTab}
        backgroundPattern={true}
        contentPadding={true}
        testID="teacher-dashboard"
      >
        {renderLoadingState()}
      </DashboardTemplate>
    );
  }

  // Error state
  if (error) {
    return (
      <DashboardTemplate
        header={{
          title: 'Dashboard Guru',
          subtitle: schoolName,
          leftAction: {
            icon: 'arrow-back-outline' as IoniconsIcon,
            onPress: () => router.replace('/login'),
            accessibilityLabel: 'Kembali ke login',
          },
          rightActions: headerActions,
        }}
        tabs={tabs}
        activeTab={activeTab}
        onTabChange={setActiveTab}
        backgroundPattern={true}
        contentPadding={true}
        testID="teacher-dashboard"
      >
        {renderErrorState()}
      </DashboardTemplate>
    );
  }

  const renderDashboard = () => (
    <ScrollView showsVerticalScrollIndicator={false}>
      {/* Welcome Section */}
      <Card variant="elevated" style={{ marginBottom: 20 }}>
        <View style={{ flexDirection: 'row', alignItems: 'center' }}>
          <View style={{ flex: 1 }}>
            <Typography variant="h4" style={{ marginBottom: 4 }}>
              Assalamu'alaikum,
            </Typography>
            <Typography variant="h3" weight="bold" color="primary" style={{ marginBottom: 4 }}>
              {teacherData.name}
            </Typography>
            <Typography variant="body2" color="secondary">
              {new Date().toLocaleDateString('id-ID', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </Typography>
          </View>
          <SvgXml xml={logoSvg} width={60} height={60} />
        </View>
      </Card>

      {/* Quick Actions */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Aksi Cepat
        </Typography>
        <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
          {quickActions.slice(0, 4).map((action, index) => (
            <QuickAction
              key={index}
              title={action.title}
              icon={action.icon}
              onPress={action.onPress}
              style={{ width: '48%', marginBottom: 12 }}
              variant={action.variant}
            />
          ))}
        </View>
        <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>
          {quickActions.slice(4).map((action, index) => (
            <QuickAction
              key={index + 4}
              title={action.title}
              icon={action.icon}
              onPress={action.onPress}
              style={{ width: '48%', marginBottom: 12 }}
              variant={action.variant}
            />
          ))}
        </View>
      </View>

      {/* Recent Activities */}
      <View style={{ marginBottom: 20 }}>
        <Typography variant="h4" style={{ marginBottom: 15 }}>
          Aktivitas Terbaru
        </Typography>
        {activities.length === 0 ? (
          <EmptyState
            title="Belum Ada Aktivitas"
            message="Belum ada aktivitas terbaru untuk ditampilkan"
            icon="time-outline"
          />
        ) : (
          <Card variant="default">
            {activities.map((activity) => (
              <ListItem
                key={activity.id}
                title={activity.title}
                subtitle={activity.detail}
                leftIcon={activity.icon}
                rightComponent={
                  <Typography variant="caption" color="textSecondary">
                    {activity.time}
                  </Typography>
                }
                showDivider={activity.id !== activities[activities.length - 1].id}
              />
            ))}
          </Card>
        )}
      </View>

      {/* Upcoming Schedule */}
      {upcomingSchedule && (
        <View style={{ marginBottom: 20 }}>
          <Typography variant="h4" style={{ marginBottom: 15 }}>
            Jadwal Mendatang
          </Typography>
          <Card variant="elevated">
            <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>
              <View
                style={{
                  width: 40,
                  height: 40,
                  borderRadius: 20,
                  backgroundColor: colors.secondary.main,
                  justifyContent: 'center',
                  alignItems: 'center',
                  marginRight: 15,
                }}
              >
                <Typography variant="body2" weight="bold" color="white">
                  {upcomingSchedule.day.substring(0, 2)}
                </Typography>
              </View>
              <View style={{ flex: 1 }}>
                <Typography variant="body1" weight="semibold">
                  {upcomingSchedule.activity}
                </Typography>
                <Typography variant="caption" color="textSecondary">
                  {upcomingSchedule.time} • {upcomingSchedule.date}
                </Typography>
              </View>
            </View>
            <Typography variant="body2" color="textSecondary" style={{ fontStyle: 'italic' }}>
              {upcomingSchedule.note}
            </Typography>
          </Card>
        </View>
      )}
    </ScrollView>
  );

  const renderStudents = () => (
    <EmptyState
      title="Daftar Siswa"
      message="Fitur daftar siswa akan segera hadir"
      icon="people-outline"
    />
  );

  const renderClasses = () => (
    <EmptyState
      title="Manajemen Kelas"
      message="Fitur manajemen kelas akan segera hadir"
      icon="school-outline"
    />
  );

  const renderHafalan = () => (
    <EmptyState
      title="Manajemen Hafalan"
      message="Fitur manajemen hafalan akan segera hadir"
      icon="book-outline"
    />
  );

  const renderProfile = () => (
    <TeacherProfileView profile={profile || undefined} loading={authLoading} schoolName={schoolName} />
  );

  // Content mapping based on active tab
  const getContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboard();
      case 'students':
        return renderStudents();
      case 'classes':
        return renderClasses();
      case 'hafalan':
        return renderHafalan();
      case 'profile':
        return renderProfile();
      default:
        return renderDashboard();
    }
  };

  return (
    <DashboardTemplate
      header={{
        title: 'Dashboard Guru',
        subtitle: schoolName,
        leftAction: {
          icon: 'arrow-back-outline' as IoniconsIcon,
          onPress: () => router.replace('/login'),
          accessibilityLabel: 'Kembali ke login',
        },
        rightActions: headerActions,
      }}
      tabs={tabs}
      activeTab={activeTab}
      onTabChange={setActiveTab}
      backgroundPattern={true}
      contentPadding={true}
      testID="teacher-dashboard"
    >
      {getContent()}
    </DashboardTemplate>
  );
}
</file>

<file path="src/components/atoms/BackgroundPattern/BackgroundPattern.test.tsx">
/**
 * BackgroundPattern Component Tests
 * Unit tests for the BackgroundPattern component functionality and accessibility
 */

import React from 'react';
import { render } from '@testing-library/react-native';
import { BackgroundPattern } from './BackgroundPattern';
import { ThemeProvider } from '../../../context/ThemeContext';

// Test wrapper with theme provider
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('BackgroundPattern Component', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders with default props', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="test-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('test-pattern')).toBeTruthy();
    });

    it('renders geometric pattern by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="geometric-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('geometric-pattern')).toBeTruthy();
    });

    it('does not render when variant is none', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="none" testID="no-pattern" />
        </TestWrapper>
      );

      expect(queryByTestId('no-pattern')).toBeNull();
    });
  });

  // Variant tests
  describe('Pattern Variants', () => {
    it('renders geometric variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="geometric" testID="geometric" />
        </TestWrapper>
      );

      expect(getByTestId('geometric')).toBeTruthy();
    });

    it('renders minimal variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="minimal" testID="minimal" />
        </TestWrapper>
      );

      expect(getByTestId('minimal')).toBeTruthy();
    });

    it('renders dots variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="dots" testID="dots" />
        </TestWrapper>
      );

      expect(getByTestId('dots')).toBeTruthy();
    });

    it('renders waves variant', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="waves" testID="waves" />
        </TestWrapper>
      );

      expect(getByTestId('waves')).toBeTruthy();
    });

    it('returns null for none variant', () => {
      const { queryByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="none" testID="none" />
        </TestWrapper>
      );

      expect(queryByTestId('none')).toBeNull();
    });
  });

  // Intensity tests
  describe('Pattern Intensity', () => {
    it('renders with subtle intensity by default', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="subtle-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('subtle-pattern')).toBeTruthy();
    });

    it('renders with light intensity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern intensity="light" testID="light-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('light-pattern')).toBeTruthy();
    });

    it('renders with medium intensity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern intensity="medium" testID="medium-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('medium-pattern')).toBeTruthy();
    });

    it('renders with strong intensity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern intensity="strong" testID="strong-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('strong-pattern')).toBeTruthy();
    });
  });

  // Color customization tests
  describe('Color Customization', () => {
    it('renders with custom color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern color="#ff0000" testID="red-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('red-pattern')).toBeTruthy();
    });

    it('renders with custom opacity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern opacity={0.5} testID="custom-opacity-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('custom-opacity-pattern')).toBeTruthy();
    });

    it('renders with both custom color and opacity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            color="#00ff00" 
            opacity={0.3} 
            testID="custom-color-opacity-pattern" 
          />
        </TestWrapper>
      );

      expect(getByTestId('custom-color-opacity-pattern')).toBeTruthy();
    });
  });

  // Dimensions tests
  describe('Dimensions', () => {
    it('renders with default dimensions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="default-size-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('default-size-pattern')).toBeTruthy();
    });

    it('renders with custom width and height', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            width={200} 
            height={300} 
            testID="custom-size-pattern" 
          />
        </TestWrapper>
      );

      expect(getByTestId('custom-size-pattern')).toBeTruthy();
    });

    it('renders with percentage dimensions', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            width="50%" 
            height="75%" 
            testID="percentage-size-pattern" 
          />
        </TestWrapper>
      );

      expect(getByTestId('percentage-size-pattern')).toBeTruthy();
    });
  });

  // Style customization tests
  describe('Style Customization', () => {
    it('applies custom styles', () => {
      const customStyle = { borderWidth: 2, borderColor: 'red' };
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            style={customStyle} 
            testID="styled-pattern" 
          />
        </TestWrapper>
      );

      expect(getByTestId('styled-pattern')).toBeTruthy();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('applies accessibility label', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            accessibilityLabel="Background decoration" 
            testID="accessible-pattern" 
          />
        </TestWrapper>
      );

      const pattern = getByTestId('accessible-pattern');
      expect(pattern.props.accessibilityLabel).toBe('Background decoration');
    });

    it('has pointer events disabled', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="non-interactive-pattern" />
        </TestWrapper>
      );

      const pattern = getByTestId('non-interactive-pattern');
      expect(pattern.props.pointerEvents).toBe('none');
    });
  });

  // Edge cases
  describe('Edge Cases', () => {
    it('handles default variant behavior', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="default-variant" />
        </TestWrapper>
      );

      expect(getByTestId('default-variant')).toBeTruthy();
    });

    it('handles missing intensity gracefully by falling back to default', () => {
      // Test that the component uses default intensity when intensity prop is missing
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="default-intensity-fallback" />
        </TestWrapper>
      );

      expect(getByTestId('default-intensity-fallback')).toBeTruthy();
    });

    it('handles zero opacity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern opacity={0} testID="zero-opacity" />
        </TestWrapper>
      );

      expect(getByTestId('zero-opacity')).toBeTruthy();
    });

    it('handles maximum opacity', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern opacity={1} testID="max-opacity" />
        </TestWrapper>
      );

      expect(getByTestId('max-opacity')).toBeTruthy();
    });

    it('handles valid intensity values correctly', () => {
      // Test valid intensity: subtle
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            intensity="subtle" 
            testID="valid-intensity" 
          />
        </TestWrapper>
      );

      expect(getByTestId('valid-intensity')).toBeTruthy();
    });
  });

  // Integration tests
  describe('Integration', () => {
    it('works with all props combined', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern
            variant="geometric"
            intensity="medium"
            color="#005e7a"
            opacity={0.1}
            width={300}
            height={400}
            style={{ borderRadius: 10 }}
            accessibilityLabel="School pattern background"
            testID="full-featured-pattern"
          />
        </TestWrapper>
      );

      const pattern = getByTestId('full-featured-pattern');
      expect(pattern).toBeTruthy();
      expect(pattern.props.accessibilityLabel).toBe('School pattern background');
    });

    it('renders multiple patterns simultaneously', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <>
            <BackgroundPattern variant="geometric" testID="pattern-1" />
            <BackgroundPattern variant="minimal" testID="pattern-2" />
            <BackgroundPattern variant="dots" testID="pattern-3" />
          </>
        </TestWrapper>
      );

      expect(getByTestId('pattern-1')).toBeTruthy();
      expect(getByTestId('pattern-2')).toBeTruthy();
      expect(getByTestId('pattern-3')).toBeTruthy();
    });
  });

  // Theme integration tests
  describe('Theme Integration', () => {
    it('uses theme colors when no custom color provided', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern testID="theme-color-pattern" />
        </TestWrapper>
      );

      expect(getByTestId('theme-color-pattern')).toBeTruthy();
    });

    it('overrides theme colors with custom color', () => {
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            color="#custom" 
            testID="custom-color-pattern" 
          />
        </TestWrapper>
      );

      expect(getByTestId('custom-color-pattern')).toBeTruthy();
    });
  });

  // Performance tests
  describe('Performance', () => {
    it('renders efficiently with complex patterns', () => {
      // Test that component renders without errors and maintains functionality
      const { getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern 
            variant="geometric" 
            intensity="strong" 
            testID="complex-pattern" 
          />
        </TestWrapper>
      );
      
      expect(getByTestId('complex-pattern')).toBeTruthy();
    });

    it('handles rapid re-renders', () => {
      const { rerender, getByTestId } = render(
        <TestWrapper>
          <BackgroundPattern variant="geometric" testID="rerender-pattern" />
        </TestWrapper>
      );

      // Rapid re-renders with different props - test functional correctness
      const variants = ['geometric', 'minimal', 'dots', 'waves'] as const;
      const intensities = ['subtle', 'light', 'medium', 'strong'] as const;
      
      for (let i = 0; i < 8; i++) {
        rerender(
          <TestWrapper>
            <BackgroundPattern 
              variant={variants[i % 4]} 
              intensity={intensities[i % 4]}
              testID="rerender-pattern" 
            />
          </TestWrapper>
        );
      }

      expect(getByTestId('rerender-pattern')).toBeTruthy();
    });

    it('renders consistently across multiple instances', () => {
      const { getAllByTestId } = render(
        <TestWrapper>
          {[1, 2, 3, 4, 5].map((id) => (
            <BackgroundPattern 
              key={id}
              variant="geometric" 
              intensity="light" 
              testID={`performance-pattern-${id}`} 
            />
          ))}
        </TestWrapper>
      );

      const patterns = getAllByTestId(/performance-pattern-/);
      expect(patterns).toHaveLength(5);
    });
  });
});
</file>

<file path="src/components/organisms/NavigationPanel/NavigationPanel.tsx">
/**
 * NavigationPanel Component
 * Consistent notification panel with styling and interactions for different notification types
 */

import React from 'react';
import {
  View,
  ScrollView,
  TouchableOpacity,
  ViewStyle,
  StyleSheet,
  Animated,
  Dimensions,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme, useColors } from '../../../context/ThemeContext';
import { Typography } from '../../atoms/Typography';
import { Icon } from '../../atoms/Icon';
import { Button } from '../../atoms/Button';
import { NotificationItem, NotificationType } from '../../molecules/NotificationItem';

// Navigation item interface
export interface NavigationItem {
  id: string;
  title: string;
  subtitle?: string;
  icon?: keyof typeof Ionicons.glyphMap;
  badge?: number;
  badgeColor?: string;
  onPress: () => void;
  disabled?: boolean;
  testID?: string;
}

// Notification for the panel
export interface PanelNotification {
  id: string;
  title: string;
  message: string;
  type?: NotificationType;
  timestamp?: string;
  read?: boolean;
  icon?: keyof typeof Ionicons.glyphMap;
  onPress?: () => void;
  onDismiss?: () => void;
  onAction?: () => void;
  actionLabel?: string;
}

// NavigationPanel Props Interface
export interface NavigationPanelProps {
  // Panel type
  type?: 'notifications' | 'navigation' | 'mixed';

  // Content
  title?: string;
  subtitle?: string;

  // Navigation items
  navigationItems?: NavigationItem[];

  // Notifications
  notifications?: PanelNotification[];

  // Actions
  onClearAll?: () => void;
  onMarkAllRead?: () => void;
  onRefresh?: () => void;

  // Visual options
  variant?: 'default' | 'elevated' | 'transparent';
  showHeader?: boolean;
  showActions?: boolean;

  // Layout
  maxHeight?: number;
  scrollable?: boolean;

  // Empty state
  emptyTitle?: string;
  emptyMessage?: string;
  emptyIcon?: keyof typeof Ionicons.glyphMap;

  // Loading state
  loading?: boolean;
  refreshing?: boolean;

  // Custom styling
  style?: ViewStyle;
  headerStyle?: ViewStyle;
  contentStyle?: ViewStyle;

  // Accessibility
  accessibilityLabel?: string;

  // Test ID
  testID?: string;
}

// NavigationPanel Component
export const NavigationPanel: React.FC<NavigationPanelProps> = ({
  type = 'notifications',
  title,
  subtitle,
  navigationItems = [],
  notifications = [],
  onClearAll,
  onMarkAllRead,
  onRefresh,
  variant = 'default',
  showHeader = true,
  showActions = true,
  maxHeight,
  scrollable = true,
  emptyTitle = 'No items',
  emptyMessage = 'There are no items to display',
  emptyIcon = 'inbox',
  loading = false,
  refreshing = false,
  style,
  headerStyle,
  contentStyle,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();
  const screenHeight = Dimensions.get('window').height;

  // Animation for loading state
  const fadeAnim = React.useRef(new Animated.Value(1)).current;

  // Handle loading animation
  React.useEffect(() => {
    if (loading) {
      Animated.loop(
        Animated.sequence([
          Animated.timing(fadeAnim, {
            toValue: 0.5,
            duration: 1000,
            useNativeDriver: true,
          }),
          Animated.timing(fadeAnim, {
            toValue: 1,
            duration: 1000,
            useNativeDriver: true,
          }),
        ])
      ).start();
    } else {
      fadeAnim.setValue(1);
    }
  }, [loading, fadeAnim]);

  // Get container styles
  const getContainerStyles = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      backgroundColor: colors.surface.primary,
      borderRadius: theme.borderRadius.lg,
      maxHeight: maxHeight || screenHeight * 0.7,
      overflow: 'hidden',
    };

    // Add shadow for elevated variant
    if (variant === 'elevated') {
      return {
        ...baseStyle,
        ...theme.shadows.card,
      };
    }

    if (variant === 'transparent') {
      return {
        ...baseStyle,
        backgroundColor: 'transparent',
      };
    }

    return baseStyle;
  };

  // Get header styles
  const getHeaderStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: theme.spacing.base.lg,
      paddingVertical: theme.spacing.base.md,
      borderBottomWidth: 1,
      borderBottomColor: colors.border.primary,
    };
  };

  // Get content styles
  const getContentStyles = (): ViewStyle => {
    return {
      flex: 1,
    };
  };

  // Get empty state styles
  const getEmptyStateStyles = (): ViewStyle => {
    return {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',
      paddingVertical: theme.spacing.base.xl,
      paddingHorizontal: theme.spacing.base.lg,
    };
  };

  // Get separator styles for mixed content
  const getSeparatorStyles = (): ViewStyle => ({
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderTopWidth: 1,
    borderTopColor: colors.border.primary,
    marginTop: 8,
  });

  // Get actions container styles
  const getActionsStyles = (): ViewStyle => {
    return {
      flexDirection: 'row',
      alignItems: 'center',
      gap: theme.spacing.base.sm,
    };
  };

  // Get unread count
  const getUnreadCount = (): number => {
    return notifications.filter(notification => !notification.read).length;
  };

  // Render header
  const renderHeader = () => {
    if (!showHeader) return null;

    const unreadCount = getUnreadCount();
    const hasNotifications = notifications.length > 0;
    const hasNavigationItems = navigationItems.length > 0;

    return (
      <View style={[getHeaderStyles(), headerStyle]}>
        <View style={{ flex: 1 }}>
          <Typography
            variant="h4"
            color="primary"
            weight="semibold"
          >
            {title || (type === 'notifications' ? 'Notifications' : 'Navigation')}
          </Typography>

          {subtitle && (
            <Typography
              variant="body2"
              color="secondary"
              style={{ marginTop: 2 }}
            >
              {subtitle}
            </Typography>
          )}

          {type === 'notifications' && unreadCount > 0 && (
            <Typography
              variant="caption"
              color="primary"
              style={{ marginTop: 2 }}
            >
              {unreadCount} unread
            </Typography>
          )}
        </View>

        {showActions && (hasNotifications || hasNavigationItems) && (
          <View style={getActionsStyles()}>
            {onRefresh && (
              <TouchableOpacity
                style={styles.actionButton}
                onPress={onRefresh}
                disabled={refreshing}
                accessibilityRole="button"
                accessibilityLabel="Refresh"
                accessibilityHint="Refresh the content"
              >
                <Icon
                  name="refresh"
                  size="sm"
                  color={refreshing ? colors.text.disabled : colors.text.secondary}
                />
              </TouchableOpacity>
            )}

            {type === 'notifications' && onMarkAllRead && unreadCount > 0 && (
              <TouchableOpacity
                style={styles.actionButton}
                onPress={onMarkAllRead}
                accessibilityRole="button"
                accessibilityLabel="Mark all as read"
                accessibilityHint="Mark all notifications as read"
              >
                <Icon
                  name="checkmark-done"
                  size="sm"
                  color={colors.text.secondary}
                />
              </TouchableOpacity>
            )}

            {onClearAll && (hasNotifications || hasNavigationItems) && (
              <TouchableOpacity
                style={styles.actionButton}
                onPress={onClearAll}
                accessibilityRole="button"
                accessibilityLabel="Clear all"
                accessibilityHint="Clear all items"
              >
                <Icon
                  name="trash"
                  size="sm"
                  color={colors.text.secondary}
                />
              </TouchableOpacity>
            )}
          </View>
        )}
      </View>
    );
  };

  // Render navigation item
  const renderNavigationItem = (item: NavigationItem, index: number) => {
    return (
      <TouchableOpacity
        key={item.id}
        style={[
          styles.navigationItem,
          {
            paddingHorizontal: theme.spacing.base.lg,
            paddingVertical: theme.spacing.base.md,
            borderBottomWidth: index < navigationItems.length - 1 ? 1 : 0,
            borderBottomColor: colors.border.primary,
            opacity: item.disabled ? 0.5 : 1,
          },
        ]}
        onPress={item.disabled ? undefined : item.onPress}
        disabled={item.disabled}
        accessibilityRole="button"
        accessibilityLabel={item.title}
        accessibilityHint={item.subtitle}
        testID={item.testID}
        activeOpacity={0.7}
      >
        <View style={styles.navigationItemContent}>
          {item.icon && (
            <View style={{ position: 'relative', marginRight: theme.spacing.base.sm }}>
              <Icon
                name={item.icon}
                size="md"
                color={item.disabled ? colors.text.disabled : colors.text.secondary}
              />

              {item.badge && item.badge > 0 && (
                <View style={[styles.badge, { backgroundColor: item.badgeColor || colors.error.main }]}>
                  <Typography
                    variant="caption"
                    style={{ ...styles.badgeText, color: colors.error.contrast }}
                  >
                    {item.badge > 99 ? '99+' : item.badge.toString()}
                  </Typography>
                </View>
              )}
            </View>
          )}

          <View style={{ flex: 1 }}>
            <Typography
              variant="body1"
              color={item.disabled ? 'disabled' : 'primary'}
              weight="medium"
            >
              {item.title}
            </Typography>

            {item.subtitle && (
              <Typography
                variant="body2"
                color={item.disabled ? 'disabled' : 'secondary'}
                style={{ marginTop: 2 }}
              >
                {item.subtitle}
              </Typography>
            )}
          </View>

          <Icon
            name="chevron-forward"
            size="sm"
            color={item.disabled ? colors.text.disabled : colors.text.tertiary}
          />
        </View>
      </TouchableOpacity>
    );
  };

  // Render empty state
  const renderEmptyState = () => {
    return (
      <View style={getEmptyStateStyles()}>
        <Icon
          name={emptyIcon as keyof typeof Ionicons.glyphMap}
          size="xl"
          color={colors.text.tertiary}
          containerStyle={{ marginBottom: theme.spacing.base.md }}
        />

        <Typography
          variant="h4"
          color="secondary"
          align="center"
          style={{ marginBottom: theme.spacing.base.xs }}
        >
          {emptyTitle}
        </Typography>

        <Typography
          variant="body2"
          color="tertiary"
          align="center"
        >
          {emptyMessage}
        </Typography>

        {onRefresh && (
          <Button
            variant="outline"
            size="small"
            onPress={onRefresh}
            style={{ marginTop: theme.spacing.base.md }}
          >
            Refresh
          </Button>
        )}
      </View>
    );
  };

  // Render content
  const renderContent = () => {
    const hasContent = notifications.length > 0 || navigationItems.length > 0;

    if (loading && !hasContent) {
      return (
        <Animated.View style={[getEmptyStateStyles(), { opacity: fadeAnim }]}>
          <Icon
            name="hourglass"
            size="xl"
            color={colors.text.tertiary}
            containerStyle={{ marginBottom: theme.spacing.base.md }}
          />
          <Typography variant="body1" color="secondary" align="center">
            Loading...
          </Typography>
        </Animated.View>
      );
    }

    if (!hasContent) {
      return renderEmptyState();
    }

    const ContentWrapper = scrollable ? ScrollView : View;
    const contentProps = scrollable ? {
      showsVerticalScrollIndicator: false,
      refreshing,
      onRefresh: onRefresh,
    } : {};

    return (
      <ContentWrapper style={[getContentStyles(), contentStyle]} {...contentProps}>
        {/* Navigation items */}
        {type !== 'notifications' && navigationItems.map((item, index) =>
          renderNavigationItem(item, index)
        )}

        {/* Notifications */}
        {type !== 'navigation' && notifications.map((notification, index) => (
          <NotificationItem
            key={notification.id}
            title={notification.title}
            message={notification.message}
            type={notification.type}
            timestamp={notification.timestamp}
            read={notification.read}
            icon={notification.icon}
            onPress={notification.onPress}
            onDismiss={notification.onDismiss}
            onAction={notification.onAction}
            actionLabel={notification.actionLabel}
            style={{
              marginHorizontal: theme.spacing.base.sm,
              marginVertical: theme.spacing.base.xs,
            }}
          />
        ))}

        {/* Mixed content separator */}
        {type === 'mixed' && navigationItems.length > 0 && notifications.length > 0 && (
          <View style={getSeparatorStyles()}>
            <Typography variant="caption" color="tertiary" align="center">
              Notifications
            </Typography>
          </View>
        )}
      </ContentWrapper>
    );
  };

  return (
    <View
      style={[getContainerStyles(), style]}
      accessibilityRole="menu"
      accessibilityLabel={accessibilityLabel || title || 'Navigation panel'}
      testID={testID}
    >
      {renderHeader()}
      {renderContent()}
    </View>
  );
};

// Internal styles
const styles = StyleSheet.create({
  actionButton: {
    width: 32,
    height: 32,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 16,
  },
  navigationItem: {
    backgroundColor: 'transparent',
  },
  navigationItemContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  badge: {
    position: 'absolute',
    top: -4,
    right: -4,
    minWidth: 16,
    height: 16,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 4,
  },
  badgeText: {
    fontSize: 10,
    fontWeight: 'bold',
    lineHeight: 10,
  },
});


// Export default
export default NavigationPanel;
</file>

<file path="src/components/templates/ClassDetailTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, FlatList } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { Student as GlobalStudent } from '../../types';
import { convertNumberToString } from '../../utils/idConversion';
import { mockClassData, ClassData as MockClassData, Student as MockStudent, ClassScheduleItem, Activity } from '../../mocks/classData';

type IoniconName = React.ComponentProps<typeof Ionicons>['name'];

// Types - extending global Student type for local component needs
interface Student extends Omit<GlobalStudent, 'id'> {
  id: number; // Local component uses number for internal operations
  name: string; // Alias for full_name for backward compatibility
  memorizedVerses: number;
  totalVerses: number;
}



export default function ClassDetail() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  const parsedId = Number(id);
  const classId = isNaN(parsedId) ? 0 : parsedId;
  
  const [classData, setClassData] = useState<MockClassData | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  
  // Fetch class data
  useEffect(() => {
    const foundClass = mockClassData.find(c => c.id === classId);
    if (foundClass) {
      setClassData(foundClass);
    }
  }, [classId]);
  
  if (!classData) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Detail Kelas</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Memuat data kelas...</Text>
        </View>
      </SafeAreaView>
    );
  }
  
  const renderOverviewTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.infoSection}>
        <Text style={styles.sectionTitle}>Informasi Kelas</Text>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Nama Kelas</Text>
          <Text style={styles.infoValue}>{classData.name}</Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Tingkat</Text>
          <Text style={styles.infoValue}>{classData.level}</Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Jumlah Siswa</Text>
          <Text style={styles.infoValue}>{classData.studentCount} siswa</Text>
        </View>
        <View style={styles.infoItem}>
          <Text style={styles.infoLabel}>Progress</Text>
          <View style={styles.progressContainer}>
            <View style={styles.progressBar}>
              <View style={[styles.progressFill, { width: `${classData.progress || 0}%` }]} />
            </View>
            <Text style={styles.progressText}>{classData.progress || 0}%</Text>
          </View>
        </View>
        {classData.description && (
          <View style={styles.infoItem}>
            <Text style={styles.infoLabel}>Deskripsi</Text>
            <Text style={styles.infoValue}>{classData.description}</Text>
          </View>
        )}
      </View>

      {classData.recentActivities && (
        <View style={styles.infoSection}>
          <Text style={styles.sectionTitle}>Aktivitas Terbaru</Text>
          {classData.recentActivities.map((activity, index) => (
            <View key={index} style={styles.activityItem}>
              <Ionicons 
                name={activity.type === 'memorization' ? 'book' : activity.type === 'attendance' ? 'people' : 'document-text'} 
                size={20} 
                color="#005e7a" 
              />
              <View style={styles.activityContent}>
                <Text style={styles.activityDescription}>{activity.description}</Text>
                <Text style={styles.activityDate}>{activity.date}</Text>
              </View>
            </View>
          ))}
        </View>
      )}
    </View>
  );
  
  const renderStudentsTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Daftar Siswa</Text>
        <TouchableOpacity 
          style={styles.addButton}
          onPress={() => router.push({
            pathname: '/(teacher)/students/add',
            params: { classId: classData.id }
          })}
        >
          <Ionicons name="add" size={20} color="#ffffff" />
          <Text style={styles.addButtonText}>Tambah</Text>
        </TouchableOpacity>
      </View>
      
      {classData.students && classData.students.length > 0 ? (
        <FlatList
          data={classData.students}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <TouchableOpacity 
              style={styles.studentItem}
              onPress={() => router.push({
                pathname: '/(teacher)/students/[id]',
                params: { id: convertNumberToString(item.id) }
              })}
            >
              <View style={styles.studentInfo}>
                <Text style={styles.studentName}>{item.name}</Text>
                <Text style={styles.studentProgress}>
                  {item.memorizedVerses}/{item.totalVerses} ayat
                </Text>
              </View>
              <View style={styles.studentStats}>
                <View style={styles.progressBar}>
                  <View style={[
                    styles.progressFill, 
                    { width: `${(item.memorizedVerses / item.totalVerses) * 100}%` }
                  ]} />
                </View>
                <Ionicons name="chevron-forward" size={20} color="#666666" />
              </View>
            </TouchableOpacity>
          )}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="people-outline" size={48} color="#cccccc" />
          <Text style={styles.emptyStateText}>Belum ada siswa di kelas ini</Text>
        </View>
      )}
    </View>
  );
  
  const renderScheduleTab = () => (
    <View style={styles.tabContent}>
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Jadwal Kelas</Text>
        <TouchableOpacity style={styles.addButton}>
          <Ionicons name="add" size={20} color="#ffffff" />
          <Text style={styles.addButtonText}>Tambah</Text>
        </TouchableOpacity>
      </View>
      
      {classData.schedule && classData.schedule.length > 0 ? (
        <View>
          {classData.schedule.map((item, index) => (
            <View key={index} style={styles.scheduleItem}>
              <View style={styles.scheduleDay}>
                <Text style={styles.scheduleDayText}>{item.day}</Text>
              </View>
              <View style={styles.scheduleDetails}>
                <Text style={styles.scheduleTime}>{item.time}</Text>
                <Text style={styles.scheduleActivity}>{item.activity}</Text>
                {item.note && <Text style={styles.scheduleNote}>{item.note}</Text>}
              </View>
            </View>
          ))}
        </View>
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="calendar-outline" size={48} color="#cccccc" />
          <Text style={styles.emptyStateText}>Belum ada jadwal untuk kelas ini</Text>
        </View>
      )}
    </View>
  );

  const tabs: { id: string; label: string; icon: IoniconName }[] = [
    { id: 'overview', label: 'Ringkasan', icon: 'information-circle-outline' },
    { id: 'students', label: 'Siswa', icon: 'people-outline' },
    { id: 'schedule', label: 'Jadwal', icon: 'calendar-outline' },
  ];

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>{classData.name}</Text>
        <TouchableOpacity>
          <Ionicons name="ellipsis-vertical" size={24} color="#333333" />
        </TouchableOpacity>
      </View>

      {/* Tabs */}
      <View style={styles.tabsContainer}>
        {tabs.map((tab) => (
          <TouchableOpacity
            key={tab.id}
            style={[styles.tab, activeTab === tab.id && styles.activeTab]}
            onPress={() => setActiveTab(tab.id)}
          >
            <Ionicons 
              name={tab.icon} 
              size={20} 
              color={activeTab === tab.id ? '#005e7a' : '#666666'} 
            />
            <Text style={[
              styles.tabText,
              activeTab === tab.id && styles.activeTabText
            ]}>
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {activeTab === 'overview' && renderOverviewTab()}
        {activeTab === 'students' && renderStudentsTab()}
        {activeTab === 'schedule' && renderScheduleTab()}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 8,
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#005e7a',
  },
  tabText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 6,
  },
  activeTabText: {
    color: '#005e7a',
    fontWeight: '600',
  },
  content: {
    flex: 1,
  },
  tabContent: {
    padding: 20,
  },
  infoSection: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  infoItem: {
    marginBottom: 12,
  },
  infoLabel: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 4,
  },
  infoValue: {
    fontSize: 16,
    color: '#333333',
    fontWeight: '500',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  progressBar: {
    flex: 1,
    height: 8,
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
    marginRight: 12,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '600',
  },
  activityItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  activityContent: {
    marginLeft: 12,
    flex: 1,
  },
  activityDescription: {
    fontSize: 14,
    color: '#333333',
    marginBottom: 4,
  },
  activityDate: {
    fontSize: 12,
    color: '#666666',
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#005e7a',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  addButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 4,
  },
  studentItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 8,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  studentInfo: {
    flex: 1,
  },
  studentName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  studentProgress: {
    fontSize: 14,
    color: '#666666',
  },
  studentStats: {
    flexDirection: 'row',
    alignItems: 'center',
    width: 100,
  },
  scheduleItem: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 8,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  scheduleDay: {
    width: 80,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#005e7a',
    borderRadius: 6,
    paddingVertical: 8,
    marginRight: 16,
  },
  scheduleDayText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  scheduleDetails: {
    flex: 1,
  },
  scheduleTime: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  scheduleActivity: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  scheduleNote: {
    fontSize: 12,
    color: '#999999',
    fontStyle: 'italic',
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyStateText: {
    fontSize: 16,
    color: '#999999',
    marginTop: 12,
  },
});
</file>

<file path="src/components/templates/ClassReportsTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, Modal, TextInput, Alert } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { mockClassData, ClassData as MockClassData, Report } from '../../mocks/classData';
import { convertStringToNumber } from '../../utils/idConversion';

// Types
type ReportType = 'academic' | 'behavior' | 'attendance';

const reportTypes = [
  { value: 'academic', label: 'Akademik', icon: 'school' },
  { value: 'behavior', label: 'Perilaku', icon: 'people' },
  { value: 'attendance', label: 'Kehadiran', icon: 'checkmark-circle' },
];

export default function ClassReports() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  const classId = convertStringToNumber(id || '0');
  
  const [classData, setClassData] = useState<MockClassData | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newTitle, setNewTitle] = useState('');
  const [newType, setNewType] = useState<ReportType>('academic');
  const [newDate, setNewDate] = useState(new Date().toISOString().split('T')[0]);
  const [newDescription, setNewDescription] = useState('');
  const [filterType, setFilterType] = useState<ReportType | 'all'>('all');
  
  // Fetch class data
  useEffect(() => {
    const foundClass = mockClassData.find(c => c.id === classId);
    if (foundClass) {
      setClassData(foundClass);
    }
  }, [classId]);
  
  if (!classData) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Laporan Kelas</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Memuat data kelas...</Text>
        </View>
      </SafeAreaView>
    );
  }
  
  const isValidDate = (dateString: string): boolean => {
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(dateString)) {
      return false;
    }

    const date = new Date(dateString);
    return date instanceof Date && !isNaN(date.getTime());
  };

  const handleAddReport = () => {
    if (!newTitle || !newDate) {
      Alert.alert('Error', 'Mohon isi judul dan tanggal laporan');
      return;
    }

    if (!isValidDate(newDate)) {
      Alert.alert('Error', 'Tanggal harus dalam format YYYY-MM-DD dan merupakan tanggal yang valid');
      return;
    }

    const newReport: Report = {
      id: Date.now(),
      title: newTitle,
      type: newType,
      date: newDate,
      description: newDescription,
      status: 'draft',
    };

    setClassData(prev => prev ? {
      ...prev,
      reports: [newReport, ...(prev.reports || [])]
    } : null);

    // Reset form
    setNewTitle('');
    setNewType('academic');
    setNewDate(new Date().toISOString().split('T')[0]);
    setNewDescription('');
    setShowAddModal(false);
  };

  const handleDeleteReport = (reportId: number) => {
    Alert.alert(
      'Hapus Laporan',
      'Apakah Anda yakin ingin menghapus laporan ini?',
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Hapus',
          style: 'destructive',
          onPress: () => {
            setClassData(prev => prev ? {
              ...prev,
              reports: (prev.reports || []).filter(report => report.id !== reportId)
            } : null);
          }
        }
      ]
    );
  };

  const toggleReportStatus = (reportId: number) => {
    setClassData(prev => prev ? {
      ...prev,
      reports: (prev.reports || []).map(report => 
        report.id === reportId 
          ? { ...report, status: report.status === 'draft' ? 'published' : 'draft' }
          : report
      )
    } : null);
  };

  const filteredReports = filterType === 'all' 
    ? (classData?.reports || []) 
    : (classData?.reports || []).filter(report => report.type === filterType);

  const getReportTypeInfo = (type: ReportType) => {
    return reportTypes.find(rt => rt.value === type) || reportTypes[0];
  };

  const renderReportItem = ({ item }: { item: Report }) => {
    const typeInfo = getReportTypeInfo(item.type);
    
    return (
      <View style={styles.reportCard}>
        <View style={styles.reportHeader}>
          <View style={styles.reportTypeContainer}>
            <View style={[styles.typeBadge, { backgroundColor: item.status === 'published' ? '#4CAF50' : '#FF9800' }]}>
              <Ionicons name={typeInfo.icon as any} size={16} color="#ffffff" />
              <Text style={styles.typeBadgeText}>{typeInfo.label}</Text>
            </View>
            <View style={[styles.statusBadge, { backgroundColor: item.status === 'published' ? '#e8f5e8' : '#fff3e0' }]}>
              <Text style={[styles.statusText, { color: item.status === 'published' ? '#4CAF50' : '#FF9800' }]}>
                {item.status === 'published' ? 'Dipublikasi' : 'Draft'}
              </Text>
            </View>
          </View>
          <TouchableOpacity 
            style={styles.moreButton}
            onPress={() => handleDeleteReport(item.id)}
          >
            <Ionicons name="trash-outline" size={20} color="#ff4444" />
          </TouchableOpacity>
        </View>
        
        <Text style={styles.reportTitle}>{item.title}</Text>
        <Text style={styles.reportDate}>{new Date(item.date).toLocaleDateString('id-ID')}</Text>
        <Text style={styles.reportDescription} numberOfLines={2}>
          {item.description}
        </Text>
        
        <View style={styles.reportActions}>
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={() => {
              // Handle edit
            }}
          >
            <Ionicons name="create-outline" size={16} color="#005e7a" />
            <Text style={styles.actionButtonText}>Edit</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={() => toggleReportStatus(item.id)}
          >
            <Ionicons 
              name={item.status === 'published' ? 'eye-off-outline' : 'eye-outline'} 
              size={16} 
              color="#005e7a" 
            />
            <Text style={styles.actionButtonText}>
              {item.status === 'published' ? 'Unpublish' : 'Publish'}
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={() => {
              // Handle share
            }}
          >
            <Ionicons name="share-outline" size={16} color="#005e7a" />
            <Text style={styles.actionButtonText}>Bagikan</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Laporan - {classData.name}</Text>
        <TouchableOpacity onPress={() => setShowAddModal(true)}>
          <Ionicons name="add" size={24} color="#005e7a" />
        </TouchableOpacity>
      </View>

      {/* Filter */}
      <View style={styles.filterContainer}>
        <TouchableOpacity
          style={[styles.filterButton, filterType === 'all' && styles.activeFilterButton]}
          onPress={() => setFilterType('all')}
        >
          <Text style={[styles.filterButtonText, filterType === 'all' && styles.activeFilterButtonText]}>
            Semua
          </Text>
        </TouchableOpacity>
        {reportTypes.map((type) => (
          <TouchableOpacity
            key={type.value}
            style={[styles.filterButton, filterType === type.value && styles.activeFilterButton]}
            onPress={() => setFilterType(type.value as ReportType)}
          >
            <Text style={[styles.filterButtonText, filterType === type.value && styles.activeFilterButtonText]}>
              {type.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Reports List */}
      {(filteredReports || []).length > 0 ? (
        <FlatList
          data={filteredReports}
          renderItem={renderReportItem}
          keyExtractor={(item) => item.id.toString()}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="document-text-outline" size={64} color="#cccccc" />
          <Text style={styles.emptyStateTitle}>
            {filterType === 'all' ? 'Belum ada laporan' : `Belum ada laporan ${getReportTypeInfo(filterType as ReportType).label.toLowerCase()}`}
          </Text>
          <Text style={styles.emptyStateMessage}>
            Buat laporan pertama untuk kelas ini
          </Text>
          <TouchableOpacity 
            style={styles.emptyStateButton}
            onPress={() => setShowAddModal(true)}
          >
            <Text style={styles.emptyStateButtonText}>Buat Laporan</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Add Report Modal */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowAddModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Buat Laporan Baru</Text>
              <TouchableOpacity onPress={() => setShowAddModal(false)}>
                <Ionicons name="close" size={24} color="#333333" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Judul Laporan *</Text>
                <TextInput
                  style={styles.textInput}
                  value={newTitle}
                  onChangeText={setNewTitle}
                  placeholder="Contoh: Laporan Bulanan Februari 2024"
                  placeholderTextColor="#999999"
                />
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Jenis Laporan *</Text>
                <View style={styles.typeSelector}>
                  {reportTypes.map((type) => (
                    <TouchableOpacity
                      key={type.value}
                      style={[
                        styles.typeOption,
                        newType === type.value && styles.selectedTypeOption
                      ]}
                      onPress={() => setNewType(type.value as ReportType)}
                    >
                      <Ionicons 
                        name={type.icon as any} 
                        size={20} 
                        color={newType === type.value ? '#ffffff' : '#005e7a'} 
                      />
                      <Text style={[
                        styles.typeOptionText,
                        newType === type.value && styles.selectedTypeOptionText
                      ]}>
                        {type.label}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Tanggal *</Text>
                <TextInput
                  style={styles.textInput}
                  value={newDate}
                  onChangeText={setNewDate}
                  placeholder="YYYY-MM-DD"
                  placeholderTextColor="#999999"
                />
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Deskripsi</Text>
                <TextInput
                  style={[styles.textInput, styles.textArea]}
                  value={newDescription}
                  onChangeText={setNewDescription}
                  placeholder="Deskripsi laporan..."
                  placeholderTextColor="#999999"
                  multiline
                  numberOfLines={4}
                />
              </View>
            </View>
            
            <View style={styles.modalFooter}>
              <TouchableOpacity 
                style={styles.cancelButton}
                onPress={() => setShowAddModal(false)}
              >
                <Text style={styles.cancelButtonText}>Batal</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.saveButton}
                onPress={handleAddReport}
              >
                <Text style={styles.saveButtonText}>Simpan</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  filterContainer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 12,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  filterButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#f8f9fa',
    marginRight: 8,
  },
  activeFilterButton: {
    backgroundColor: '#005e7a',
  },
  filterButtonText: {
    fontSize: 14,
    color: '#666666',
  },
  activeFilterButtonText: {
    color: '#ffffff',
    fontWeight: '600',
  },
  listContainer: {
    padding: 20,
  },
  reportCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  reportHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  reportTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  typeBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginRight: 8,
  },
  typeBadgeText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '600',
    marginLeft: 4,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  moreButton: {
    padding: 4,
  },
  reportTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  reportDate: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 8,
  },
  reportDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
    marginBottom: 16,
  },
  reportActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    paddingTop: 12,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  actionButtonText: {
    fontSize: 14,
    color: '#005e7a',
    marginLeft: 4,
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyStateMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  emptyStateButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  emptyStateButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    overflow: 'hidden',
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  modalBody: {
    padding: 16,
    maxHeight: 400,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: '#ffffff',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  typeSelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  typeOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#005e7a',
    backgroundColor: '#ffffff',
  },
  selectedTypeOption: {
    backgroundColor: '#005e7a',
  },
  typeOptionText: {
    fontSize: 14,
    color: '#005e7a',
    marginLeft: 6,
  },
  selectedTypeOptionText: {
    color: '#ffffff',
    fontWeight: '600',
  },
  modalFooter: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderRightWidth: 0.5,
    borderRightColor: '#e0e0e0',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    backgroundColor: '#005e7a',
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
  },
});
</file>

<file path="src/services/classService.ts">
import { supabase } from '../utils/supabase';
import { z } from 'zod';
import { Class } from '../types/class';

// Validation schemas
const CreateClassSchema = z.object({
  name: z.string().min(1, 'Class name is required').max(100, 'Class name too long'),
  level: z.string().min(1, 'Class level is required'),
  description: z.string().optional(),
  school_id: z.number().int().positive('Invalid school ID'),
  student_capacity: z.number().int().positive().default(30),
  academic_year: z.string().min(1, 'Academic year is required'),
  semester: z.enum(['1', '2']),
});

const UpdateClassSchema = z.object({
  name: z.string().min(1, 'Class name is required').max(100, 'Class name too long').optional(),
  level: z.string().min(1, 'Class level is required').optional(),
  description: z.string().optional(),
  student_capacity: z.number().int().positive().optional(),
  academic_year: z.string().optional(),
  semester: z.enum(['1', '2']).optional(),
  status: z.enum(['active', 'inactive', 'archived']).optional(),
});

const BulkUpdateClassSchema = z.object({
  class_ids: z.array(z.number().int().positive()),
  updates: UpdateClassSchema.partial(),
});

// Type definitions
export interface CreateClassRequest {
  name: string;
  level: string;
  description?: string;
  school_id: number;
  student_capacity?: number;
  academic_year: string;
  semester: '1' | '2';
}

export interface UpdateClassRequest {
  name?: string;
  level?: string;
  description?: string;
  student_capacity?: number;
  academic_year?: string;
  semester?: '1' | '2';
  status?: 'active' | 'inactive' | 'archived';
}

export interface BulkUpdateRequest {
  class_ids: number[];
  updates: Partial<UpdateClassRequest>;
}

export interface ClassWithDetails extends Class {
  student_count: number;
  subject_count: number;
  teacher_count: number;
  teachers: Array<{
    user_id: string;
    role: string;
    full_name: string;
  }>;
}

export class ClassServiceError extends Error {
  constructor(
    public code: string,
    message: string,
    public details?: any
  ) {
    super(message);
    this.name = 'ClassServiceError';
  }
}

/**
 * ClassService provides comprehensive CRUD operations for class management
 * with validation, authorization, and audit trail support
 */
export class ClassService {
  /**
   * Create a new class with validation and authorization
   */
  static async createClass(classData: CreateClassRequest, teacherId: string): Promise<Class> {
    try {
      // Validate input data
      const validatedData = CreateClassSchema.parse(classData);
      
      // Check for duplicate class name within teacher's scope
      const existingClass = await ClassService.checkDuplicateClassName(
        validatedData.name,
        teacherId,
        validatedData.school_id
      );
      
      if (existingClass) {
        throw new ClassServiceError(
          'DUPLICATE_CLASS_NAME',
          'A class with this name already exists'
        );
      }

      // Insert class record with proper user attribution
      const insertData = {
        ...validatedData,
        created_by: teacherId,
        updated_by: teacherId,
        status: 'active',
      };
      
      console.log('Attempting to insert class with data:', insertData);
      
      const { data: newClass, error: insertError } = await supabase
        .from('classes')
        .insert(insertData)
        .select()
        .single();

      if (insertError) {
        console.error('Class creation failed - Full error details:', {
          error: insertError,
          errorCode: insertError.code,
          errorMessage: insertError.message,
          errorDetails: insertError.details,
          errorHint: insertError.hint,
          insertData: insertData,
          teacherId: teacherId
        });
        throw new ClassServiceError(
          'CREATE_FAILED',
          `Failed to create class: ${insertError.message}`,
          insertError
        );
      }

      // Create class-teacher relationship record
      console.log('Creating class-teacher relationship:', {
        class_id: newClass!.id,
        user_id: teacherId,
        role: 'primary',
        assigned_date: new Date().toISOString(),
      });
      
      const { error: teacherError } = await supabase
        .from('class_teachers')
        .insert({
          class_id: newClass!.id,
          user_id: teacherId,
          role: 'primary',
          assigned_date: new Date().toISOString(),
        });

      if (teacherError) {
        console.error('Teacher assignment failed - Full error details:', {
          error: teacherError,
          errorCode: teacherError.code,
          errorMessage: teacherError.message,
          errorDetails: teacherError.details,
          errorHint: teacherError.hint,
          classId: newClass!.id,
          teacherId: teacherId,
          teacherIdType: typeof teacherId,
          insertData: {
            class_id: newClass!.id,
            user_id: teacherId,
            role: 'primary',
            assigned_date: new Date().toISOString(),
          }
        });
        // Rollback class creation if teacher assignment fails
        await supabase.from('classes').delete().eq('id', newClass!.id);
        throw new ClassServiceError(
          'TEACHER_ASSIGNMENT_FAILED',
          `Failed to assign teacher to class: ${teacherError.message}`,
          teacherError
        );
      }
      
      console.log('Class and teacher assignment successful for class:', newClass!.id);

      // Log creation in audit trail (non-blocking)
      try {
        await ClassService.logAuditTrail(
          newClass!.id,
          'create',
          null,
          null,
          newClass,
          teacherId
        );
        console.log('Audit trail logged successfully for class:', newClass!.id);
      } catch (auditError: any) {
        console.warn('Audit trail logging failed (non-blocking) - Full error details:', {
          error: auditError,
          errorCode: auditError?.code,
          errorMessage: auditError?.message,
          errorDetails: auditError?.details,
          errorHint: auditError?.hint,
          classId: newClass!.id,
          teacherId: teacherId,
          action: 'create',
          oldValues: null,
          newValues: newClass
        });
      }

      return newClass!;
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Get all classes for a specific teacher
   */
  static async getTeacherClasses(
    teacherId: string,
    options?: {
      status?: 'active' | 'inactive' | 'archived';
      searchTerm?: string;
      sortBy?: 'name' | 'level' | 'student_count' | 'created_at';
      sortOrder?: 'asc' | 'desc';
      limit?: number;
      offset?: number;
    }
  ): Promise<ClassWithDetails[]> {
    try {
      let query = supabase
        .from('classes')
        .select(`
          *,
          class_teachers!left(
            user_id,
            role,
            profiles!inner(full_name)
          ),
          class_students!left(student_id),
          class_subjects!left(id)
        `);
        
      // Filter for classes where the teacher is assigned
      // We'll filter this in the application layer to handle the left join properly

      // Apply filters
      if (options?.status) {
        query = query.eq('status', options.status);
      }

      if (options?.searchTerm) {
        query = query.ilike('name', `%${options.searchTerm}%`);
      }

      // Apply sorting
      const sortBy = options?.sortBy || 'created_at';
      const sortOrder = options?.sortOrder || 'desc';
      query = query.order(sortBy, { ascending: sortOrder === 'asc' });

      // Apply pagination
      if (options?.limit) {
        query = query.limit(options.limit);
      }

      if (options?.offset) {
        query = query.range(options.offset, options.offset + (options.limit || 50) - 1);
      }

      const { data: classes, error } = await query;

      console.log('getTeacherClasses query result:', {
        teacherId,
        classesCount: classes?.length || 0,
        error: error?.message,
        options
      });

      if (error) {
        console.error('getTeacherClasses error:', error);
        throw new ClassServiceError(
          'FETCH_FAILED',
          'Failed to fetch classes',
          error
        );
      }

      // Filter classes to only include those where the teacher is assigned
      const filteredClasses = classes!.filter((classItem) => {
        if (!classItem.class_teachers) return false;
        return classItem.class_teachers.some((teacher: any) => teacher.user_id === teacherId);
      });
      
      console.log('Filtered classes count:', filteredClasses.length);
      
      // Transform data to include counts and teacher details
      const transformedClasses = filteredClasses.map((classItem) => {
        return {
          ...classItem,
          student_count: classItem.class_students?.length || 0,
          subject_count: classItem.class_subjects?.length || 0,
          teachers: classItem.class_teachers || [],
        };
      });

      return transformedClasses;
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Get a single class by ID
   */
  static async getClassById(classId: number, teacherId: string): Promise<ClassWithDetails> {
    try {
      // Verify teacher has access to this class
      const hasAccess = await ClassService.verifyClassAccess(classId, teacherId);
      if (!hasAccess) {
        throw new ClassServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      const { data: classData, error } = await supabase
        .from('classes')
        .select(`
          *,
          class_teachers!left(*),
          class_students!left(student_id),
          class_subjects!left(*)
        `)
        .eq('id', classId)
        .single();

      if (error) {
        throw new ClassServiceError(
          'FETCH_FAILED',
          'Failed to fetch class',
          error
        );
      }

      // Get teacher details
      const { data: teachers } = await supabase
        .from('class_teachers')
        .select(`
          user_id,
          role,
          profiles!inner(full_name)
        `)
        .eq('class_id', classId);

      return {
        ...classData!,
        student_count: classData!.class_students?.length || 0,
        subject_count: classData!.class_subjects?.length || 0,
        teachers: teachers || [],
      };
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Update a class with validation and audit trail
   */
  static async updateClass(
    classId: number,
    updates: UpdateClassRequest,
    teacherId: string
  ): Promise<Class> {
    try {
      // Validate input data
      const validatedData = UpdateClassSchema.parse(updates);

      // Verify teacher has access to this class
      const hasAccess = await ClassService.verifyClassAccess(classId, teacherId);
      if (!hasAccess) {
        throw new ClassServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      // Get current class data for audit trail
      const { data: oldClass } = await supabase
        .from('classes')
        .select('*')
        .eq('id', classId)
        .single();

      if (!oldClass) {
        throw new ClassServiceError(
          'CLASS_NOT_FOUND',
          'Class not found'
        );
      }

      // Check for duplicate class name if name is being updated
      if (validatedData.name && validatedData.name !== oldClass.name) {
        const existingClass = await ClassService.checkDuplicateClassName(
          validatedData.name,
          teacherId,
          oldClass.school_id
        );
        
        if (existingClass && existingClass.id !== classId) {
          throw new ClassServiceError(
            'DUPLICATE_CLASS_NAME',
            'A class with this name already exists'
          );
        }
      }

      // Update class record
      const { data: updatedClass, error } = await supabase
        .from('classes')
        .update({
          ...validatedData,
          updated_by: teacherId,
          updated_at: new Date().toISOString(),
        })
        .eq('id', classId)
        .select()
        .single();

      if (error) {
        throw new ClassServiceError(
          'UPDATE_FAILED',
          'Failed to update class',
          error
        );
      }

      // Log changes in audit trail
      const changedFields = Object.keys(validatedData);
      await ClassService.logAuditTrail(
        classId,
        'update',
        changedFields,
        oldClass,
        updatedClass,
        teacherId
      );

      return updatedClass!;
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Soft delete a class (set status to archived and deleted_at)
   */
  static async deleteClass(classId: number, teacherId: string): Promise<void> {
    try {
      // Verify teacher has access to this class
      const hasAccess = await ClassService.verifyClassAccess(classId, teacherId);
      if (!hasAccess) {
        throw new ClassServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      // Check for enrolled students
      const { data: enrolledStudents } = await supabase
        .from('class_students')
        .select('student_id')
        .eq('class_id', classId);

      if (enrolledStudents && enrolledStudents.length > 0) {
        throw new ClassServiceError(
          'CLASS_HAS_STUDENTS',
          `Cannot delete class with ${enrolledStudents.length} enrolled students`
        );
      }

      // Get current class data for audit trail
      const { data: oldClass } = await supabase
        .from('classes')
        .select('*')
        .eq('id', classId)
        .single();

      if (!oldClass) {
        throw new ClassServiceError(
          'CLASS_NOT_FOUND',
          'Class not found'
        );
      }

      // Soft delete the class
      const { error } = await supabase
        .from('classes')
        .update({
          status: 'archived',
          deleted_at: new Date().toISOString(),
          updated_by: teacherId,
          updated_at: new Date().toISOString(),
        })
        .eq('id', classId);

      if (error) {
        throw new ClassServiceError(
          'DELETE_FAILED',
          'Failed to delete class',
          error
        );
      }

      // Log deletion in audit trail
      await ClassService.logAuditTrail(
        classId,
        'delete',
        ['status', 'deleted_at'],
        oldClass,
        { ...oldClass, status: 'archived', deleted_at: new Date().toISOString() },
        teacherId
      );
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Restore a soft-deleted class
   */
  static async restoreClass(classId: number, teacherId: string): Promise<Class> {
    try {
      // Verify teacher has access to this class
      const hasAccess = await ClassService.verifyClassAccess(classId, teacherId);
      if (!hasAccess) {
        throw new ClassServiceError(
          'ACCESS_DENIED',
          'You do not have access to this class'
        );
      }

      // Get current class data
      const { data: oldClass } = await supabase
        .from('classes')
        .select('*')
        .eq('id', classId)
        .single();

      if (!oldClass) {
        throw new ClassServiceError(
          'CLASS_NOT_FOUND',
          'Class not found'
        );
      }

      // Restore the class
      const { data: restoredClass, error } = await supabase
        .from('classes')
        .update({
          status: 'active',
          deleted_at: null,
          updated_by: teacherId,
          updated_at: new Date().toISOString(),
        })
        .eq('id', classId)
        .select()
        .single();

      if (error) {
        throw new ClassServiceError(
          'RESTORE_FAILED',
          'Failed to restore class',
          error
        );
      }

      // Log restoration in audit trail
      await ClassService.logAuditTrail(
        classId,
        'restore',
        ['status', 'deleted_at'],
        oldClass,
        restoredClass,
        teacherId
      );

      return restoredClass!;
    } catch (error) {
      if (error instanceof ClassServiceError) {
        throw error;
      }
      throw new ClassServiceError(
        'UNEXPECTED_ERROR',
        'An unexpected error occurred',
        error
      );
    }
  }

  /**
   * Bulk operations
   */
  static async bulkCreateClasses(
    classes: CreateClassRequest[],
    teacherId: string
  ): Promise<{
    results: Class[];
    errors: Array<{
      classData: CreateClassRequest;
      error: string;
    }>;
  }> {
    const results: Class[] = [];
    const errors: Array<{
      classData: CreateClassRequest;
      error: string;
    }> = [];

    for (const classData of classes) {
      try {
        const newClass = await ClassService.createClass(classData, teacherId);
        results.push(newClass);
      } catch (error) {
        errors.push({
          classData,
          error: error instanceof ClassServiceError ? error.message : 'Unknown error',
        });
      }
    }

    return { results, errors };
  }

  static async bulkUpdateClasses(
    request: BulkUpdateRequest,
    teacherId: string
  ): Promise<{
    results: Class[];
    errors: Array<{
      classId: number;
      error: string;
    }>;
  }> {
    const results: Class[] = [];
    const errors: Array<{
      classId: number;
      error: string;
    }> = [];

    for (const classId of request.class_ids) {
      try {
        const updatedClass = await ClassService.updateClass(classId, request.updates, teacherId);
        results.push(updatedClass);
      } catch (error) {
        errors.push({
          classId,
          error: error instanceof ClassServiceError ? error.message : 'Unknown error',
        });
      }
    }

    return { results, errors };
  }

  static async bulkDeleteClasses(
    classIds: number[],
    teacherId: string
  ): Promise<{
    results: number[];
    errors: Array<{
      classId: number;
      error: string;
    }>;
  }> {
    const results: number[] = [];
    const errors: Array<{
      classId: number;
      error: string;
    }> = [];

    for (const classId of classIds) {
      try {
        await ClassService.deleteClass(classId, teacherId);
        results.push(classId);
      } catch (error) {
        errors.push({
          classId,
          error: error instanceof ClassServiceError ? error.message : 'Unknown error',
        });
      }
    }

    return { results, errors };
  }

  /**
   * Helper methods
   */
  private static async checkDuplicateClassName(
    name: string,
    teacherId: string,
    schoolId: number
  ): Promise<Class | null> {
    const { data: existingClass } = await supabase
      .from('classes')
      .select('*')
      .eq('name', name)
      .eq('school_id', schoolId)
      .eq('status', 'active')
      .single();

    return existingClass || null;
  }

  private static async verifyClassAccess(classId: number, teacherId: string): Promise<boolean> {
    const { data: profile } = await supabase
      .from('profiles')
      .select('role, school_id')
      .eq('id', teacherId)
      .single();

    if (!profile) return false;

    // Administrators have access to all classes
    if (profile.role === 'management') {
      return true;
    }

    // Check if teacher is assigned to this class
    const { data: teacherAssignment } = await supabase
      .from('class_teachers')
      .select('user_id')
      .eq('class_id', classId)
      .eq('user_id', teacherId)
      .single();

    return !!teacherAssignment;
  }

  private static async logAuditTrail(
    classId: number,
    action: string,
    changedFields: string[] | null,
    oldValues: any,
    newValues: any,
    performedBy: string
  ): Promise<void> {
    const { error } = await supabase.from('class_audit_log').insert({
      class_id: classId,
      action,
      changed_fields: changedFields,
      old_values: oldValues,
      new_values: newValues,
      performed_by: performedBy,
    });

    if (error) {
      console.error('Failed to log audit trail:', error);
    }
  }
}
</file>

<file path="src/styles/theme.ts">
/**
 * Theme Design Tokens
 * Complete design token system combining colors, typography, spacing, and shadows
 */

import { Easing } from 'react-native';
import { colors, semanticColors, baseColors, roleColors, UserRole } from './colors';
import { typography, typographyVariants, fontFamily, fontWeight, fontSize, lineHeight } from './typography';
import { spacingTokens, spacing, semanticSpacing, componentSpacing } from './spacing';
import { shadows, semanticShadows, elevationLevels } from './shadows';

// Border Radius Scale
export const borderRadius = {
  none: 0,
  xs: 2,
  sm: 4,
  md: 8,
  lg: 12,
  xl: 16,
  '2xl': 20,
  '3xl': 24,
  full: 9999,
} as const;

// Animation/Transition Durations
export const duration = {
  fast: 150,
  normal: 300,
  slow: 500,
} as const;

// Animation Easing (CSS values for web)
export const easing = {
  linear: 'linear',
  ease: 'ease',
  easeIn: 'ease-in',
  easeOut: 'ease-out',
  easeInOut: 'ease-in-out',
} as const;

// Native Animation Easing (React Native Easing functions)
export const nativeEasing = {
  linear: Easing.linear,
  ease: Easing.ease,
  easeIn: Easing.in(Easing.ease),
  easeOut: Easing.out(Easing.ease),
  easeInOut: Easing.inOut(Easing.ease),
} as const;

// Breakpoints for responsive design
export const breakpoints = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
} as const;

// Z-Index Scale (numeric values only for type consistency)
export const zIndex = {
  hide: -1,
  base: 0,
  docked: 10,
  dropdown: 1000,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800,
} as const;

// Z-Index utility for handling auto values
export const zIndexUtils = {
  auto: 'auto' as const,
  getNumeric: (key: keyof typeof zIndex) => zIndex[key],
  getAuto: () => 'auto' as const,
} as const;

// Function to generate component themes from a base theme
export const createComponentThemes = (currentTheme: Omit<Theme, 'componentThemes'>) => ({
  button: {
    borderRadius: currentTheme.borderRadius.md,
    minHeight: {
      small: 32,
      medium: 40,
      large: 48,
    },
    padding: {
      small: { horizontal: 12, vertical: 6 },
      medium: { horizontal: 16, vertical: 8 },
      large: { horizontal: 20, vertical: 12 },
    },
    typography: {
      small: currentTheme.typography.variants.buttonSmall,
      medium: currentTheme.typography.variants.button,
      large: currentTheme.typography.variants.buttonLarge,
    },
  },
  card: {
    borderRadius: currentTheme.borderRadius.lg,
    padding: {
      none: 0,
      small: currentTheme.spacing.base.sm,
      medium: currentTheme.spacing.base.md,
      large: currentTheme.spacing.base.lg,
    },
    backgroundColor: currentTheme.colors.surface.primary,
    shadow: currentTheme.shadows.card,
  },
  input: {
    borderRadius: currentTheme.borderRadius.md,
    padding: {
      horizontal: currentTheme.spacing.base.md,
      vertical: currentTheme.spacing.base.sm,
    },
    minHeight: 40,
    borderWidth: 1,
    borderColor: currentTheme.colors.border.primary,
    focusBorderColor: currentTheme.colors.border.focus,
    errorBorderColor: currentTheme.colors.border.error,
    backgroundColor: currentTheme.colors.surface.primary,
  },
  modal: {
    borderRadius: currentTheme.borderRadius['2xl'],
    padding: currentTheme.spacing.base.lg,
    backgroundColor: currentTheme.colors.surface.primary,
    shadow: currentTheme.shadows.modal,
    backdropColor: 'rgba(0, 0, 0, 0.5)',
    maxHeight: '80%',
  },
  header: {
    height: currentTheme.spacing.component.header.height,
    padding: {
      horizontal: currentTheme.spacing.component.header.horizontal,
      vertical: currentTheme.spacing.component.header.vertical,
    },
    backgroundColor: currentTheme.colors.surface.primary,
    shadow: currentTheme.shadows.header,
    borderBottomWidth: 1,
    borderBottomColor: currentTheme.colors.border.primary,
  },
  tabBar: {
    height: currentTheme.spacing.component.tabBar.height,
    padding: {
      horizontal: currentTheme.spacing.component.tabBar.horizontal,
      vertical: currentTheme.spacing.component.tabBar.vertical,
    },
    backgroundColor: currentTheme.colors.surface.primary,
    shadow: currentTheme.shadows.tabBar,
    borderTopWidth: 1,
    borderTopColor: currentTheme.colors.border.primary,
  },
});

const baseTheme = {
  colors,
  typography,
  spacing: spacingTokens,
  shadows,
  borderRadius,
  duration,
  easing,
  nativeEasing,
  breakpoints,
  zIndex,
  zIndexUtils,
  elevationLevels,
};

const componentThemes = createComponentThemes(baseTheme);

// Complete Theme Interface - flexible to accommodate role-based variations
export interface Theme {
  colors: {
    // Allow flexible primary/secondary colors for role-based themes
    primary: {
      main: string;
      light: string;
      dark: string;
      contrast: string;
    };
    secondary: {
      main: string;
      light: string;
      dark: string;
      contrast: string;
    };
    // Include all other color properties from the base colors
    success: typeof colors.success;
    warning: typeof colors.warning;
    error: typeof colors.error;
    info: typeof colors.info;
    background: typeof colors.background;
    surface: typeof colors.surface;
    text: typeof colors.text;
    border: typeof colors.border;
    interactive: typeof colors.interactive;
    role: typeof colors.role;
    // Base colors
    teal: typeof colors.teal;
    gold: typeof colors.gold;
    neutral: typeof colors.neutral;
    white: typeof colors.white;
    black: typeof colors.black;
  };
  typography: typeof typography;
  spacing: typeof spacingTokens;
  shadows: typeof shadows;
  borderRadius: typeof borderRadius;
  duration: typeof duration;
  easing: typeof easing;
  nativeEasing: typeof nativeEasing;
  breakpoints: typeof breakpoints;
  zIndex: typeof zIndex;
  zIndexUtils: typeof zIndexUtils;
  elevationLevels: typeof elevationLevels;
  componentThemes: ReturnType<typeof createComponentThemes>;
}

// Main Theme Object
export const theme: Theme = {
  ...baseTheme,
  componentThemes,
} as const;



// Color manipulation utilities
const lighten = (hex: string, amount: number): string => {
  // Convert hex to RGB
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  
  // Lighten each component
  const newR = Math.min(255, Math.round(r + (255 - r) * amount));
  const newG = Math.min(255, Math.round(g + (255 - g) * amount));
  const newB = Math.min(255, Math.round(b + (255 - b) * amount));
  
  // Convert back to hex
  return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
};

const darken = (hex: string, amount: number): string => {
  // Convert hex to RGB
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  
  // Darken each component
  const newR = Math.max(0, Math.round(r * (1 - amount)));
  const newG = Math.max(0, Math.round(g * (1 - amount)));
  const newB = Math.max(0, Math.round(b * (1 - amount)));
  
  // Convert back to hex
  return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
};

// Helper function to generate color variants for role themes
const getRoleColorVariants = (role: UserRole) => {
  const primary = colors.role[role].primary;
  const accent = colors.role[role].accent;
  
  return {
    primary: {
      light: lighten(primary, 0.2),
      dark: darken(primary, 0.2),
    },
    secondary: {
      light: lighten(accent, 0.3),
      dark: darken(accent, 0.1),
    },
  };
};

// Role-specific theme variations
const createRoleTheme = (role: UserRole): Theme => {
  const colorVariants = getRoleColorVariants(role);
  
  const roleBaseTheme = {
    ...baseTheme,
    colors: {
      ...colors,
      primary: {
        main: roleColors[role].primary,
        light: colorVariants.primary.light,
        dark: colorVariants.primary.dark,
        contrast: baseColors.white,
      },
      secondary: {
        main: roleColors[role].accent,
        light: colorVariants.secondary.light,
        dark: colorVariants.secondary.dark,
        contrast: baseColors.white,
      },
    },
  };

  return {
    ...roleBaseTheme,
    componentThemes: createComponentThemes(roleBaseTheme),
  };
};

export const roleThemes = {
  student: createRoleTheme('student'),
  teacher: createRoleTheme('teacher'),
  parent: createRoleTheme('parent'),
  management: createRoleTheme('management'),
} as const;

// Export everything
export {
  colors,
  semanticColors,
  baseColors,
  roleColors,
  typography,
  typographyVariants,
  fontFamily,
  fontWeight,
  fontSize,
  lineHeight,
  spacingTokens,
  spacing,
  semanticSpacing,
  componentSpacing,
  shadows,
  semanticShadows,
  elevationLevels,
};

// Type exports
export type BorderRadiusKey = keyof typeof borderRadius;
export type DurationKey = keyof typeof duration;
export type EasingKey = keyof typeof easing;
export type BreakpointKey = keyof typeof breakpoints;
export type ZIndexKey = keyof typeof zIndex;
export type ComponentThemeKey = keyof typeof componentThemes;

// Default export
export default theme;
</file>

<file path="jest.setup.js">
/**
 * Jest Setup Configuration
 * Sets up testing environment for React Native components
 */

require('@testing-library/jest-native/extend-expect');

// Mock Expo modules that might cause issues in tests
jest.mock('expo-constants', () => ({
  expoConfig: {
    name: 'MadraXis',
    slug: 'madraxis',
  },
  executionEnvironment: 'standalone',
}));

jest.mock('expo-font', () => ({
  loadAsync: jest.fn(),
  isLoaded: jest.fn(() => true),
}));

jest.mock('expo-splash-screen', () => ({
  hideAsync: jest.fn(),
  preventAutoHideAsync: jest.fn(),
}));

// Mock React Native Reanimated
jest.mock('react-native-reanimated', () => {
  const Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = () => {};
  return Reanimated;
});

// Mock Async Storage
jest.mock('@react-native-async-storage/async-storage', () =>
  require('@react-native-async-storage/async-storage/jest/async-storage-mock')
);

// Mock Expo Vector Icons
jest.mock('@expo/vector-icons', () => {
  const { View } = require('react-native');
  return {
    Ionicons: View,
    MaterialIcons: View,
    FontAwesome: View,
    AntDesign: View,
    Entypo: View,
    EvilIcons: View,
    Feather: View,
    Foundation: View,
    MaterialCommunityIcons: View,
    Octicons: View,
    SimpleLineIcons: View,
    Zocial: View,
  };
});

// Mock React Native ActivityIndicator to avoid ES6 syntax issues
jest.mock('react-native/Libraries/Components/ActivityIndicator/ActivityIndicator', () => {
  const React = require('react');
  const { View } = require('react-native');
  return {
    __esModule: true,
    default: ({ size = 'small', color = '#007AFF', testID, ...props }) => {
      return React.createElement(View, {
        ...props,
        testID: testID || 'activity-indicator',
        size: size,
        color: color
      });
    },
  };
});

// Mock ActivityIndicatorViewNativeComponent
jest.mock('react-native/src/private/specs_DEPRECATED/components/ActivityIndicatorViewNativeComponent', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

// Mock React Native Modal to avoid ES6 syntax issues
jest.mock('react-native/Libraries/Modal/Modal', () => {
  const React = require('react');
  const { View } = require('react-native');
  return {
    __esModule: true,
    default: ({ visible, transparent, animationType, onRequestClose, children, testID, ...props }) => {
      if (!visible) return null;
      return React.createElement(View, {
        ...props,
        testID: testID || 'modal',
        style: { backgroundColor: transparent ? 'transparent' : 'white' }
      }, children);
    },
  };
});

// Mock RCTModalHostViewNativeComponent
jest.mock('react-native/src/private/specs_DEPRECATED/components/RCTModalHostViewNativeComponent', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

// Mock React Native ScrollView to avoid ES6 syntax issues
jest.mock('react-native/Libraries/Components/ScrollView/ScrollView', () => {
  const React = require('react');
  const { View } = require('react-native');
  
  // Create a simple View-like component using actual React Native View
  const MockScrollView = ({ children, refreshing, onRefresh, showsVerticalScrollIndicator, testID, ...props }) => {
    return React.createElement(View, {
      ...props,
      testID: testID || 'scroll-view',
    }, children);
  };
  
  return {
    __esModule: true,
    default: MockScrollView,
  };
});

// Mock ScrollView related native components
jest.mock('react-native/src/private/specs_DEPRECATED/components/AndroidHorizontalScrollContentViewNativeComponent', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

jest.mock('react-native/src/private/components/HScrollViewNativeComponents', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

jest.mock('react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

// Mock React Native SafeAreaView to avoid ES6 syntax issues
jest.mock('react-native/Libraries/Components/SafeAreaView/SafeAreaView', () => {
  const React = require('react');
  const { View } = require('react-native');
  return {
    __esModule: true,
    default: ({ children, style, ...props }) => {
      return React.createElement(View, {
        ...props,
        style: style,
      }, children);
    },
  };
});

// Mock RCTSafeAreaViewNativeComponent
jest.mock('react-native/src/private/specs_DEPRECATED/components/RCTSafeAreaViewNativeComponent', () => {
  return {
    __INTERNAL_VIEW_CONFIG: {},
  };
});

// Mock Theme Context for hooks
jest.mock('./src/context/ThemeContext', () => ({
  ...jest.requireActual('./src/context/ThemeContext'),
  useTypography: jest.fn(() => ({
    variants: {
      h1: { fontSize: 32, fontWeight: '700', lineHeight: 40, fontFamily: 'System' },
      h2: { fontSize: 28, fontWeight: '600', lineHeight: 36, fontFamily: 'System' },
      h3: { fontSize: 24, fontWeight: '600', lineHeight: 32, fontFamily: 'System' },
      h4: { fontSize: 20, fontWeight: '600', lineHeight: 28, fontFamily: 'System' },
      body1: { fontSize: 16, fontWeight: '400', lineHeight: 24, fontFamily: 'System' },
      body2: { fontSize: 14, fontWeight: '400', lineHeight: 20, fontFamily: 'System' },
      button: { fontSize: 14, fontWeight: '600', lineHeight: 20, fontFamily: 'System' },
      buttonSmall: { fontSize: 12, fontWeight: '600', lineHeight: 16, fontFamily: 'System' },
      buttonLarge: { fontSize: 16, fontWeight: '600', lineHeight: 24, fontFamily: 'System' },
      caption: { fontSize: 12, fontWeight: '400', lineHeight: 16, fontFamily: 'System' },
      overline: { fontSize: 10, fontWeight: '600', lineHeight: 12, fontFamily: 'System' },
    },
  })),
  useColors: jest.fn(() => ({
    text: {
      primary: '#212529',
      secondary: '#6c757d',
      tertiary: '#adb5bd',
      disabled: '#ced4da',
      inverse: '#ffffff',
    },
    success: {
      main: '#28a745',
    },
    warning: {
      main: '#ffc107',
    },
    error: {
      main: '#dc3545',
    },
    primary: {
      main: '#007bff',
      light: '#66b3ff',
      dark: '#0056b3',
      contrast: '#ffffff',
    },
    secondary: {
      main: '#6c757d',
      light: '#a8b3bd',
      dark: '#495057',
      contrast: '#ffffff',
    },
    background: {
      default: '#f8f9fa',
      paper: '#ffffff',
    },
    surface: {
      primary: '#ffffff',
      secondary: '#f8f9fa',
    },
    interactive: {
      hover: '#e9ecef',
      active: '#dee2e6',
      selected: '#007bff',
      disabled: '#f8f9fa',
    },
    border: {
      primary: '#dee2e6',
      secondary: '#e9ecef',
      focus: '#007bff',
      error: '#dc3545',
      success: '#28a745',
      warning: '#ffc107',
    },
  })),
  useSpacing: jest.fn(() => ({
    base: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 24,
      xl: 32,
      '2xl': 48,
      '3xl': 64,
    },
  })),
  useTheme: jest.fn(() => ({
    theme: {
      typography: {
        fontWeight: {
          normal: '400',
          medium: '500',
          semibold: '600',
          bold: '700',
        },
        lineHeight: {
          tight: 1.2,
          normal: 1.5,
          relaxed: 1.8,
        },
        fontSize: {
          xs: 12,
          sm: 14,
          md: 16,
          lg: 18,
          xl: 20,
          '2xl': 24,
          '3xl': 30,
          '4xl': 36,
        },
      },
      spacing: {
        base: {
          xs: 4,
          sm: 8,
          md: 16,
          lg: 24,
          xl: 32,
        },
      },
      borderRadius: {
        none: 0,
        xs: 2,
        sm: 4,
        md: 8,
        lg: 12,
        xl: 16,
        '2xl': 20,
        '3xl': 24,
        full: 9999,
      },
      shadows: {
        none: { shadowColor: '#000', shadowOffset: { width: 0, height: 0 }, shadowOpacity: 0, shadowRadius: 0, elevation: 0 },
        sm: { shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.1, shadowRadius: 2, elevation: 2 },
        md: { shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 4 },
        lg: { shadowColor: '#000', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.15, shadowRadius: 8, elevation: 8 },
        button: { shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 4 },
      },
    },
  })),
}));

// Silence the warning: Animated: `useNativeDriver` is not supported
// Note: This mock is commented out as it may not be available in all RN versions
// jest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');

// Mock console methods to reduce noise in tests
global.console = {
  ...console,
  // Uncomment to ignore specific console methods in tests
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
};
</file>

<file path="src/components/templates/ClassesListTemplate.tsx">
import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, TextInput, Modal, ActivityIndicator, Alert, ScrollView } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { useAuth } from '@/src/context/AuthContext';
import { ClassService } from '@/src/services/classService';
import { Class } from '@/src/types/class';
import { ClassWithDetails } from '@/src/services/classService';
import ClassFormModal from '@/src/components/organisms/ClassFormModal';



export default function ClassesList() {
  const router = useRouter();
  const { user, profile } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingClass, setEditingClass] = useState<ClassWithDetails | null>(null);
  const [classes, setClasses] = useState<ClassWithDetails[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedClasses, setSelectedClasses] = useState<number[]>([]);
  const [bulkSelectionMode, setBulkSelectionMode] = useState(false);
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive' | 'archived'>('all');
  const [sortBy, setSortBy] = useState<'name' | 'level' | 'student_count' | 'created_at'>('name');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [showFilterModal, setShowFilterModal] = useState(false);

  // Debounce search query
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  // Fetch classes
  const fetchClasses = useCallback(async () => {
    if (!user?.id) {
      setError('User not authenticated');
      setClasses([]);
      setLoading(false);
      return;
    }
    
    console.log('User profile:', { userId: user.id, profile, schoolId: profile?.school_id });

    try {
      setLoading(true);
      setError(null);
      
      console.log('Fetching classes for user:', user.id);
      const classes = await ClassService.getTeacherClasses(user.id, {
          searchTerm: debouncedSearchQuery,
          status: filterStatus === 'all' ? undefined : filterStatus,
          sortBy,
        sortOrder,
        limit: 50,
        offset: 0
      });

      console.log('Classes received:', {
        count: classes.length,
        classes: classes.map(c => ({ id: c.id, name: c.name }))
      });
      
      setClasses(classes);
    } catch (err) {
      setError('Failed to load classes');
      console.error('Error fetching classes:', err);
    } finally {
      setLoading(false);
    }
  }, [user, debouncedSearchQuery, filterStatus, sortBy, sortOrder]);

  useEffect(() => {
    fetchClasses();
  }, [fetchClasses]);

  const handleRefresh = useCallback(() => {
    fetchClasses();
  }, [fetchClasses]);

  const handleOpenAddModal = () => {
    if (!profile?.school_id) {
      Alert.alert('Error', 'School ID is required to create a class');
      return;
    }
    setEditingClass(null);
    setShowAddModal(true);
  };

  const handleOpenEditModal = (classItem: Class) => {
    if (!profile?.school_id) {
      Alert.alert('Error', 'School ID is required to edit a class');
      return;
    }
    // Convert Class to ClassWithDetails by adding required properties
    const classWithDetails: ClassWithDetails = {
      ...classItem,
      teachers: [] // Initialize with empty array, will be populated by the modal if needed
    };
    setEditingClass(classWithDetails);
    setShowAddModal(true);
  };

  const handleCloseModal = () => {
    setShowAddModal(false);
    setEditingClass(null);
  };

  const handleFormSuccess = () => {
    handleCloseModal();
    fetchClasses();
  };

  const toggleClassSelection = (classId: number) => {
    setSelectedClasses(prev => 
      prev.includes(classId) 
        ? prev.filter(id => id !== classId)
        : [...prev, classId]
    );
  };

  const toggleBulkSelectionMode = () => {
    setBulkSelectionMode(!bulkSelectionMode);
    setSelectedClasses([]);
  };

  const handleBulkDelete = async () => {
    if (selectedClasses.length === 0) return;

    Alert.alert(
      'Delete Classes',
      `Are you sure you want to delete ${selectedClasses.length} class(es)?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Delete', 
          style: 'destructive',
          onPress: async () => {
            try {
              if (!user?.id) {
                Alert.alert('Error', 'User not authenticated');
                return;
              }
              setLoading(true);
              await ClassService.bulkDeleteClasses(selectedClasses, user.id);
              setSelectedClasses([]);
              setBulkSelectionMode(false);
              fetchClasses();
            } catch (error) {
              Alert.alert('Error', 'Failed to delete classes');
            } finally {
              setLoading(false);
            }
          }
        }
      ]
    );
  };

  const handleBulkUpdateStatus = async (status: 'active' | 'inactive' | 'archived') => {
    if (selectedClasses.length === 0) return;

    if (!user?.id) {
      Alert.alert('Error', 'User not authenticated');
      return;
    }

    try {
      setLoading(true);
      await ClassService.bulkUpdateClasses({
        class_ids: selectedClasses,
        updates: { status }
      }, user.id);
      setSelectedClasses([]);
      setBulkSelectionMode(false);
      fetchClasses();
    } catch (error) {
      Alert.alert('Error', 'Failed to update classes');
    } finally {
      setLoading(false);
    }
  };

  const renderClassItem = ({ item }: { item: ClassWithDetails }) => (
    <TouchableOpacity 
      style={[
        styles.classCard,
        selectedClasses.includes(item.id) && styles.selectedCard,
        item.status === 'archived' && styles.archivedCard
      ]}
      onPress={() => {
        if (bulkSelectionMode) {
          toggleClassSelection(item.id);
        } else {
          router.push({
            pathname: '/(teacher)/class/[id]',
            params: { id: item.id }
          });
        }
      }}
      onLongPress={() => {
        if (!bulkSelectionMode) {
          setBulkSelectionMode(true);
          toggleClassSelection(item.id);
        }
      }}
    >
      {bulkSelectionMode && (
        <View style={styles.checkboxContainer}>
          <Ionicons 
            name={selectedClasses.includes(item.id) ? "checkbox" : "square-outline"} 
            size={24} 
            color="#005e7a" 
          />
        </View>
      )}
      
      <View style={styles.classHeader}>
        <View style={styles.classInfo}>
          <Text style={styles.className}>{item.name}</Text>
          <Text style={styles.classLevel}>{item.level}</Text>
          <Text style={styles.classDescription}>{item.description}</Text>
          <View style={styles.classMeta}>
            <Text style={[styles.statusBadge, styles[`status_${item.status}`]]}>
              {item.status}
            </Text>
            <Text style={styles.academicInfo}>
              {item.academic_year} - Semester {item.semester}
            </Text>
          </View>
        </View>
        <View style={styles.classStats}>
          <View style={styles.statItem}>
            <Ionicons name="people" size={16} color="#666666" />
            <Text style={styles.statText}>{item.student_count || 0}</Text>
          </View>
          <View style={styles.statItem}>
            <Ionicons name="book" size={16} color="#666666" />
            <Text style={styles.statText}>{item.subject_count || 0}</Text>
          </View>
          <View style={styles.statItem}>
            <Ionicons name="person" size={16} color="#666666" />
            <Text style={styles.statText}>{item.teacher_count || 0}</Text>
          </View>
        </View>
      </View>
      <View style={styles.classActions}>
        <TouchableOpacity 
          style={[styles.actionButton, item.status === 'archived' && styles.disabledAction]}
          disabled={item.status === 'archived'}
          onPress={() => router.push({
            pathname: '/(teacher)/class/[id]/students',
            params: { id: item.id }
          })}
        >
          <Ionicons name="people" size={16} color={item.status === 'archived' ? '#ccc' : '#005e7a'} />
          <Text style={[styles.actionText, item.status === 'archived' && styles.disabledActionText]}>Siswa</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[styles.actionButton, item.status === 'archived' && styles.disabledAction]}
          disabled={item.status === 'archived'}
          onPress={() => router.push({
            pathname: '/(teacher)/class/[id]',
            params: { id: item.id, tab: 'subjects' }
          })}
        >
          <Ionicons name="book" size={16} color={item.status === 'archived' ? '#ccc' : '#005e7a'} />
          <Text style={[styles.actionText, item.status === 'archived' && styles.disabledActionText]}>Mata Pelajaran</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={[styles.actionButton, item.status === 'archived' && styles.disabledAction]}
          disabled={item.status === 'archived'}
          onPress={() => router.push({
            pathname: '/(teacher)/class/[id]',
            params: { id: item.id, tab: 'reports' }
          })}
        >
          <Ionicons name="document-text" size={16} color={item.status === 'archived' ? '#ccc' : '#005e7a'} />
          <Text style={[styles.actionText, item.status === 'archived' && styles.disabledActionText]}>Laporan</Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  const renderEmptyState = () => (
    <View style={styles.emptyContainer}>
      <Ionicons name="school" size={64} color="#ccc" />
      <Text style={styles.emptyTitle}>Tidak ada kelas</Text>
      <Text style={styles.emptyDescription}>
        {error || 'Belum ada kelas yang dibuat. Tambahkan kelas baru untuk memulai.'}
      </Text>
      <TouchableOpacity style={styles.emptyButton} onPress={() => setShowAddModal(true)}>
        <Text style={styles.emptyButtonText}>Tambah Kelas Baru</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={[styles.header, bulkSelectionMode && styles.bulkHeader]}>
        <TouchableOpacity onPress={() => {
          if (bulkSelectionMode) {
            setBulkSelectionMode(false);
            setSelectedClasses([]);
          } else {
            router.back();
          }
        }}>
          <Ionicons name={bulkSelectionMode ? "close" : "arrow-back"} size={24} color="#333333" />
        </TouchableOpacity>
        
        <Text style={styles.headerTitle}>
          {bulkSelectionMode ? `${selectedClasses.length} selected` : "Daftar Kelas"}
        </Text>
        
        <View style={styles.headerActions}>
          {bulkSelectionMode ? (
            <View style={styles.bulkActions}>
              <TouchableOpacity onPress={handleBulkDelete}>
                <Ionicons name="trash" size={24} color="#ff3b30" />
              </TouchableOpacity>
              <TouchableOpacity onPress={() => handleBulkUpdateStatus('archived')}>
                <Ionicons name="archive" size={24} color="#ff9500" />
              </TouchableOpacity>
            </View>
          ) : (
            <View style={styles.headerActions}>
              <TouchableOpacity onPress={toggleBulkSelectionMode}>
                <Ionicons name="checkbox" size={24} color="#005e7a" />
              </TouchableOpacity>
              <TouchableOpacity onPress={handleOpenAddModal}>
                <Ionicons name="add" size={24} color="#005e7a" />
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>

      {/* Search and Filter Bar */}
      <View style={styles.searchFilterContainer}>
        <View style={styles.searchContainer}>
          <Ionicons name="search" size={20} color="#666666" />
          <TextInput
            style={styles.searchInput}
            placeholder="Cari kelas..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#999999"
          />
        </View>
        
        <TouchableOpacity 
          style={styles.filterButton}
          onPress={() => setShowFilterModal(true)}
        >
          <Ionicons name="filter" size={20} color="#005e7a" />
        </TouchableOpacity>
      </View>

      {/* Classes List */}
      <FlatList
        data={classes}
        renderItem={renderClassItem}
        keyExtractor={(item) => item.id.toString()}
        contentContainerStyle={[
          styles.listContainer,
          classes.length === 0 && styles.emptyListContainer
        ]}
        showsVerticalScrollIndicator={false}
        refreshing={loading}
        onRefresh={handleRefresh}
        ListEmptyComponent={renderEmptyState}
      />

      {/* Filter Modal */}
      <Modal
        visible={showFilterModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowFilterModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Filter & Sort</Text>
              <TouchableOpacity onPress={() => setShowFilterModal(false)}>
                <Ionicons name="close" size={24} color="#333333" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.modalBody}>
              <Text style={styles.sectionTitle}>Status</Text>
              <View style={styles.filterOptions}>
                {['all', 'active', 'inactive', 'archived'].map((status) => (
                  <TouchableOpacity
                    key={status}
                    style={[
                      styles.filterOption,
                      filterStatus === status && styles.selectedFilterOption
                    ]}
                    onPress={() => setFilterStatus(status as 'all' | 'active' | 'inactive' | 'archived')}
                  >
                    <Text style={[
                      styles.filterOptionText,
                      filterStatus === status && styles.selectedFilterOptionText
                    ]}
                    >
                      {status.charAt(0).toUpperCase() + status.slice(1)}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              
              <Text style={[styles.sectionTitle, styles.sectionSpacing]}>Sort By</Text>
              <View style={styles.filterOptions}>
                {[
                  { key: 'name', label: 'Name' },
                  { key: 'level', label: 'Level' },
                  { key: 'student_count', label: 'Student Count' },
                  { key: 'created_at', label: 'Created Date' }
                ].map((option) => (
                  <TouchableOpacity
                    key={option.key}
                    style={[
                      styles.filterOption,
                      sortBy === option.key && styles.selectedFilterOption
                    ]}
                    onPress={() => setSortBy(option.key as 'name' | 'level' | 'student_count' | 'created_at')}
                  >
                    <Text style={[
                      styles.filterOptionText,
                      sortBy === option.key && styles.selectedFilterOptionText
                    ]}
                    >
                      {option.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              
              <Text style={[styles.sectionTitle, styles.sectionSpacing]}>Sort Order</Text>
              <View style={styles.filterOptions}>
                {[
                  { key: 'asc', label: 'Ascending' },
                  { key: 'desc', label: 'Descending' }
                ].map((option) => (
                  <TouchableOpacity
                    key={option.key}
                    style={[
                      styles.filterOption,
                      sortOrder === option.key && styles.selectedFilterOption
                    ]}
                    onPress={() => setSortOrder(option.key as 'asc' | 'desc')}
                  >
                    <Text style={[
                      styles.filterOptionText,
                      sortOrder === option.key && styles.selectedFilterOptionText
                    ]}
                    >
                      {option.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
            
            <View style={styles.modalFooter}>
              <TouchableOpacity 
                style={styles.cancelButton}
                onPress={() => setShowFilterModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.saveButton}
                onPress={() => {
                  setShowFilterModal(false);
                  fetchClasses();
                }}
              >
                <Text style={styles.saveButtonText}>Apply</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <ClassFormModal
        visible={showAddModal}
        onClose={handleCloseModal}
        onSuccess={handleFormSuccess}
        classData={editingClass}
        schoolId={profile?.school_id || 1}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    marginHorizontal: 20,
    marginVertical: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  searchInput: {
    flex: 1,
    marginLeft: 12,
    fontSize: 16,
    color: '#333333',
  },
  listContainer: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  classCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  classHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  classInfo: {
    flex: 1,
    marginRight: 16,
  },
  className: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  classLevel: {
    fontSize: 14,
    color: '#005e7a',
    fontWeight: '600',
    marginBottom: 4,
  },
  classDescription: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
  classStats: {
    alignItems: 'flex-end',
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  statText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 4,
  },
  progressContainer: {
    alignItems: 'flex-end',
  },
  progressBar: {
    width: 80,
    height: 6,
    backgroundColor: '#e0e0e0',
    borderRadius: 3,
    marginBottom: 4,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 3,
  },
  progressText: {
    fontSize: 12,
    color: '#666666',
  },
  classActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    paddingTop: 12,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  actionText: {
    fontSize: 14,
    color: '#005e7a',
    marginLeft: 4,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    overflow: 'hidden',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  modalBody: {
    padding: 16,
  },
  modalFooter: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderRightWidth: 0.5,
    borderRightColor: '#e0e0e0',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    backgroundColor: '#005e7a',
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  searchFilterContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    marginBottom: 16,
  },
  filterButton: {
    backgroundColor: '#ffffff',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  bulkHeader: {
    backgroundColor: '#f0f8ff',
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  bulkActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  checkboxContainer: {
    position: 'absolute',
    top: 16,
    left: 16,
    zIndex: 1,
  },
  selectedCard: {
    borderColor: '#005e7a',
    borderWidth: 2,
  },
  archivedCard: {
    opacity: 0.7,
  },
  classMeta: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 8,
    gap: 8,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'capitalize',
  },
  status_active: {
    backgroundColor: '#e8f5e8',
    color: '#2e7d32',
  },
  status_inactive: {
    backgroundColor: '#fff3e0',
    color: '#f57c00',
  },
  status_archived: {
    backgroundColor: '#f5f5f5',
    color: '#666666',
  },
  academicInfo: {
    fontSize: 12,
    color: '#666666',
  },
  disabledAction: {
    opacity: 0.5,
  },
  disabledActionText: {
    color: '#ccc',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
  },
  emptyDescription: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    marginTop: 8,
    lineHeight: 22,
  },
  emptyButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 24,
  },
  emptyButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  emptyListContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  sectionSpacing: {
    marginTop: 24,
  },
  filterOptions: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  filterOption: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    backgroundColor: '#ffffff',
  },
  selectedFilterOption: {
    backgroundColor: '#005e7a',
    borderColor: '#005e7a',
  },
  filterOptionText: {
    fontSize: 14,
    color: '#333333',
  },
  selectedFilterOptionText: {
    color: '#ffffff',
  },
});
</file>

<file path="src/components/templates/ClassScheduleTemplate.tsx">
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList, Modal, TextInput, Alert } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { mockClassData, ClassData as MockClassData, ClassScheduleItem } from '../../mocks/classData';

const daysOfWeek = ['Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu', 'Minggu'];

export default function ClassSchedule() {
  const router = useRouter();
  const { id } = useLocalSearchParams<{ id: string }>();
  const parsedId = Number(id);
  const classId = isNaN(parsedId) ? 0 : parsedId;
  
  const [classData, setClassData] = useState<MockClassData | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newDay, setNewDay] = useState('');
  const [newTime, setNewTime] = useState('');
  const [newActivity, setNewActivity] = useState('');
  const [newNote, setNewNote] = useState('');
  
  // Fetch class data
  useEffect(() => {
    const foundClass = mockClassData.find(c => c.id === classId);
    if (foundClass) {
      setClassData(foundClass);
    }
  }, [classId]);
  
  if (!classData) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#333333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Jadwal Kelas</Text>
          <View style={{ width: 24 }} />
        </View>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Memuat data kelas...</Text>
        </View>
      </SafeAreaView>
    );
  }
  
  const handleAddSchedule = () => {
    // Trim whitespace from inputs
    const trimmedDay = newDay.trim();
    const trimmedTime = newTime.trim();
    const trimmedActivity = newActivity.trim();
    const trimmedNote = newNote ? newNote.trim() : newNote;

    // Validate empty inputs
    if (!trimmedDay || !trimmedTime || !trimmedActivity) {
      Alert.alert('Error', 'Mohon isi hari, waktu, dan aktivitas');
      return;
    }

    // Validate time format (supports both single time HH:mm and time range HH:mm - HH:mm)
    const singleTimeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;
    const timeRangeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])\s*-\s*([01]?[0-9]|2[0-3]):([0-5][0-9])$/;
    
    if (!singleTimeRegex.test(trimmedTime) && !timeRangeRegex.test(trimmedTime)) {
      Alert.alert('Error', 'Format waktu tidak valid. Mohon gunakan format HH:mm (contoh: 09:30) atau HH:mm - HH:mm (contoh: 08:00 - 10:00)');
      return;
    }

    const newScheduleItem: ClassScheduleItem = {
      id: Date.now(),
      day: trimmedDay,
      time: trimmedTime,
      activity: trimmedActivity,
      note: trimmedNote || undefined,
    };

    setClassData(prev => prev ? {
      ...prev,
      schedule: [...(prev.schedule || []), newScheduleItem]
    } : null);

    // Reset form
    setNewDay('');
    setNewTime('');
    setNewActivity('');
    setNewNote('');
    setShowAddModal(false);
  };

  const handleDeleteSchedule = (scheduleId: number) => {
    Alert.alert(
      'Hapus Jadwal',
      'Apakah Anda yakin ingin menghapus jadwal ini?',
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Hapus',
          style: 'destructive',
          onPress: () => {
            setClassData(prev => prev ? {
              ...prev,
              schedule: (prev.schedule || []).filter(item => item.id !== scheduleId)
            } : null);
          }
        }
      ]
    );
  };

  const renderScheduleItem = ({ item }: { item: ClassScheduleItem }) => (
    <View style={styles.scheduleCard}>
      <View style={styles.scheduleHeader}>
        <View style={styles.dayBadge}>
          <Text style={styles.dayText}>{item.day}</Text>
        </View>
        <View style={styles.scheduleInfo}>
          <Text style={styles.timeText}>{item.time}</Text>
          <Text style={styles.activityText}>{item.activity}</Text>
          {item.note && <Text style={styles.noteText}>{item.note}</Text>}
        </View>
        <TouchableOpacity 
          style={styles.deleteButton}
          onPress={() => item.id && handleDeleteSchedule(item.id)}
        >
          <Ionicons name="trash-outline" size={20} color="#ff4444" />
        </TouchableOpacity>
      </View>
    </View>
  );

  const groupedSchedule = daysOfWeek.map(day => ({
    day,
    items: (classData.schedule || []).filter(item => item.day === day)
  })).filter(group => group.items.length > 0);

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#333333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Jadwal - {classData.name}</Text>
        <TouchableOpacity onPress={() => setShowAddModal(true)}>
          <Ionicons name="add" size={24} color="#005e7a" />
        </TouchableOpacity>
      </View>

      {/* Schedule List */}
      {groupedSchedule.length > 0 ? (
        <FlatList
          data={classData.schedule || []}
          renderItem={renderScheduleItem}
          keyExtractor={(item) => item.id?.toString() || `${item.day}-${item.time}-${item.activity}`}
          contentContainerStyle={styles.listContainer}
          showsVerticalScrollIndicator={false}
        />
      ) : (
        <View style={styles.emptyState}>
          <Ionicons name="calendar-outline" size={64} color="#cccccc" />
          <Text style={styles.emptyStateTitle}>Belum ada jadwal</Text>
          <Text style={styles.emptyStateMessage}>
            Tambahkan jadwal pertama untuk kelas ini
          </Text>
          <TouchableOpacity 
            style={styles.emptyStateButton}
            onPress={() => setShowAddModal(true)}
          >
            <Text style={styles.emptyStateButtonText}>Tambah Jadwal</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Add Schedule Modal */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowAddModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Tambah Jadwal Baru</Text>
              <TouchableOpacity onPress={() => setShowAddModal(false)}>
                <Ionicons name="close" size={24} color="#333333" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.modalBody}>
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Hari *</Text>
                <View style={styles.daySelector}>
                  {daysOfWeek.map((day) => (
                    <TouchableOpacity
                      key={day}
                      style={[
                        styles.dayOption,
                        newDay === day && styles.selectedDayOption
                      ]}
                      onPress={() => setNewDay(day)}
                    >
                      <Text style={[
                        styles.dayOptionText,
                        newDay === day && styles.selectedDayOptionText
                      ]}>
                        {day}
                      </Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Waktu *</Text>
                <TextInput
                  style={styles.textInput}
                  value={newTime}
                  onChangeText={setNewTime}
                  placeholder="Contoh: 08:00 - 10:00"
                  placeholderTextColor="#999999"
                />
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Aktivitas *</Text>
                <TextInput
                  style={styles.textInput}
                  value={newActivity}
                  onChangeText={setNewActivity}
                  placeholder="Contoh: Hafalan Baru"
                  placeholderTextColor="#999999"
                />
              </View>
              
              <View style={styles.inputGroup}>
                <Text style={styles.inputLabel}>Catatan</Text>
                <TextInput
                  style={[styles.textInput, styles.textArea]}
                  value={newNote}
                  onChangeText={setNewNote}
                  placeholder="Catatan tambahan..."
                  placeholderTextColor="#999999"
                  multiline
                  numberOfLines={3}
                />
              </View>
            </View>
            
            <View style={styles.modalFooter}>
              <TouchableOpacity 
                style={styles.cancelButton}
                onPress={() => setShowAddModal(false)}
              >
                <Text style={styles.cancelButtonText}>Batal</Text>
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.saveButton}
                onPress={handleAddSchedule}
              >
                <Text style={styles.saveButtonText}>Simpan</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    flex: 1,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  listContainer: {
    padding: 20,
  },
  scheduleCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  scheduleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dayBadge: {
    backgroundColor: '#005e7a',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginRight: 16,
    minWidth: 80,
    alignItems: 'center',
  },
  dayText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  scheduleInfo: {
    flex: 1,
  },
  timeText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 4,
  },
  activityText: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  noteText: {
    fontSize: 12,
    color: '#999999',
    fontStyle: 'italic',
  },
  deleteButton: {
    padding: 8,
    borderRadius: 6,
    backgroundColor: '#fff5f5',
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyStateMessage: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  emptyStateButton: {
    backgroundColor: '#005e7a',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  emptyStateButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    overflow: 'hidden',
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  modalBody: {
    padding: 16,
    maxHeight: 400,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: '#ffffff',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  daySelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  dayOption: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    backgroundColor: '#ffffff',
  },
  selectedDayOption: {
    backgroundColor: '#005e7a',
    borderColor: '#005e7a',
  },
  dayOptionText: {
    fontSize: 14,
    color: '#666666',
  },
  selectedDayOptionText: {
    color: '#ffffff',
    fontWeight: '600',
  },
  modalFooter: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderRightWidth: 0.5,
    borderRightColor: '#e0e0e0',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666666',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    backgroundColor: '#005e7a',
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
  },
});
</file>

<file path="src/components/atoms/BackgroundPattern/BackgroundPattern.tsx">
/**
 * BackgroundPattern Component
 * Islamic geometric background pattern with design token integration
 */

import React, { useState, useMemo } from 'react';
import { View, ViewStyle, StyleSheet, Text, DimensionValue } from 'react-native';
import { SvgXml } from 'react-native-svg';
import { useTheme, useColors } from '../../../context/ThemeContext';

// Pattern variant types
export type PatternVariant = 'geometric' | 'minimal' | 'dots' | 'waves' | 'none';

// Pattern intensity levels
export type PatternIntensity = 'subtle' | 'light' | 'medium' | 'strong';

// BackgroundPattern Props Interface
export interface BackgroundPatternProps {
  // Pattern configuration
  variant?: PatternVariant;
  intensity?: PatternIntensity;
  
  // Color customization
  color?: string;
  opacity?: number;
  
  // Layout
  width?: number | string;
  height?: number | string;
  
  // Custom styling
  style?: ViewStyle;
  
  // Accessibility
  accessibilityLabel?: string;
  
  // Test ID
  testID?: string;
}

// Error boundary component for SVG rendering
class SvgErrorBoundary extends React.Component<{ 
  children: React.ReactNode; 
  fallback?: React.ReactNode 
}, { hasError: boolean }> {
  constructor(props: { children: React.ReactNode; fallback?: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): { hasError: boolean } {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    console.warn('SVG rendering error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <>{this.props.fallback}</>;
    }

    return <>{this.props.children}</>;
  }
}

// BackgroundPattern Component - Memoized for performance
export const BackgroundPattern: React.FC<BackgroundPatternProps> = React.memo(({
  variant = 'geometric',
  intensity = 'subtle',
  color,
  opacity,
  width = '100%',
  height = '100%',
  style,
  accessibilityLabel,
  testID,
}) => {
  const { theme } = useTheme();
  const colors = useColors();

  // Get pattern color
  const getPatternColor = (): string => {
    if (color) return color;
    return colors.primary.main;
  };

  // Get pattern opacity based on intensity
  const getPatternOpacity = (): number => {
    if (opacity !== undefined) return opacity;
    
    switch (intensity) {
      case 'subtle':
        return 0.03;
      case 'light':
        return 0.05;
      case 'medium':
        return 0.08;
      case 'strong':
        return 0.12;
      default:
        return 0.05;
    }
  };

  // Generate geometric pattern SVG
  const generateGeometricPattern = (): string => {
    const patternColor = getPatternColor();
    const patternOpacity = getPatternOpacity();
    
    return `
      <svg width="100%" height="100%" viewBox="0 0 375 812" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="375" height="812" fill="none"/>
        
        <!-- Islamic Geometric Pattern -->
        <g opacity="${patternOpacity}">
          <!-- Repeating Pattern -->
          <g fill="${patternColor}">
            <!-- Row 1 -->
            <path d="M0 0 L50 0 L25 43.3 Z" />
            <path d="M50 0 L100 0 L75 43.3 Z" />
            <path d="M100 0 L150 0 L125 43.3 Z" />
            <path d="M150 0 L200 0 L175 43.3 Z" />
            <path d="M200 0 L250 0 L225 43.3 Z" />
            <path d="M250 0 L300 0 L275 43.3 Z" />
            <path d="M300 0 L350 0 L325 43.3 Z" />
            <path d="M350 0 L400 0 L375 43.3 Z" />
            
            <!-- Row 2 -->
            <path d="M25 43.3 L75 43.3 L50 86.6 Z" />
            <path d="M75 43.3 L125 43.3 L100 86.6 Z" />
            <path d="M125 43.3 L175 43.3 L150 86.6 Z" />
            <path d="M175 43.3 L225 43.3 L200 86.6 Z" />
            <path d="M225 43.3 L275 43.3 L250 86.6 Z" />
            <path d="M275 43.3 L325 43.3 L300 86.6 Z" />
            <path d="M325 43.3 L375 43.3 L350 86.6 Z" />
            
            <!-- Row 3 -->
            <path d="M0 86.6 L50 86.6 L25 129.9 Z" />
            <path d="M50 86.6 L100 86.6 L75 129.9 Z" />
            <path d="M100 86.6 L150 86.6 L125 129.9 Z" />
            <path d="M150 86.6 L200 86.6 L175 129.9 Z" />
            <path d="M200 86.6 L250 86.6 L225 129.9 Z" />
            <path d="M250 86.6 L300 86.6 L275 129.9 Z" />
            <path d="M300 86.6 L350 86.6 L325 129.9 Z" />
            <path d="M350 86.6 L400 86.6 L375 129.9 Z" />
            
            <!-- Row 4 -->
            <path d="M25 129.9 L75 129.9 L50 173.2 Z" />
            <path d="M75 129.9 L125 129.9 L100 173.2 Z" />
            <path d="M125 129.9 L175 129.9 L150 173.2 Z" />
            <path d="M175 129.9 L225 129.9 L200 173.2 Z" />
            <path d="M225 129.9 L275 129.9 L250 173.2 Z" />
            <path d="M275 129.9 L325 129.9 L300 173.2 Z" />
            <path d="M325 129.9 L375 129.9 L350 173.2 Z" />
            
            <!-- Row 5 -->
            <path d="M0 173.2 L50 173.2 L25 216.5 Z" />
            <path d="M50 173.2 L100 173.2 L75 216.5 Z" />
            <path d="M100 173.2 L150 173.2 L125 216.5 Z" />
            <path d="M150 173.2 L200 173.2 L175 216.5 Z" />
            <path d="M200 173.2 L250 173.2 L225 216.5 Z" />
            <path d="M250 173.2 L300 173.2 L275 216.5 Z" />
            <path d="M300 173.2 L350 173.2 L325 216.5 Z" />
            <path d="M350 173.2 L400 173.2 L375 216.5 Z" />
            
            <!-- Continue pattern for more rows -->
            <path d="M25 216.5 L75 216.5 L50 259.8 Z" />
            <path d="M75 216.5 L125 216.5 L100 259.8 Z" />
            <path d="M125 216.5 L175 216.5 L150 259.8 Z" />
            <path d="M175 216.5 L225 216.5 L200 259.8 Z" />
            <path d="M225 216.5 L275 216.5 L250 259.8 Z" />
            <path d="M275 216.5 L325 216.5 L300 259.8 Z" />
            <path d="M325 216.5 L375 216.5 L350 259.8 Z" />
            
            <!-- Star patterns scattered throughout -->
            <path d="M100 300 L110 320 L130 320 L115 335 L120 355 L100 345 L80 355 L85 335 L70 320 L90 320 Z" />
            <path d="M250 400 L260 420 L280 420 L265 435 L270 455 L250 445 L230 455 L235 435 L220 420 L240 420 Z" />
            <path d="M150 500 L160 520 L180 520 L165 535 L170 555 L150 545 L130 555 L135 535 L120 520 L140 520 Z" />
            <path d="M300 600 L310 620 L330 620 L315 635 L320 655 L300 645 L280 655 L285 635 L270 620 L290 620 Z" />
            <path d="M200 700 L210 720 L230 720 L215 735 L220 755 L200 745 L180 755 L185 735 L170 720 L190 720 Z" />
          </g>
        </g>
        
        <!-- Decorative circles with varying opacity -->
        <circle cx="350" cy="150" r="100" fill="${patternColor}" opacity="${patternOpacity * 3}"/>
        <circle cx="50" cy="400" r="150" fill="${patternColor}" opacity="${patternOpacity * 2}"/>
        <circle cx="300" cy="700" r="120" fill="${patternColor}" opacity="${patternOpacity * 2.5}"/>
      </svg>
    `;
  };

  // Generate minimal pattern SVG
  const generateMinimalPattern = (): string => {
    const patternColor = getPatternColor();
    const patternOpacity = getPatternOpacity();
    
    return `
      <svg width="100%" height="100%" viewBox="0 0 375 812" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="375" height="812" fill="none"/>
        
        <!-- Minimal Pattern -->
        <g opacity="${patternOpacity}">
          <g fill="${patternColor}">
            <!-- Simple geometric shapes -->
            <circle cx="100" cy="100" r="2" />
            <circle cx="200" cy="150" r="2" />
            <circle cx="300" cy="200" r="2" />
            <circle cx="150" cy="300" r="2" />
            <circle cx="250" cy="350" r="2" />
            <circle cx="50" cy="400" r="2" />
            <circle cx="350" cy="450" r="2" />
            <circle cx="175" cy="550" r="2" />
            <circle cx="275" cy="600" r="2" />
            <circle cx="125" cy="700" r="2" />
            
            <!-- Subtle lines -->
            <line x1="0" y1="200" x2="375" y2="200" stroke="${patternColor}" stroke-width="0.5" />
            <line x1="0" y1="400" x2="375" y2="400" stroke="${patternColor}" stroke-width="0.5" />
            <line x1="0" y1="600" x2="375" y2="600" stroke="${patternColor}" stroke-width="0.5" />
          </g>
        </g>
      </svg>
    `;
  };

  // Generate dots pattern SVG
  const generateDotsPattern = (): string => {
    const patternColor = getPatternColor();
    const patternOpacity = getPatternOpacity();
    
    return `
      <svg width="100%" height="100%" viewBox="0 0 375 812" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="375" height="812" fill="none"/>
        
        <!-- Dots Pattern -->
        <g opacity="${patternOpacity}">
          <g fill="${patternColor}">
            ${Array.from({ length: 15 }, (_, row) =>
              Array.from({ length: 8 }, (_, col) => 
                `<circle cx="${col * 50 + 25}" cy="${row * 50 + 25}" r="1.5" />`
              ).join('')
            ).join('')}
          </g>
        </g>
      </svg>
    `;
  };

  // Generate waves pattern SVG
  const generateWavesPattern = (): string => {
    const patternColor = getPatternColor();
    const patternOpacity = getPatternOpacity();
    
    return `
      <svg width="100%" height="100%" viewBox="0 0 375 812" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="375" height="812" fill="none"/>
        
        <!-- Waves Pattern -->
        <g opacity="${patternOpacity}">
          <g fill="none" stroke="${patternColor}" stroke-width="1">
            <path d="M0 100 Q93.75 50 187.5 100 T375 100" />
            <path d="M0 200 Q93.75 150 187.5 200 T375 200" />
            <path d="M0 300 Q93.75 250 187.5 300 T375 300" />
            <path d="M0 400 Q93.75 350 187.5 400 T375 400" />
            <path d="M0 500 Q93.75 450 187.5 500 T375 500" />
            <path d="M0 600 Q93.75 550 187.5 600 T375 600" />
            <path d="M0 700 Q93.75 650 187.5 700 T375 700" />
          </g>
        </g>
      </svg>
    `;
  };


  // Don't render anything for 'none' variant
  if (variant === 'none') {
    return null;
  }

  // Memoize the pattern SVG generation
  const patternSvg = useMemo(() => {
    try {
      switch (variant) {
          case 'geometric':
            return generateGeometricPattern();
          case 'minimal':
            return generateMinimalPattern();
          case 'dots':
            return generateDotsPattern();
          case 'waves':
            return generateWavesPattern();
          default:
            return generateGeometricPattern();
        }
    } catch (error) {
      console.warn('Failed to generate pattern SVG:', error);
      return '';
    }
  }, [variant, color, opacity, intensity, colors.primary.main]);

  if ((variant as PatternVariant) === 'none' || !patternSvg) {
    return null;
  }

  return (
    <View
      style={[
        {
          width: width as DimensionValue,
          height: height as DimensionValue,
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
        },
        style,
      ]}
      accessibilityLabel={accessibilityLabel}
      testID={testID}
      pointerEvents="none"
    >
      <SvgErrorBoundary fallback={null}>
        <SvgXml xml={patternSvg} width="100%" height="100%" />
      </SvgErrorBoundary>
    </View>
  );
});

// Internal styles
const styles = StyleSheet.create({
  // Add any internal styles if needed
});

// Export default
export default BackgroundPattern;
</file>

</files>
